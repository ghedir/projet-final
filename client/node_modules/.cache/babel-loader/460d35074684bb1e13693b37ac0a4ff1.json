{"ast":null,"code":"const {\n  resolve\n} = require('path');\n\nconst log = require('npmlog');\n\nconst rpj = require('read-package-json-fast');\n\nconst PackageJson = require('@npmcli/package-json');\n\nconst BaseCommand = require('./base-command.js');\n\nclass SetScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Set tasks in the scripts section of package.json';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'set-script';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<script>] [<command>]'];\n  }\n\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json');\n      const {\n        scripts = {}\n      } = await rpj(json).catch(er => ({}));\n      return Object.keys(scripts);\n    }\n  }\n\n  validate(args) {\n    if (process.env.npm_lifecycle_event === 'postinstall') throw new Error('Scripts can’t set from the postinstall script'); // Parse arguments\n\n    if (args.length !== 2) throw new Error(`Expected 2 arguments: got ${args.length}`);\n  }\n\n  exec(args, cb) {\n    this.setScript(args).then(() => cb()).catch(cb);\n  }\n\n  async setScript(args) {\n    this.validate(args);\n    const warn = await this.doSetScript(this.npm.localPrefix, args[0], args[1]);\n    if (warn) log.warn('set-script', `Script \"${args[0]}\" was overwritten`);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.setScriptWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async setScriptWorkspaces(args, filters) {\n    this.validate(args);\n    await this.setWorkspaces(filters);\n\n    for (const [name, path] of this.workspaces) {\n      try {\n        const warn = await this.doSetScript(path, args[0], args[1]);\n\n        if (warn) {\n          log.warn('set-script', `Script \"${args[0]}\" was overwritten`);\n          log.warn(`  in workspace: ${name}`);\n          log.warn(`  at location: ${path}`);\n        }\n      } catch (err) {\n        log.error('set-script', err.message);\n        log.error(`  in workspace: ${name}`);\n        log.error(`  at location: ${path}`);\n        process.exitCode = 1;\n      }\n    }\n  } // returns a Boolean that will be true if\n  // the requested script was overwritten\n  // and false if it was set as a new script\n\n\n  async doSetScript(path, name, value) {\n    let warn = false;\n    const pkgJson = await PackageJson.load(path);\n    const {\n      scripts\n    } = pkgJson.content;\n    const overwriting = scripts && scripts[name] && scripts[name] !== value;\n    if (overwriting) warn = true;\n    pkgJson.update({\n      scripts: { ...scripts,\n        [name]: value\n      }\n    });\n    await pkgJson.save();\n    return warn;\n  }\n\n}\n\nmodule.exports = SetScript;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/set-script.js"],"names":["resolve","require","log","rpj","PackageJson","BaseCommand","SetScript","description","params","name","usage","completion","opts","argv","conf","remain","length","json","npm","localPrefix","scripts","catch","er","Object","keys","validate","args","process","env","npm_lifecycle_event","Error","exec","cb","setScript","then","warn","doSetScript","execWorkspaces","filters","setScriptWorkspaces","setWorkspaces","path","workspaces","err","error","message","exitCode","value","pkgJson","load","content","overwriting","update","save","module","exports"],"mappings":"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","sourcesContent":["const { resolve } = require('path')\nconst log = require('npmlog')\nconst rpj = require('read-package-json-fast')\nconst PackageJson = require('@npmcli/package-json')\n\nconst BaseCommand = require('./base-command.js')\nclass SetScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Set tasks in the scripts section of package.json'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'set-script'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<script>] [<command>]']\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json')\n      const { scripts = {} } = await rpj(json).catch(er => ({}))\n      return Object.keys(scripts)\n    }\n  }\n\n  validate (args) {\n    if (process.env.npm_lifecycle_event === 'postinstall')\n      throw new Error('Scripts can’t set from the postinstall script')\n\n    // Parse arguments\n    if (args.length !== 2)\n      throw new Error(`Expected 2 arguments: got ${args.length}`)\n  }\n\n  exec (args, cb) {\n    this.setScript(args).then(() => cb()).catch(cb)\n  }\n\n  async setScript (args) {\n    this.validate(args)\n    const warn = await this.doSetScript(this.npm.localPrefix, args[0], args[1])\n    if (warn)\n      log.warn('set-script', `Script \"${args[0]}\" was overwritten`)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.setScriptWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async setScriptWorkspaces (args, filters) {\n    this.validate(args)\n    await this.setWorkspaces(filters)\n\n    for (const [name, path] of this.workspaces) {\n      try {\n        const warn = await this.doSetScript(path, args[0], args[1])\n        if (warn) {\n          log.warn('set-script', `Script \"${args[0]}\" was overwritten`)\n          log.warn(`  in workspace: ${name}`)\n          log.warn(`  at location: ${path}`)\n        }\n      } catch (err) {\n        log.error('set-script', err.message)\n        log.error(`  in workspace: ${name}`)\n        log.error(`  at location: ${path}`)\n        process.exitCode = 1\n      }\n    }\n  }\n\n  // returns a Boolean that will be true if\n  // the requested script was overwritten\n  // and false if it was set as a new script\n  async doSetScript (path, name, value) {\n    let warn = false\n\n    const pkgJson = await PackageJson.load(path)\n    const { scripts } = pkgJson.content\n\n    const overwriting =\n      scripts\n        && scripts[name]\n        && scripts[name] !== value\n\n    if (overwriting)\n      warn = true\n\n    pkgJson.update({\n      scripts: {\n        ...scripts,\n        [name]: value,\n      },\n    })\n\n    await pkgJson.save()\n\n    return warn\n  }\n}\nmodule.exports = SetScript\n"]},"metadata":{},"sourceType":"script"}