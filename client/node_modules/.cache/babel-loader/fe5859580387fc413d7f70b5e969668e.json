{"ast":null,"code":"// The arborist manages three trees:\n// - actual\n// - virtual\n// - ideal\n//\n// The actual tree is what's present on disk in the node_modules tree\n// and elsewhere that links may extend.\n//\n// The virtual tree is loaded from metadata (package.json and lock files).\n//\n// The ideal tree is what we WANT that actual tree to become.  This starts\n// with the virtual tree, and then applies the options requesting\n// add/remove/update actions.\n//\n// To reify a tree, we calculate a diff between the ideal and actual trees,\n// and then turn the actual tree into the ideal tree by taking the actions\n// required.  At the end of the reification process, the actualTree is\n// updated to reflect the changes.\n//\n// Each tree has an Inventory at the root.  Shrinkwrap is tracked by Arborist\n// instance.  It always refers to the actual tree, but is updated (and written\n// to disk) on reification.\n// Each of the mixin \"classes\" adds functionality, but are not dependent on\n// constructor call order.  So, we just load them in an array, and build up\n// the base class, so that the overall voltron class is easier to test and\n// cover, and separation of concerns can be maintained.\nconst {\n  resolve\n} = require('path');\n\nconst {\n  homedir\n} = require('os');\n\nconst procLog = require('proc-log');\n\nconst {\n  saveTypeMap\n} = require('../add-rm-pkg-deps.js');\n\nconst mixins = [require('../tracker.js'), require('./pruner.js'), require('./deduper.js'), require('./audit.js'), require('./build-ideal-tree.js'), require('./load-workspaces.js'), require('./load-actual.js'), require('./load-virtual.js'), require('./rebuild.js'), require('./reify.js')];\nconst Base = mixins.reduce((a, b) => b(a), require('events'));\n\nconst getWorkspaceNodes = require('../get-workspace-nodes.js');\n\nclass Arborist extends Base {\n  constructor(options = {}) {\n    process.emit('time', 'arborist:ctor');\n    super(options);\n    this.options = {\n      nodeVersion: process.version,\n      ...options,\n      path: options.path || '.',\n      cache: options.cache || `${homedir()}/.npm/_cacache`,\n      packumentCache: options.packumentCache || new Map(),\n      log: options.log || procLog\n    };\n\n    if (options.saveType && !saveTypeMap.get(options.saveType)) {\n      throw new Error(`Invalid saveType ${options.saveType}`);\n    }\n\n    this.cache = resolve(this.options.cache);\n    this.path = resolve(this.options.path);\n    process.emit('timeEnd', 'arborist:ctor');\n  } // returns an array of the actual nodes for all the workspaces\n\n\n  workspaceNodes(tree, workspaces) {\n    return getWorkspaceNodes(tree, workspaces, this.log);\n  } // returns a set of workspace nodes and all their deps\n\n\n  workspaceDependencySet(tree, workspaces) {\n    const wsNodes = this.workspaceNodes(tree, workspaces);\n    const set = new Set(wsNodes);\n    const extraneous = new Set();\n\n    for (const node of set) {\n      for (const edge of node.edgesOut.values()) {\n        const dep = edge.to;\n\n        if (dep) {\n          set.add(dep);\n\n          if (dep.isLink) {\n            set.add(dep.target);\n          }\n        }\n      }\n\n      for (const child of node.children.values()) {\n        if (child.extraneous) {\n          extraneous.add(child);\n        }\n      }\n    }\n\n    for (const extra of extraneous) {\n      set.add(extra);\n    }\n\n    return set;\n  }\n\n}\n\nmodule.exports = Arborist;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/arborist/lib/arborist/index.js"],"names":["resolve","require","homedir","procLog","saveTypeMap","mixins","Base","reduce","a","b","getWorkspaceNodes","Arborist","constructor","options","process","emit","nodeVersion","version","path","cache","packumentCache","Map","log","saveType","get","Error","workspaceNodes","tree","workspaces","workspaceDependencySet","wsNodes","set","Set","extraneous","node","edge","edgesOut","values","dep","to","add","isLink","target","child","children","extra","module","exports"],"mappings":"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","sourcesContent":["// The arborist manages three trees:\n// - actual\n// - virtual\n// - ideal\n//\n// The actual tree is what's present on disk in the node_modules tree\n// and elsewhere that links may extend.\n//\n// The virtual tree is loaded from metadata (package.json and lock files).\n//\n// The ideal tree is what we WANT that actual tree to become.  This starts\n// with the virtual tree, and then applies the options requesting\n// add/remove/update actions.\n//\n// To reify a tree, we calculate a diff between the ideal and actual trees,\n// and then turn the actual tree into the ideal tree by taking the actions\n// required.  At the end of the reification process, the actualTree is\n// updated to reflect the changes.\n//\n// Each tree has an Inventory at the root.  Shrinkwrap is tracked by Arborist\n// instance.  It always refers to the actual tree, but is updated (and written\n// to disk) on reification.\n\n// Each of the mixin \"classes\" adds functionality, but are not dependent on\n// constructor call order.  So, we just load them in an array, and build up\n// the base class, so that the overall voltron class is easier to test and\n// cover, and separation of concerns can be maintained.\n\nconst {resolve} = require('path')\nconst {homedir} = require('os')\nconst procLog = require('proc-log')\nconst { saveTypeMap } = require('../add-rm-pkg-deps.js')\n\nconst mixins = [\n  require('../tracker.js'),\n  require('./pruner.js'),\n  require('./deduper.js'),\n  require('./audit.js'),\n  require('./build-ideal-tree.js'),\n  require('./load-workspaces.js'),\n  require('./load-actual.js'),\n  require('./load-virtual.js'),\n  require('./rebuild.js'),\n  require('./reify.js'),\n]\n\nconst Base = mixins.reduce((a, b) => b(a), require('events'))\nconst getWorkspaceNodes = require('../get-workspace-nodes.js')\n\nclass Arborist extends Base {\n  constructor (options = {}) {\n    process.emit('time', 'arborist:ctor')\n    super(options)\n    this.options = {\n      nodeVersion: process.version,\n      ...options,\n      path: options.path || '.',\n      cache: options.cache || `${homedir()}/.npm/_cacache`,\n      packumentCache: options.packumentCache || new Map(),\n      log: options.log || procLog,\n    }\n    if (options.saveType && !saveTypeMap.get(options.saveType)) {\n      throw new Error(`Invalid saveType ${options.saveType}`)\n    }\n    this.cache = resolve(this.options.cache)\n    this.path = resolve(this.options.path)\n    process.emit('timeEnd', 'arborist:ctor')\n  }\n\n  // returns an array of the actual nodes for all the workspaces\n  workspaceNodes (tree, workspaces) {\n    return getWorkspaceNodes(tree, workspaces, this.log)\n  }\n\n  // returns a set of workspace nodes and all their deps\n  workspaceDependencySet (tree, workspaces) {\n    const wsNodes = this.workspaceNodes(tree, workspaces)\n    const set = new Set(wsNodes)\n    const extraneous = new Set()\n    for (const node of set) {\n      for (const edge of node.edgesOut.values()) {\n        const dep = edge.to\n        if (dep) {\n          set.add(dep)\n          if (dep.isLink) {\n            set.add(dep.target)\n          }\n        }\n      }\n      for (const child of node.children.values()) {\n        if (child.extraneous) {\n          extraneous.add(child)\n        }\n      }\n    }\n    for (const extra of extraneous) {\n      set.add(extra)\n    }\n    return set\n  }\n}\n\nmodule.exports = Arborist\n"]},"metadata":{},"sourceType":"script"}