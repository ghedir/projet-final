{"ast":null,"code":"const reifyOutput = require('./reify-output.js');\n\nconst ini = require('ini');\n\nconst util = require('util');\n\nconst fs = require('fs');\n\nconst {\n  writeFile\n} = fs.promises || {\n  writeFile: util.promisify(fs.writeFile)\n};\n\nconst {\n  resolve\n} = require('path');\n\nconst reifyFinish = async (npm, arb) => {\n  await saveBuiltinConfig(npm, arb);\n  reifyOutput(npm, arb);\n};\n\nconst saveBuiltinConfig = async (npm, arb) => {\n  const {\n    options: {\n      global\n    },\n    actualTree\n  } = arb;\n  if (!global) return; // if we are using a builtin config, and just installed npm as\n  // a top-level global package, we have to preserve that config.\n\n  const npmNode = actualTree.inventory.get('node_modules/npm');\n  if (!npmNode) return;\n  const builtinConf = npm.config.data.get('builtin');\n  if (builtinConf.loadError) return;\n  const content = ini.stringify(builtinConf.raw).trim() + '\\n';\n  await writeFile(resolve(npmNode.path, 'npmrc'), content);\n};\n\nmodule.exports = reifyFinish;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/reify-finish.js"],"names":["reifyOutput","require","ini","util","fs","writeFile","promises","promisify","resolve","reifyFinish","npm","arb","saveBuiltinConfig","options","global","actualTree","npmNode","inventory","get","builtinConf","config","data","loadError","content","stringify","raw","trim","path","module","exports"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAgBD,EAAE,CAACE,QAAH,IAAe;AAAED,EAAAA,SAAS,EAAEF,IAAI,CAACI,SAAL,CAAeH,EAAE,CAACC,SAAlB;AAAb,CAArC;;AACA,MAAM;AAACG,EAAAA;AAAD,IAAYP,OAAO,CAAC,MAAD,CAAzB;;AAEA,MAAMQ,WAAW,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACtC,QAAMC,iBAAiB,CAACF,GAAD,EAAMC,GAAN,CAAvB;AACAX,EAAAA,WAAW,CAACU,GAAD,EAAMC,GAAN,CAAX;AACD,CAHD;;AAKA,MAAMC,iBAAiB,GAAG,OAAOF,GAAP,EAAYC,GAAZ,KAAoB;AAC5C,QAAM;AAAEE,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF,KAAX;AAAuBC,IAAAA;AAAvB,MAAsCJ,GAA5C;AACA,MAAI,CAACG,MAAL,EACE,OAH0C,CAK5C;AACA;;AACA,QAAME,OAAO,GAAGD,UAAU,CAACE,SAAX,CAAqBC,GAArB,CAAyB,kBAAzB,CAAhB;AACA,MAAI,CAACF,OAAL,EACE;AAEF,QAAMG,WAAW,GAAGT,GAAG,CAACU,MAAJ,CAAWC,IAAX,CAAgBH,GAAhB,CAAoB,SAApB,CAApB;AACA,MAAIC,WAAW,CAACG,SAAhB,EACE;AAEF,QAAMC,OAAO,GAAGrB,GAAG,CAACsB,SAAJ,CAAcL,WAAW,CAACM,GAA1B,EAA+BC,IAA/B,KAAwC,IAAxD;AACA,QAAMrB,SAAS,CAACG,OAAO,CAACQ,OAAO,CAACW,IAAT,EAAe,OAAf,CAAR,EAAiCJ,OAAjC,CAAf;AACD,CAjBD;;AAmBAK,MAAM,CAACC,OAAP,GAAiBpB,WAAjB","sourcesContent":["const reifyOutput = require('./reify-output.js')\nconst ini = require('ini')\nconst util = require('util')\nconst fs = require('fs')\nconst { writeFile } = fs.promises || { writeFile: util.promisify(fs.writeFile) }\nconst {resolve} = require('path')\n\nconst reifyFinish = async (npm, arb) => {\n  await saveBuiltinConfig(npm, arb)\n  reifyOutput(npm, arb)\n}\n\nconst saveBuiltinConfig = async (npm, arb) => {\n  const { options: { global }, actualTree } = arb\n  if (!global)\n    return\n\n  // if we are using a builtin config, and just installed npm as\n  // a top-level global package, we have to preserve that config.\n  const npmNode = actualTree.inventory.get('node_modules/npm')\n  if (!npmNode)\n    return\n\n  const builtinConf = npm.config.data.get('builtin')\n  if (builtinConf.loadError)\n    return\n\n  const content = ini.stringify(builtinConf.raw).trim() + '\\n'\n  await writeFile(resolve(npmNode.path, 'npmrc'), content)\n}\n\nmodule.exports = reifyFinish\n"]},"metadata":{},"sourceType":"script"}