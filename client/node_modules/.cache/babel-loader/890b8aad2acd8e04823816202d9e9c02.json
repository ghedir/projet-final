{"ast":null,"code":"const linkBins = require('./lib/link-bins.js');\n\nconst linkMans = require('./lib/link-mans.js');\n\nconst binLinks = opts => {\n  const {\n    path,\n    pkg,\n    force,\n    global,\n    top\n  } = opts; // global top pkgs on windows get bins installed in {prefix}, and no mans\n  //\n  // unix global top pkgs get their bins installed in {prefix}/bin,\n  // and mans in {prefix}/share/man\n  //\n  // non-top pkgs get their bins installed in {prefix}/node_modules/.bin,\n  // and do not install mans\n  //\n  // non-global top pkgs don't have any bins or mans linked.  From here on\n  // out, if it's top, we know that it's global, so no need to pass that\n  // option further down the stack.\n\n  if (top && !global) return Promise.resolve();\n  return Promise.all([// allow clobbering within the local node_modules/.bin folder.\n  // only global bins are protected in this way, or else it is\n  // yet another vector for excessive dependency conflicts.\n  linkBins({\n    path,\n    pkg,\n    top,\n    force: force || !top\n  }), linkMans({\n    path,\n    pkg,\n    top,\n    force\n  })]);\n};\n\nconst shimBin = require('./lib/shim-bin.js');\n\nconst linkGently = require('./lib/link-gently.js');\n\nconst resetSeen = () => {\n  shimBin.resetSeen();\n  linkGently.resetSeen();\n};\n\nconst checkBins = require('./lib/check-bins.js');\n\nconst getPaths = require('./lib/get-paths.js');\n\nmodule.exports = Object.assign(binLinks, {\n  checkBins,\n  resetSeen,\n  getPaths\n});","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/bin-links/index.js"],"names":["linkBins","require","linkMans","binLinks","opts","path","pkg","force","global","top","Promise","resolve","all","shimBin","linkGently","resetSeen","checkBins","getPaths","module","exports","Object","assign"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;;AAEA,MAAME,QAAQ,GAAGC,IAAI,IAAI;AACvB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,GAAR;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA;AAA5B,MAAoCL,IAA1C,CADuB,CAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIK,GAAG,IAAI,CAACD,MAAZ,EACE,OAAOE,OAAO,CAACC,OAAR,EAAP;AAEF,SAAOD,OAAO,CAACE,GAAR,CAAY,CACjB;AACA;AACA;AACAZ,EAAAA,QAAQ,CAAC;AAACK,IAAAA,IAAD;AAAOC,IAAAA,GAAP;AAAYG,IAAAA,GAAZ;AAAiBF,IAAAA,KAAK,EAAEA,KAAK,IAAI,CAACE;AAAlC,GAAD,CAJS,EAKjBP,QAAQ,CAAC;AAACG,IAAAA,IAAD;AAAOC,IAAAA,GAAP;AAAYG,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAD,CALS,CAAZ,CAAP;AAOD,CAvBD;;AAyBA,MAAMM,OAAO,GAAGZ,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMa,UAAU,GAAGb,OAAO,CAAC,sBAAD,CAA1B;;AACA,MAAMc,SAAS,GAAG,MAAM;AACtBF,EAAAA,OAAO,CAACE,SAAR;AACAD,EAAAA,UAAU,CAACC,SAAX;AACD,CAHD;;AAKA,MAAMC,SAAS,GAAGf,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMgB,QAAQ,GAAGhB,OAAO,CAAC,oBAAD,CAAxB;;AAEAiB,MAAM,CAACC,OAAP,GAAiBC,MAAM,CAACC,MAAP,CAAclB,QAAd,EAAwB;AACvCa,EAAAA,SADuC;AAEvCD,EAAAA,SAFuC;AAGvCE,EAAAA;AAHuC,CAAxB,CAAjB","sourcesContent":["const linkBins = require('./lib/link-bins.js')\nconst linkMans = require('./lib/link-mans.js')\n\nconst binLinks = opts => {\n  const { path, pkg, force, global, top } = opts\n  // global top pkgs on windows get bins installed in {prefix}, and no mans\n  //\n  // unix global top pkgs get their bins installed in {prefix}/bin,\n  // and mans in {prefix}/share/man\n  //\n  // non-top pkgs get their bins installed in {prefix}/node_modules/.bin,\n  // and do not install mans\n  //\n  // non-global top pkgs don't have any bins or mans linked.  From here on\n  // out, if it's top, we know that it's global, so no need to pass that\n  // option further down the stack.\n  if (top && !global)\n    return Promise.resolve()\n\n  return Promise.all([\n    // allow clobbering within the local node_modules/.bin folder.\n    // only global bins are protected in this way, or else it is\n    // yet another vector for excessive dependency conflicts.\n    linkBins({path, pkg, top, force: force || !top}),\n    linkMans({path, pkg, top, force}),\n  ])\n}\n\nconst shimBin = require('./lib/shim-bin.js')\nconst linkGently = require('./lib/link-gently.js')\nconst resetSeen = () => {\n  shimBin.resetSeen()\n  linkGently.resetSeen()\n}\n\nconst checkBins = require('./lib/check-bins.js')\nconst getPaths = require('./lib/get-paths.js')\n\nmodule.exports = Object.assign(binLinks, {\n  checkBins,\n  resetSeen,\n  getPaths,\n})\n"]},"metadata":{},"sourceType":"script"}