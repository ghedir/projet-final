{"ast":null,"code":"const {\n  resolve,\n  basename\n} = require('path');\n\nconst util = require('util');\n\nconst fs = require('fs');\n\nconst {\n  unlink\n} = fs.promises || {\n  unlink: util.promisify(fs.unlink)\n};\n\nconst Arborist = require('@npmcli/arborist');\n\nconst log = require('npmlog');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Shrinkwrap extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Lock down dependency versions for publication';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'shrinkwrap';\n  }\n\n  exec(args, cb) {\n    this.shrinkwrap().then(() => cb()).catch(cb);\n  }\n\n  async shrinkwrap() {\n    // if has a npm-shrinkwrap.json, nothing to do\n    // if has a package-lock.json, rename to npm-shrinkwrap.json\n    // if has neither, load the actual tree and save that as npm-shrinkwrap.json\n    // in all cases, re-cast to current lockfile version\n    //\n    // loadVirtual, fall back to loadActual\n    // rename shrinkwrap file type, and tree.meta.save()\n    if (this.npm.config.get('global')) {\n      const er = new Error('`npm shrinkwrap` does not work for global packages');\n      er.code = 'ESHRINKWRAPGLOBAL';\n      throw er;\n    }\n\n    const path = this.npm.prefix;\n    const sw = resolve(path, 'npm-shrinkwrap.json');\n    const arb = new Arborist({ ...this.npm.flatOptions,\n      path\n    });\n    const tree = await arb.loadVirtual().catch(() => arb.loadActual());\n    const {\n      meta\n    } = tree;\n    const newFile = meta.hiddenLockfile || !meta.loadedFromDisk;\n    const oldFilename = meta.filename;\n    const notSW = !newFile && basename(oldFilename) !== 'npm-shrinkwrap.json';\n    meta.hiddenLockfile = false;\n    meta.filename = sw;\n    await meta.save();\n    if (newFile) log.notice('', 'created a lockfile as npm-shrinkwrap.json');else if (notSW) {\n      await unlink(oldFilename);\n      log.notice('', 'package-lock.json has been renamed to npm-shrinkwrap.json');\n    } else if (meta.originalLockfileVersion !== this.npm.lockfileVersion) log.notice('', `npm-shrinkwrap.json updated to version ${this.npm.lockfileVersion}`);else log.notice('', 'npm-shrinkwrap.json up to date');\n  }\n\n}\n\nmodule.exports = Shrinkwrap;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/shrinkwrap.js"],"names":["resolve","basename","require","util","fs","unlink","promises","promisify","Arborist","log","BaseCommand","Shrinkwrap","description","name","exec","args","cb","shrinkwrap","then","catch","npm","config","get","er","Error","code","path","prefix","sw","arb","flatOptions","tree","loadVirtual","loadActual","meta","newFile","hiddenLockfile","loadedFromDisk","oldFilename","filename","notSW","save","notice","originalLockfileVersion","lockfileVersion","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAwBC,OAAO,CAAC,MAAD,CAArC;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAaD,EAAE,CAACE,QAAH,IAAe;AAAED,EAAAA,MAAM,EAAEF,IAAI,CAACI,SAAL,CAAeH,EAAE,CAACC,MAAlB;AAAV,CAAlC;;AACA,MAAMG,QAAQ,GAAGN,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAMO,GAAG,GAAGP,OAAO,CAAC,QAAD,CAAnB;;AAEA,MAAMQ,WAAW,GAAGR,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAMS,UAAN,SAAyBD,WAAzB,CAAqC;AACnC;AACsB,aAAXE,WAAW,GAAI;AACxB,WAAO,+CAAP;AACD;AAED;;;AACe,aAAJC,IAAI,GAAI;AACjB,WAAO,YAAP;AACD;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,UAAL,GAAkBC,IAAlB,CAAuB,MAAMF,EAAE,EAA/B,EAAmCG,KAAnC,CAAyCH,EAAzC;AACD;;AAEe,QAAVC,UAAU,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,KAAKG,GAAL,CAASC,MAAT,CAAgBC,GAAhB,CAAoB,QAApB,CAAJ,EAAmC;AACjC,YAAMC,EAAE,GAAG,IAAIC,KAAJ,CAAU,oDAAV,CAAX;AACAD,MAAAA,EAAE,CAACE,IAAH,GAAU,mBAAV;AACA,YAAMF,EAAN;AACD;;AAED,UAAMG,IAAI,GAAG,KAAKN,GAAL,CAASO,MAAtB;AACA,UAAMC,EAAE,GAAG5B,OAAO,CAAC0B,IAAD,EAAO,qBAAP,CAAlB;AACA,UAAMG,GAAG,GAAG,IAAIrB,QAAJ,CAAa,EAAE,GAAG,KAAKY,GAAL,CAASU,WAAd;AAA2BJ,MAAAA;AAA3B,KAAb,CAAZ;AACA,UAAMK,IAAI,GAAG,MAAMF,GAAG,CAACG,WAAJ,GAAkBb,KAAlB,CAAwB,MAAMU,GAAG,CAACI,UAAJ,EAA9B,CAAnB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAWH,IAAjB;AACA,UAAMI,OAAO,GAAGD,IAAI,CAACE,cAAL,IAAuB,CAACF,IAAI,CAACG,cAA7C;AACA,UAAMC,WAAW,GAAGJ,IAAI,CAACK,QAAzB;AACA,UAAMC,KAAK,GAAG,CAACL,OAAD,IAAYlC,QAAQ,CAACqC,WAAD,CAAR,KAA0B,qBAApD;AAEAJ,IAAAA,IAAI,CAACE,cAAL,GAAsB,KAAtB;AACAF,IAAAA,IAAI,CAACK,QAAL,GAAgBX,EAAhB;AACA,UAAMM,IAAI,CAACO,IAAL,EAAN;AAEA,QAAIN,OAAJ,EACE1B,GAAG,CAACiC,MAAJ,CAAW,EAAX,EAAe,2CAAf,EADF,KAEK,IAAIF,KAAJ,EAAW;AACd,YAAMnC,MAAM,CAACiC,WAAD,CAAZ;AACA7B,MAAAA,GAAG,CAACiC,MAAJ,CAAW,EAAX,EAAe,2DAAf;AACD,KAHI,MAGE,IAAIR,IAAI,CAACS,uBAAL,KAAiC,KAAKvB,GAAL,CAASwB,eAA9C,EACLnC,GAAG,CAACiC,MAAJ,CAAW,EAAX,EAAgB,0CAAyC,KAAKtB,GAAL,CAASwB,eAAgB,EAAlF,EADK,KAGLnC,GAAG,CAACiC,MAAJ,CAAW,EAAX,EAAe,gCAAf;AACH;;AAnDkC;;AAqDrCG,MAAM,CAACC,OAAP,GAAiBnC,UAAjB","sourcesContent":["const { resolve, basename } = require('path')\nconst util = require('util')\nconst fs = require('fs')\nconst { unlink } = fs.promises || { unlink: util.promisify(fs.unlink) }\nconst Arborist = require('@npmcli/arborist')\nconst log = require('npmlog')\n\nconst BaseCommand = require('./base-command.js')\nclass Shrinkwrap extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Lock down dependency versions for publication'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'shrinkwrap'\n  }\n\n  exec (args, cb) {\n    this.shrinkwrap().then(() => cb()).catch(cb)\n  }\n\n  async shrinkwrap () {\n    // if has a npm-shrinkwrap.json, nothing to do\n    // if has a package-lock.json, rename to npm-shrinkwrap.json\n    // if has neither, load the actual tree and save that as npm-shrinkwrap.json\n    // in all cases, re-cast to current lockfile version\n    //\n    // loadVirtual, fall back to loadActual\n    // rename shrinkwrap file type, and tree.meta.save()\n    if (this.npm.config.get('global')) {\n      const er = new Error('`npm shrinkwrap` does not work for global packages')\n      er.code = 'ESHRINKWRAPGLOBAL'\n      throw er\n    }\n\n    const path = this.npm.prefix\n    const sw = resolve(path, 'npm-shrinkwrap.json')\n    const arb = new Arborist({ ...this.npm.flatOptions, path })\n    const tree = await arb.loadVirtual().catch(() => arb.loadActual())\n    const { meta } = tree\n    const newFile = meta.hiddenLockfile || !meta.loadedFromDisk\n    const oldFilename = meta.filename\n    const notSW = !newFile && basename(oldFilename) !== 'npm-shrinkwrap.json'\n\n    meta.hiddenLockfile = false\n    meta.filename = sw\n    await meta.save()\n\n    if (newFile)\n      log.notice('', 'created a lockfile as npm-shrinkwrap.json')\n    else if (notSW) {\n      await unlink(oldFilename)\n      log.notice('', 'package-lock.json has been renamed to npm-shrinkwrap.json')\n    } else if (meta.originalLockfileVersion !== this.npm.lockfileVersion)\n      log.notice('', `npm-shrinkwrap.json updated to version ${this.npm.lockfileVersion}`)\n    else\n      log.notice('', 'npm-shrinkwrap.json up to date')\n  }\n}\nmodule.exports = Shrinkwrap\n"]},"metadata":{},"sourceType":"script"}