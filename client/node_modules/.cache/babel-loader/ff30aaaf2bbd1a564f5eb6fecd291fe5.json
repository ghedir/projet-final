{"ast":null,"code":"const {\n  delimiter\n} = require('path');\n\nconst chalk = require('chalk');\n\nconst ciDetect = require('@npmcli/ci-detect');\n\nconst runScript = require('@npmcli/run-script');\n\nconst readPackageJson = require('read-package-json-fast');\n\nconst noTTY = require('./no-tty.js');\n\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s\n};\n\nconst run = async ({\n  args,\n  call,\n  color,\n  flatOptions,\n  locationMsg,\n  log,\n  output = () => {},\n  path,\n  pathArr,\n  runPath,\n  scriptShell\n}) => {\n  // turn list of args into command string\n  const script = call || args.shift() || scriptShell;\n  const colorize = color ? chalk : nocolor; // do the fakey runScript dance\n  // still should work if no package.json in cwd\n\n  const realPkg = await readPackageJson(`${path}/package.json`).catch(() => ({}));\n  const pkg = { ...realPkg,\n    scripts: { ...(realPkg.scripts || {}),\n      npx: script\n    }\n  };\n  if (log && log.disableProgress) log.disableProgress();\n\n  try {\n    if (script === scriptShell) {\n      const isTTY = !noTTY();\n\n      if (isTTY) {\n        if (ciDetect()) return log.warn('exec', 'Interactive mode disabled in CI environment');\n        locationMsg = locationMsg || ` at location:\\n${colorize.dim(runPath)}`;\n        output(`${colorize.reset('\\nEntering npm script environment')}${colorize.reset(locationMsg)}${colorize.bold('\\nType \\'exit\\' or ^D when finished\\n')}`);\n      }\n    }\n\n    return await runScript({ ...flatOptions,\n      pkg,\n      banner: false,\n      // we always run in cwd, not --prefix\n      path: runPath,\n      stdioString: true,\n      event: 'npx',\n      args,\n      env: {\n        PATH: pathArr.join(delimiter)\n      },\n      stdio: 'inherit'\n    });\n  } finally {\n    if (log && log.enableProgress) log.enableProgress();\n  }\n};\n\nmodule.exports = run;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/libnpmexec/lib/run-script.js"],"names":["delimiter","require","chalk","ciDetect","runScript","readPackageJson","noTTY","nocolor","reset","s","bold","dim","run","args","call","color","flatOptions","locationMsg","log","output","path","pathArr","runPath","scriptShell","script","shift","colorize","realPkg","catch","pkg","scripts","npx","disableProgress","isTTY","warn","banner","stdioString","event","env","PATH","join","stdio","enableProgress","module","exports"],"mappings":"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","sourcesContent":["const { delimiter } = require('path')\n\nconst chalk = require('chalk')\nconst ciDetect = require('@npmcli/ci-detect')\nconst runScript = require('@npmcli/run-script')\nconst readPackageJson = require('read-package-json-fast')\nconst noTTY = require('./no-tty.js')\n\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s,\n}\n\nconst run = async ({\n  args,\n  call,\n  color,\n  flatOptions,\n  locationMsg,\n  log,\n  output = () => {},\n  path,\n  pathArr,\n  runPath,\n  scriptShell,\n}) => {\n  // turn list of args into command string\n  const script = call || args.shift() || scriptShell\n  const colorize = color ? chalk : nocolor\n\n  // do the fakey runScript dance\n  // still should work if no package.json in cwd\n  const realPkg = await readPackageJson(`${path}/package.json`)\n    .catch(() => ({}))\n  const pkg = {\n    ...realPkg,\n    scripts: {\n      ...(realPkg.scripts || {}),\n      npx: script,\n    },\n  }\n\n  if (log && log.disableProgress)\n    log.disableProgress()\n\n  try {\n    if (script === scriptShell) {\n      const isTTY = !noTTY()\n\n      if (isTTY) {\n        if (ciDetect())\n          return log.warn('exec', 'Interactive mode disabled in CI environment')\n\n        locationMsg = locationMsg || ` at location:\\n${colorize.dim(runPath)}`\n\n        output(`${\n          colorize.reset('\\nEntering npm script environment')\n        }${\n          colorize.reset(locationMsg)\n        }${\n          colorize.bold('\\nType \\'exit\\' or ^D when finished\\n')\n        }`)\n      }\n    }\n    return await runScript({\n      ...flatOptions,\n      pkg,\n      banner: false,\n      // we always run in cwd, not --prefix\n      path: runPath,\n      stdioString: true,\n      event: 'npx',\n      args,\n      env: {\n        PATH: pathArr.join(delimiter),\n      },\n      stdio: 'inherit',\n    })\n  } finally {\n    if (log && log.enableProgress)\n      log.enableProgress()\n  }\n}\n\nmodule.exports = run\n"]},"metadata":{},"sourceType":"script"}