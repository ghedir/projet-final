{"ast":null,"code":"// write the json back, preserving the line breaks and indent\nconst {\n  promisify\n} = require('util');\n\nconst writeFile = promisify(require('fs').writeFile);\nconst kIndent = Symbol.for('indent');\nconst kNewline = Symbol.for('newline');\n\nmodule.exports = async (path, pkg) => {\n  const {\n    [kIndent]: indent = 2,\n    [kNewline]: newline = '\\n'\n  } = pkg;\n  delete pkg._id;\n  const raw = JSON.stringify(pkg, null, indent) + '\\n';\n  const data = newline === '\\n' ? raw : raw.split('\\n').join(newline);\n  return writeFile(path, data);\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/libnpmversion/lib/write-json.js"],"names":["promisify","require","writeFile","kIndent","Symbol","for","kNewline","module","exports","path","pkg","indent","newline","_id","raw","JSON","stringify","data","split","join"],"mappings":"AAAA;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,MAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGF,SAAS,CAACC,OAAO,CAAC,IAAD,CAAP,CAAcC,SAAf,CAA3B;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,GAAP,CAAW,QAAX,CAAhB;AACA,MAAMC,QAAQ,GAAGF,MAAM,CAACC,GAAP,CAAW,SAAX,CAAjB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,OAAOC,IAAP,EAAaC,GAAb,KAAqB;AACpC,QAAM;AACJ,KAACP,OAAD,GAAWQ,MAAM,GAAG,CADhB;AAEJ,KAACL,QAAD,GAAYM,OAAO,GAAG;AAFlB,MAGFF,GAHJ;AAIA,SAAOA,GAAG,CAACG,GAAX;AACA,QAAMC,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeN,GAAf,EAAoB,IAApB,EAA0BC,MAA1B,IAAoC,IAAhD;AACA,QAAMM,IAAI,GAAGL,OAAO,KAAK,IAAZ,GAAmBE,GAAnB,GAAyBA,GAAG,CAACI,KAAJ,CAAU,IAAV,EAAgBC,IAAhB,CAAqBP,OAArB,CAAtC;AACA,SAAOV,SAAS,CAACO,IAAD,EAAOQ,IAAP,CAAhB;AACD,CATD","sourcesContent":["// write the json back, preserving the line breaks and indent\nconst { promisify } = require('util')\nconst writeFile = promisify(require('fs').writeFile)\nconst kIndent = Symbol.for('indent')\nconst kNewline = Symbol.for('newline')\n\nmodule.exports = async (path, pkg) => {\n  const {\n    [kIndent]: indent = 2,\n    [kNewline]: newline = '\\n'\n  } = pkg\n  delete pkg._id\n  const raw = JSON.stringify(pkg, null, indent) + '\\n'\n  const data = newline === '\\n' ? raw : raw.split('\\n').join(newline)\n  return writeFile(path, data)\n}\n"]},"metadata":{},"sourceType":"script"}