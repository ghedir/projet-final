{"ast":null,"code":"'use strict';\n\nconst eu = encodeURIComponent;\n\nconst npmFetch = require('npm-registry-fetch');\n\nconst validate = require('aproba');\n\nconst cmd = module.exports;\n\ncmd.create = (entity, opts = {}) => {\n  return Promise.resolve().then(() => {\n    const {\n      scope,\n      team\n    } = splitEntity(entity);\n    validate('SSO', [scope, team, opts]);\n    const uri = `/-/org/${eu(scope)}/team`;\n    return npmFetch.json(uri, { ...opts,\n      method: 'PUT',\n      scope,\n      body: {\n        name: team,\n        description: opts.description\n      }\n    });\n  });\n};\n\ncmd.destroy = (entity, opts = {}) => {\n  const {\n    scope,\n    team\n  } = splitEntity(entity);\n  validate('SSO', [scope, team, opts]);\n  const uri = `/-/team/${eu(scope)}/${eu(team)}`;\n  return npmFetch.json(uri, { ...opts,\n    method: 'DELETE',\n    scope\n  });\n};\n\ncmd.add = (user, entity, opts = {}) => {\n  const {\n    scope,\n    team\n  } = splitEntity(entity);\n  validate('SSO', [scope, team, opts]);\n  const uri = `/-/team/${eu(scope)}/${eu(team)}/user`;\n  return npmFetch.json(uri, { ...opts,\n    method: 'PUT',\n    scope,\n    body: {\n      user\n    }\n  });\n};\n\ncmd.rm = (user, entity, opts = {}) => {\n  const {\n    scope,\n    team\n  } = splitEntity(entity);\n  validate('SSO', [scope, team, opts]);\n  const uri = `/-/team/${eu(scope)}/${eu(team)}/user`;\n  return npmFetch.json(uri, { ...opts,\n    method: 'DELETE',\n    scope,\n    body: {\n      user\n    }\n  });\n};\n\ncmd.lsTeams = (...args) => cmd.lsTeams.stream(...args).collect();\n\ncmd.lsTeams.stream = (scope, opts = {}) => {\n  validate('SO', [scope, opts]);\n  const uri = `/-/org/${eu(scope)}/team`;\n  return npmFetch.json.stream(uri, '.*', { ...opts,\n    query: {\n      format: 'cli'\n    }\n  });\n};\n\ncmd.lsUsers = (...args) => cmd.lsUsers.stream(...args).collect();\n\ncmd.lsUsers.stream = (entity, opts = {}) => {\n  const {\n    scope,\n    team\n  } = splitEntity(entity);\n  validate('SSO', [scope, team, opts]);\n  const uri = `/-/team/${eu(scope)}/${eu(team)}/user`;\n  return npmFetch.json.stream(uri, '.*', { ...opts,\n    query: {\n      format: 'cli'\n    }\n  });\n};\n\ncmd.edit = () => {\n  throw new Error('edit is not implemented yet');\n};\n\nfunction splitEntity(entity = '') {\n  const [, scope, team] = entity.match(/^@?([^:]+):(.*)$/) || [];\n  return {\n    scope,\n    team\n  };\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/libnpmteam/index.js"],"names":["eu","encodeURIComponent","npmFetch","require","validate","cmd","module","exports","create","entity","opts","Promise","resolve","then","scope","team","splitEntity","uri","json","method","body","name","description","destroy","add","user","rm","lsTeams","args","stream","collect","query","format","lsUsers","edit","Error","match"],"mappings":"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","sourcesContent":["'use strict'\n\nconst eu = encodeURIComponent\nconst npmFetch = require('npm-registry-fetch')\nconst validate = require('aproba')\n\nconst cmd = module.exports\n\ncmd.create = (entity, opts = {}) => {\n  return Promise.resolve().then(() => {\n    const { scope, team } = splitEntity(entity)\n    validate('SSO', [scope, team, opts])\n    const uri = `/-/org/${eu(scope)}/team`\n    return npmFetch.json(uri, {\n      ...opts,\n      method: 'PUT',\n      scope,\n      body: { name: team, description: opts.description }\n    })\n  })\n}\n\ncmd.destroy = (entity, opts = {}) => {\n  const { scope, team } = splitEntity(entity)\n  validate('SSO', [scope, team, opts])\n  const uri = `/-/team/${eu(scope)}/${eu(team)}`\n  return npmFetch.json(uri, {\n    ...opts,\n    method: 'DELETE',\n    scope\n  })\n}\n\ncmd.add = (user, entity, opts = {}) => {\n  const { scope, team } = splitEntity(entity)\n  validate('SSO', [scope, team, opts])\n  const uri = `/-/team/${eu(scope)}/${eu(team)}/user`\n  return npmFetch.json(uri, {\n    ...opts,\n    method: 'PUT',\n    scope,\n    body: { user }\n  })\n}\n\ncmd.rm = (user, entity, opts = {}) => {\n  const { scope, team } = splitEntity(entity)\n  validate('SSO', [scope, team, opts])\n  const uri = `/-/team/${eu(scope)}/${eu(team)}/user`\n  return npmFetch.json(uri, {\n    ...opts,\n    method: 'DELETE',\n    scope,\n    body: { user }\n  })\n}\n\ncmd.lsTeams = (...args) => cmd.lsTeams.stream(...args).collect()\n\ncmd.lsTeams.stream = (scope, opts = {}) => {\n  validate('SO', [scope, opts])\n  const uri = `/-/org/${eu(scope)}/team`\n  return npmFetch.json.stream(uri, '.*', {\n    ...opts,\n    query: { format: 'cli' }\n  })\n}\n\ncmd.lsUsers = (...args) => cmd.lsUsers.stream(...args).collect()\n\ncmd.lsUsers.stream = (entity, opts = {}) => {\n  const { scope, team } = splitEntity(entity)\n  validate('SSO', [scope, team, opts])\n  const uri = `/-/team/${eu(scope)}/${eu(team)}/user`\n  return npmFetch.json.stream(uri, '.*', {\n    ...opts,\n    query: { format: 'cli' }\n  })\n}\n\ncmd.edit = () => {\n  throw new Error('edit is not implemented yet')\n}\n\nfunction splitEntity (entity = '') {\n  const [, scope, team] = entity.match(/^@?([^:]+):(.*)$/) || []\n  return { scope, team }\n}\n"]},"metadata":{},"sourceType":"script"}