{"ast":null,"code":"class Umask {}\n\nconst parse = val => {\n  if (typeof val === 'string') {\n    if (/^0o?[0-7]+$/.test(val)) return parseInt(val.replace(/^0o?/, ''), 8);else if (/^[1-9][0-9]*$/.test(val)) return parseInt(val, 10);else throw new Error(`invalid umask value: ${val}`);\n  }\n\n  if (typeof val !== 'number') throw new Error(`invalid umask value: ${val}`);\n  val = Math.floor(val);\n  if (val < 0 || val > 511) throw new Error(`invalid umask value: ${val}`);\n  return val;\n};\n\nconst validate = (data, k, val) => {\n  try {\n    data[k] = parse(val);\n    return true;\n  } catch (er) {\n    return false;\n  }\n};\n\nmodule.exports = {\n  Umask,\n  parse,\n  validate\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/config/lib/umask.js"],"names":["Umask","parse","val","test","parseInt","replace","Error","Math","floor","validate","data","k","er","module","exports"],"mappings":"AAAA,MAAMA,KAAN,CAAY;;AACZ,MAAMC,KAAK,GAAGC,GAAG,IAAI;AACnB,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,QAAI,cAAcC,IAAd,CAAmBD,GAAnB,CAAJ,EACE,OAAOE,QAAQ,CAACF,GAAG,CAACG,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAD,EAA0B,CAA1B,CAAf,CADF,KAEK,IAAI,gBAAgBF,IAAhB,CAAqBD,GAArB,CAAJ,EACH,OAAOE,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAf,CADG,KAGH,MAAM,IAAII,KAAJ,CAAW,wBAAuBJ,GAAI,EAAtC,CAAN;AACH;;AACD,MAAI,OAAOA,GAAP,KAAe,QAAnB,EACE,MAAM,IAAII,KAAJ,CAAW,wBAAuBJ,GAAI,EAAtC,CAAN;AACFA,EAAAA,GAAG,GAAGK,IAAI,CAACC,KAAL,CAAWN,GAAX,CAAN;AACA,MAAIA,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAG,GAArB,EACE,MAAM,IAAII,KAAJ,CAAW,wBAAuBJ,GAAI,EAAtC,CAAN;AACF,SAAOA,GAAP;AACD,CAfD;;AAiBA,MAAMO,QAAQ,GAAG,CAACC,IAAD,EAAOC,CAAP,EAAUT,GAAV,KAAkB;AACjC,MAAI;AACFQ,IAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUV,KAAK,CAACC,GAAD,CAAf;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOU,EAAP,EAAW;AACX,WAAO,KAAP;AACD;AACF,CAPD;;AASAC,MAAM,CAACC,OAAP,GAAiB;AAAEd,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBQ,EAAAA;AAAhB,CAAjB","sourcesContent":["class Umask {}\nconst parse = val => {\n  if (typeof val === 'string') {\n    if (/^0o?[0-7]+$/.test(val))\n      return parseInt(val.replace(/^0o?/, ''), 8)\n    else if (/^[1-9][0-9]*$/.test(val))\n      return parseInt(val, 10)\n    else\n      throw new Error(`invalid umask value: ${val}`)\n  }\n  if (typeof val !== 'number')\n    throw new Error(`invalid umask value: ${val}`)\n  val = Math.floor(val)\n  if (val < 0 || val > 511)\n    throw new Error(`invalid umask value: ${val}`)\n  return val\n}\n\nconst validate = (data, k, val) => {\n  try {\n    data[k] = parse(val)\n    return true\n  } catch (er) {\n    return false\n  }\n}\n\nmodule.exports = { Umask, parse, validate }\n"]},"metadata":{},"sourceType":"script"}