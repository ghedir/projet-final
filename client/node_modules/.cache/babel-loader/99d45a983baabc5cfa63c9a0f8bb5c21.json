{"ast":null,"code":"const fetch = require('npm-registry-fetch');\n\nconst otplease = require('./utils/otplease.js');\n\nconst npa = require('npm-package-arg');\n\nconst semver = require('semver');\n\nconst getIdentity = require('./utils/get-identity.js');\n\nconst libaccess = require('libnpmaccess');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Deprecate extends BaseCommand {\n  static get description() {\n    return 'Deprecate a version of a package';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'deprecate';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['<pkg>[@<version>] <message>'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['registry', 'otp'];\n  }\n\n  async completion(opts) {\n    if (opts.conf.argv.remain.length > 1) return [];\n    const username = await getIdentity(this.npm, this.npm.flatOptions);\n    const packages = await libaccess.lsPackages(username, this.npm.flatOptions);\n    return Object.keys(packages).filter(name => packages[name] === 'write' && (opts.conf.argv.remain.length === 0 || name.startsWith(opts.conf.argv.remain[0])));\n  }\n\n  exec(args, cb) {\n    this.deprecate(args).then(() => cb()).catch(err => cb(err.code === 'EUSAGE' ? err.message : err));\n  }\n\n  async deprecate([pkg, msg]) {\n    // msg == null because '' is a valid value, it indicates undeprecate\n    if (!pkg || msg == null) throw this.usageError(); // fetch the data and make sure it exists.\n\n    const p = npa(pkg); // npa makes the default spec \"latest\", but for deprecation\n    // \"*\" is the appropriate default.\n\n    const spec = p.rawSpec === '' ? '*' : p.fetchSpec;\n    if (semver.validRange(spec, true) === null) throw new Error(`invalid version range: ${spec}`);\n    const uri = '/' + p.escapedName;\n    const packument = await fetch.json(uri, { ...this.npm.flatOptions,\n      spec: p,\n      query: {\n        write: true\n      }\n    });\n    Object.keys(packument.versions).filter(v => semver.satisfies(v, spec, {\n      includePrerelease: true\n    })).forEach(v => {\n      packument.versions[v].deprecated = msg;\n    });\n    return otplease(this.npm.flatOptions, opts => fetch(uri, { ...opts,\n      spec: p,\n      method: 'PUT',\n      body: packument,\n      ignoreBody: true\n    }));\n  }\n\n}\n\nmodule.exports = Deprecate;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/deprecate.js"],"names":["fetch","require","otplease","npa","semver","getIdentity","libaccess","BaseCommand","Deprecate","description","name","usage","params","completion","opts","conf","argv","remain","length","username","npm","flatOptions","packages","lsPackages","Object","keys","filter","startsWith","exec","args","cb","deprecate","then","catch","err","code","message","pkg","msg","usageError","p","spec","rawSpec","fetchSpec","validRange","Error","uri","escapedName","packument","json","query","write","versions","v","satisfies","includePrerelease","forEach","deprecated","method","body","ignoreBody","module","exports"],"mappings":"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","sourcesContent":["const fetch = require('npm-registry-fetch')\nconst otplease = require('./utils/otplease.js')\nconst npa = require('npm-package-arg')\nconst semver = require('semver')\nconst getIdentity = require('./utils/get-identity.js')\nconst libaccess = require('libnpmaccess')\nconst BaseCommand = require('./base-command.js')\n\nclass Deprecate extends BaseCommand {\n  static get description () {\n    return 'Deprecate a version of a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'deprecate'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<pkg>[@<version>] <message>']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'registry',\n      'otp',\n    ]\n  }\n\n  async completion (opts) {\n    if (opts.conf.argv.remain.length > 1)\n      return []\n\n    const username = await getIdentity(this.npm, this.npm.flatOptions)\n    const packages = await libaccess.lsPackages(username, this.npm.flatOptions)\n    return Object.keys(packages)\n      .filter((name) =>\n        packages[name] === 'write' &&\n        (opts.conf.argv.remain.length === 0 ||\n          name.startsWith(opts.conf.argv.remain[0])))\n  }\n\n  exec (args, cb) {\n    this.deprecate(args)\n      .then(() => cb())\n      .catch(err => cb(err.code === 'EUSAGE' ? err.message : err))\n  }\n\n  async deprecate ([pkg, msg]) {\n    // msg == null because '' is a valid value, it indicates undeprecate\n    if (!pkg || msg == null)\n      throw this.usageError()\n\n    // fetch the data and make sure it exists.\n    const p = npa(pkg)\n    // npa makes the default spec \"latest\", but for deprecation\n    // \"*\" is the appropriate default.\n    const spec = p.rawSpec === '' ? '*' : p.fetchSpec\n\n    if (semver.validRange(spec, true) === null)\n      throw new Error(`invalid version range: ${spec}`)\n\n    const uri = '/' + p.escapedName\n    const packument = await fetch.json(uri, {\n      ...this.npm.flatOptions,\n      spec: p,\n      query: { write: true },\n    })\n\n    Object.keys(packument.versions)\n      .filter(v => semver.satisfies(v, spec, { includePrerelease: true }))\n      .forEach(v => {\n        packument.versions[v].deprecated = msg\n      })\n\n    return otplease(this.npm.flatOptions, opts => fetch(uri, {\n      ...opts,\n      spec: p,\n      method: 'PUT',\n      body: packument,\n      ignoreBody: true,\n    }))\n  }\n}\n\nmodule.exports = Deprecate\n"]},"metadata":{},"sourceType":"script"}