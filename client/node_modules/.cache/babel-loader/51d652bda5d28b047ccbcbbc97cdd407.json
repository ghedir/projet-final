{"ast":null,"code":"const updateWorkspaces = ({\n  content,\n  originalContent = {}\n}) => {\n  const newWorkspaces = content.workspaces;\n  if (!newWorkspaces) return originalContent; // validate workspaces content being appended\n\n  const hasInvalidWorkspaces = () => newWorkspaces.some(w => !(typeof w === 'string'));\n\n  if (!newWorkspaces.length || hasInvalidWorkspaces()) {\n    throw Object.assign(new TypeError('workspaces should be an array of strings.'), {\n      code: 'EWORKSPACESINVALID'\n    });\n  }\n\n  return { ...originalContent,\n    workspaces: [...newWorkspaces]\n  };\n};\n\nmodule.exports = updateWorkspaces;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/package-json/lib/update-workspaces.js"],"names":["updateWorkspaces","content","originalContent","newWorkspaces","workspaces","hasInvalidWorkspaces","some","w","length","Object","assign","TypeError","code","module","exports"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,eAAe,GAAG;AAA7B,CAAD,KAAuC;AAC9D,QAAMC,aAAa,GAAGF,OAAO,CAACG,UAA9B;AAEA,MAAI,CAACD,aAAL,EACE,OAAOD,eAAP,CAJ4D,CAM9D;;AACA,QAAMG,oBAAoB,GAAG,MAC3BF,aAAa,CAACG,IAAd,CAAmBC,CAAC,IAAI,EAAE,OAAOA,CAAP,KAAa,QAAf,CAAxB,CADF;;AAEA,MAAI,CAACJ,aAAa,CAACK,MAAf,IAAyBH,oBAAoB,EAAjD,EAAqD;AACnD,UAAMI,MAAM,CAACC,MAAP,CACJ,IAAIC,SAAJ,CAAc,2CAAd,CADI,EAEJ;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAFI,CAAN;AAID;;AAED,SAAO,EACL,GAAGV,eADE;AAELE,IAAAA,UAAU,EAAE,CACV,GAAGD,aADO;AAFP,GAAP;AAMD,CAtBD;;AAwBAU,MAAM,CAACC,OAAP,GAAiBd,gBAAjB","sourcesContent":["const updateWorkspaces = ({ content, originalContent = {} }) => {\n  const newWorkspaces = content.workspaces\n\n  if (!newWorkspaces)\n    return originalContent\n\n  // validate workspaces content being appended\n  const hasInvalidWorkspaces = () =>\n    newWorkspaces.some(w => !(typeof w === 'string'))\n  if (!newWorkspaces.length || hasInvalidWorkspaces()) {\n    throw Object.assign(\n      new TypeError('workspaces should be an array of strings.'),\n      { code: 'EWORKSPACESINVALID' }\n    )\n  }\n\n  return {\n    ...originalContent,\n    workspaces: [\n      ...newWorkspaces,\n    ],\n  }\n}\n\nmodule.exports = updateWorkspaces\n"]},"metadata":{},"sourceType":"script"}