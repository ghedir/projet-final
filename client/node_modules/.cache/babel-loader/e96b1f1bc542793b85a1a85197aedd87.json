{"ast":null,"code":"// module to set the appropriate log settings based on configs\n// returns a boolean to say whether we should enable color on\n// stdout or not.\n//\n// Also (and this is a really inexcusable kludge), we patch the\n// log.warn() method so that when we see a peerDep override\n// explanation from Arborist, we can replace the object with a\n// highly abbreviated explanation of what's being overridden.\nconst log = require('npmlog');\n\nconst {\n  explain\n} = require('./explain-eresolve.js');\n\nmodule.exports = config => {\n  const color = config.get('color');\n  const {\n    warn\n  } = log;\n  const stdoutTTY = process.stdout.isTTY;\n  const stderrTTY = process.stderr.isTTY;\n  const dumbTerm = process.env.TERM === 'dumb';\n  const stderrNotDumb = stderrTTY && !dumbTerm; // this logic is duplicated in the config 'color' flattener\n\n  const enableColorStderr = color === 'always' ? true : color === false ? false : stderrTTY;\n  const enableColorStdout = color === 'always' ? true : color === false ? false : stdoutTTY;\n\n  log.warn = (heading, ...args) => {\n    if (heading === 'ERESOLVE' && args[1] && typeof args[1] === 'object') {\n      warn(heading, args[0]);\n      return warn('', explain(args[1], enableColorStdout, 2));\n    }\n\n    return warn(heading, ...args);\n  };\n\n  if (config.get('timing') && config.get('loglevel') === 'notice') log.level = 'timing';else log.level = config.get('loglevel');\n  log.heading = config.get('heading') || 'npm';\n  if (enableColorStderr) log.enableColor();else log.disableColor();\n  if (config.get('unicode')) log.enableUnicode();else log.disableUnicode(); // if it's more than error, don't show progress\n\n  const quiet = log.levels[log.level] > log.levels.error;\n  if (config.get('progress') && stderrNotDumb && !quiet) log.enableProgress();else log.disableProgress();\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/setup-log.js"],"names":["log","require","explain","module","exports","config","color","get","warn","stdoutTTY","process","stdout","isTTY","stderrTTY","stderr","dumbTerm","env","TERM","stderrNotDumb","enableColorStderr","enableColorStdout","heading","args","level","enableColor","disableColor","enableUnicode","disableUnicode","quiet","levels","error","enableProgress","disableProgress"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,uBAAD,CAA3B;;AAEAE,MAAM,CAACC,OAAP,GAAkBC,MAAD,IAAY;AAC3B,QAAMC,KAAK,GAAGD,MAAM,CAACE,GAAP,CAAW,OAAX,CAAd;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAWR,GAAjB;AAEA,QAAMS,SAAS,GAAGC,OAAO,CAACC,MAAR,CAAeC,KAAjC;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACI,MAAR,CAAeF,KAAjC;AACA,QAAMG,QAAQ,GAAGL,OAAO,CAACM,GAAR,CAAYC,IAAZ,KAAqB,MAAtC;AACA,QAAMC,aAAa,GAAGL,SAAS,IAAI,CAACE,QAApC,CAR2B,CAS3B;;AACA,QAAMI,iBAAiB,GAAGb,KAAK,KAAK,QAAV,GAAqB,IAArB,GACtBA,KAAK,KAAK,KAAV,GAAkB,KAAlB,GACAO,SAFJ;AAIA,QAAMO,iBAAiB,GAAGd,KAAK,KAAK,QAAV,GAAqB,IAArB,GACtBA,KAAK,KAAK,KAAV,GAAkB,KAAlB,GACAG,SAFJ;;AAIAT,EAAAA,GAAG,CAACQ,IAAJ,GAAW,CAACa,OAAD,EAAU,GAAGC,IAAb,KAAsB;AAC/B,QAAID,OAAO,KAAK,UAAZ,IAA0BC,IAAI,CAAC,CAAD,CAA9B,IAAqC,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAA5D,EAAsE;AACpEd,MAAAA,IAAI,CAACa,OAAD,EAAUC,IAAI,CAAC,CAAD,CAAd,CAAJ;AACA,aAAOd,IAAI,CAAC,EAAD,EAAKN,OAAO,CAACoB,IAAI,CAAC,CAAD,CAAL,EAAUF,iBAAV,EAA6B,CAA7B,CAAZ,CAAX;AACD;;AACD,WAAOZ,IAAI,CAACa,OAAD,EAAU,GAAGC,IAAb,CAAX;AACD,GAND;;AAQA,MAAIjB,MAAM,CAACE,GAAP,CAAW,QAAX,KAAwBF,MAAM,CAACE,GAAP,CAAW,UAAX,MAA2B,QAAvD,EACEP,GAAG,CAACuB,KAAJ,GAAY,QAAZ,CADF,KAGEvB,GAAG,CAACuB,KAAJ,GAAYlB,MAAM,CAACE,GAAP,CAAW,UAAX,CAAZ;AAEFP,EAAAA,GAAG,CAACqB,OAAJ,GAAchB,MAAM,CAACE,GAAP,CAAW,SAAX,KAAyB,KAAvC;AAEA,MAAIY,iBAAJ,EACEnB,GAAG,CAACwB,WAAJ,GADF,KAGExB,GAAG,CAACyB,YAAJ;AAEF,MAAIpB,MAAM,CAACE,GAAP,CAAW,SAAX,CAAJ,EACEP,GAAG,CAAC0B,aAAJ,GADF,KAGE1B,GAAG,CAAC2B,cAAJ,GAzCyB,CA2C3B;;AACA,QAAMC,KAAK,GAAG5B,GAAG,CAAC6B,MAAJ,CAAW7B,GAAG,CAACuB,KAAf,IAAwBvB,GAAG,CAAC6B,MAAJ,CAAWC,KAAjD;AAEA,MAAIzB,MAAM,CAACE,GAAP,CAAW,UAAX,KAA0BW,aAA1B,IAA2C,CAACU,KAAhD,EACE5B,GAAG,CAAC+B,cAAJ,GADF,KAGE/B,GAAG,CAACgC,eAAJ;AACH,CAlDD","sourcesContent":["// module to set the appropriate log settings based on configs\n// returns a boolean to say whether we should enable color on\n// stdout or not.\n//\n// Also (and this is a really inexcusable kludge), we patch the\n// log.warn() method so that when we see a peerDep override\n// explanation from Arborist, we can replace the object with a\n// highly abbreviated explanation of what's being overridden.\nconst log = require('npmlog')\nconst { explain } = require('./explain-eresolve.js')\n\nmodule.exports = (config) => {\n  const color = config.get('color')\n\n  const { warn } = log\n\n  const stdoutTTY = process.stdout.isTTY\n  const stderrTTY = process.stderr.isTTY\n  const dumbTerm = process.env.TERM === 'dumb'\n  const stderrNotDumb = stderrTTY && !dumbTerm\n  // this logic is duplicated in the config 'color' flattener\n  const enableColorStderr = color === 'always' ? true\n    : color === false ? false\n    : stderrTTY\n\n  const enableColorStdout = color === 'always' ? true\n    : color === false ? false\n    : stdoutTTY\n\n  log.warn = (heading, ...args) => {\n    if (heading === 'ERESOLVE' && args[1] && typeof args[1] === 'object') {\n      warn(heading, args[0])\n      return warn('', explain(args[1], enableColorStdout, 2))\n    }\n    return warn(heading, ...args)\n  }\n\n  if (config.get('timing') && config.get('loglevel') === 'notice')\n    log.level = 'timing'\n  else\n    log.level = config.get('loglevel')\n\n  log.heading = config.get('heading') || 'npm'\n\n  if (enableColorStderr)\n    log.enableColor()\n  else\n    log.disableColor()\n\n  if (config.get('unicode'))\n    log.enableUnicode()\n  else\n    log.disableUnicode()\n\n  // if it's more than error, don't show progress\n  const quiet = log.levels[log.level] > log.levels.error\n\n  if (config.get('progress') && stderrNotDumb && !quiet)\n    log.enableProgress()\n  else\n    log.disableProgress()\n}\n"]},"metadata":{},"sourceType":"script"}