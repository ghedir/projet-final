{"ast":null,"code":"\"use strict\";\n\nvar childProcess = require(\"child_process\");\n\nvar os = require(\"os\");\n\nmodule.exports = function opener(args, options, callback) {\n  var platform = process.platform; // Attempt to detect Windows Subystem for Linux (WSL). WSL  itself as Linux (which works in most cases), but in\n  // this specific case we need to treat it as actually being Windows. The \"Windows-way\" of opening things through\n  // cmd.exe works just fine here, whereas using xdg-open does not, since there is no X Windows in WSL.\n\n  if (platform === \"linux\" && os.release().indexOf(\"Microsoft\") !== -1) {\n    platform = \"win32\";\n  } // http://stackoverflow.com/q/1480971/3191, but see below for Windows.\n\n\n  var command;\n\n  switch (platform) {\n    case \"win32\":\n      {\n        command = \"cmd.exe\";\n        break;\n      }\n\n    case \"darwin\":\n      {\n        command = \"open\";\n        break;\n      }\n\n    default:\n      {\n        command = \"xdg-open\";\n        break;\n      }\n  }\n\n  if (typeof args === \"string\") {\n    args = [args];\n  }\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  if (options && typeof options === \"object\" && options.command) {\n    if (platform === \"win32\") {\n      // *always* use cmd on windows\n      args = [options.command].concat(args);\n    } else {\n      command = options.command;\n    }\n  }\n\n  if (platform === \"win32\") {\n    // On Windows, we really want to use the \"start\" command. But, the rules regarding arguments with spaces, and\n    // escaping them with quotes, can get really arcane. So the easiest way to deal with this is to pass off the\n    // responsibility to \"cmd /c\", which has that logic built in.\n    //\n    // Furthermore, if \"cmd /c\" double-quoted the first parameter, then \"start\" will interpret it as a window title,\n    // so we need to add a dummy empty-string window title: http://stackoverflow.com/a/154090/3191\n    //\n    // Additionally, on Windows ampersand and caret need to be escaped when passed to \"start\"\n    args = args.map(function (value) {\n      return value.replace(/[&^]/g, \"^$&\");\n    });\n    args = [\"/c\", \"start\", \"\\\"\\\"\"].concat(args);\n  }\n\n  return childProcess.execFile(command, args, options, callback);\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/opener/lib/opener.js"],"names":["childProcess","require","os","module","exports","opener","args","options","callback","platform","process","release","indexOf","command","concat","map","value","replace","execFile"],"mappings":"AAAA;;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,QAA/B,EAAyC;AACtD,MAAIC,QAAQ,GAAGC,OAAO,CAACD,QAAvB,CADsD,CAGtD;AACA;AACA;;AACA,MAAIA,QAAQ,KAAK,OAAb,IAAwBP,EAAE,CAACS,OAAH,GAAaC,OAAb,CAAqB,WAArB,MAAsC,CAAC,CAAnE,EAAsE;AAClEH,IAAAA,QAAQ,GAAG,OAAX;AACH,GARqD,CAUtD;;;AACA,MAAII,OAAJ;;AACA,UAAQJ,QAAR;AACI,SAAK,OAAL;AAAc;AACVI,QAAAA,OAAO,GAAG,SAAV;AACA;AACH;;AACD,SAAK,QAAL;AAAe;AACXA,QAAAA,OAAO,GAAG,MAAV;AACA;AACH;;AACD;AAAS;AACLA,QAAAA,OAAO,GAAG,UAAV;AACA;AACH;AAZL;;AAeA,MAAI,OAAOP,IAAP,KAAgB,QAApB,EAA8B;AAC1BA,IAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;AACH;;AAED,MAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC;AAC/BC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,EAAV;AACH;;AAED,MAAIA,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAA9B,IAA0CA,OAAO,CAACM,OAAtD,EAA+D;AAC3D,QAAIJ,QAAQ,KAAK,OAAjB,EAA0B;AACtB;AACAH,MAAAA,IAAI,GAAG,CAACC,OAAO,CAACM,OAAT,EAAkBC,MAAlB,CAAyBR,IAAzB,CAAP;AACH,KAHD,MAGO;AACHO,MAAAA,OAAO,GAAGN,OAAO,CAACM,OAAlB;AACH;AACJ;;AAED,MAAIJ,QAAQ,KAAK,OAAjB,EAA0B;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,IAAAA,IAAI,GAAGA,IAAI,CAACS,GAAL,CAAS,UAAUC,KAAV,EAAiB;AAC7B,aAAOA,KAAK,CAACC,OAAN,CAAc,OAAd,EAAuB,KAAvB,CAAP;AACH,KAFM,CAAP;AAGAX,IAAAA,IAAI,GAAG,CAAC,IAAD,EAAO,OAAP,EAAgB,MAAhB,EAAwBQ,MAAxB,CAA+BR,IAA/B,CAAP;AACH;;AAED,SAAON,YAAY,CAACkB,QAAb,CAAsBL,OAAtB,EAA+BP,IAA/B,EAAqCC,OAArC,EAA8CC,QAA9C,CAAP;AACH,CA7DD","sourcesContent":["\"use strict\";\nvar childProcess = require(\"child_process\");\nvar os = require(\"os\");\n\nmodule.exports = function opener(args, options, callback) {\n    var platform = process.platform;\n\n    // Attempt to detect Windows Subystem for Linux (WSL). WSL  itself as Linux (which works in most cases), but in\n    // this specific case we need to treat it as actually being Windows. The \"Windows-way\" of opening things through\n    // cmd.exe works just fine here, whereas using xdg-open does not, since there is no X Windows in WSL.\n    if (platform === \"linux\" && os.release().indexOf(\"Microsoft\") !== -1) {\n        platform = \"win32\";\n    }\n\n    // http://stackoverflow.com/q/1480971/3191, but see below for Windows.\n    var command;\n    switch (platform) {\n        case \"win32\": {\n            command = \"cmd.exe\";\n            break;\n        }\n        case \"darwin\": {\n            command = \"open\";\n            break;\n        }\n        default: {\n            command = \"xdg-open\";\n            break;\n        }\n    }\n\n    if (typeof args === \"string\") {\n        args = [args];\n    }\n\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n\n    if (options && typeof options === \"object\" && options.command) {\n        if (platform === \"win32\") {\n            // *always* use cmd on windows\n            args = [options.command].concat(args);\n        } else {\n            command = options.command;\n        }\n    }\n\n    if (platform === \"win32\") {\n        // On Windows, we really want to use the \"start\" command. But, the rules regarding arguments with spaces, and\n        // escaping them with quotes, can get really arcane. So the easiest way to deal with this is to pass off the\n        // responsibility to \"cmd /c\", which has that logic built in.\n        //\n        // Furthermore, if \"cmd /c\" double-quoted the first parameter, then \"start\" will interpret it as a window title,\n        // so we need to add a dummy empty-string window title: http://stackoverflow.com/a/154090/3191\n        //\n        // Additionally, on Windows ampersand and caret need to be escaped when passed to \"start\"\n        args = args.map(function (value) {\n            return value.replace(/[&^]/g, \"^$&\");\n        });\n        args = [\"/c\", \"start\", \"\\\"\\\"\"].concat(args);\n    }\n\n    return childProcess.execFile(command, args, options, callback);\n};\n"]},"metadata":{},"sourceType":"script"}