{"ast":null,"code":"\"use strict\";\n\nvar wcwidth = require('./width');\n\nvar _require = require('./utils');\n\nvar padRight = _require.padRight;\nvar padCenter = _require.padCenter;\nvar padLeft = _require.padLeft;\nvar splitIntoLines = _require.splitIntoLines;\nvar splitLongWords = _require.splitLongWords;\nvar truncateString = _require.truncateString;\n\nvar DEFAULT_HEADING_TRANSFORM = function DEFAULT_HEADING_TRANSFORM(key) {\n  return key.toUpperCase();\n};\n\nvar DEFAULT_DATA_TRANSFORM = function DEFAULT_DATA_TRANSFORM(cell, column, index) {\n  return cell;\n};\n\nvar DEFAULTS = Object.freeze({\n  maxWidth: Infinity,\n  minWidth: 0,\n  columnSplitter: ' ',\n  truncate: false,\n  truncateMarker: 'â€¦',\n  preserveNewLines: false,\n  paddingChr: ' ',\n  showHeaders: true,\n  headingTransform: DEFAULT_HEADING_TRANSFORM,\n  dataTransform: DEFAULT_DATA_TRANSFORM\n});\n\nmodule.exports = function (items) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n  var columnConfigs = options.config || {};\n  delete options.config; // remove config so doesn't appear on every column.\n\n  var maxLineWidth = options.maxLineWidth || Infinity;\n  if (maxLineWidth === 'auto') maxLineWidth = process.stdout.columns || Infinity;\n  delete options.maxLineWidth; // this is a line control option, don't pass it to column\n  // Option defaults inheritance:\n  // options.config[columnName] => options => DEFAULTS\n\n  options = mixin({}, DEFAULTS, options);\n  options.config = options.config || Object.create(null);\n  options.spacing = options.spacing || '\\n'; // probably useless\n\n  options.preserveNewLines = !!options.preserveNewLines;\n  options.showHeaders = !!options.showHeaders;\n  options.columns = options.columns || options.include; // alias include/columns, prefer columns if supplied\n\n  var columnNames = options.columns || []; // optional user-supplied columns to include\n\n  items = toArray(items, columnNames); // if not suppled column names, automatically determine columns from data keys\n\n  if (!columnNames.length) {\n    items.forEach(function (item) {\n      for (var columnName in item) {\n        if (columnNames.indexOf(columnName) === -1) columnNames.push(columnName);\n      }\n    });\n  } // initialize column defaults (each column inherits from options.config)\n\n\n  var columns = columnNames.reduce(function (columns, columnName) {\n    var column = Object.create(options);\n    columns[columnName] = mixin(column, columnConfigs[columnName]);\n    return columns;\n  }, Object.create(null)); // sanitize column settings\n\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    column.name = columnName;\n    column.maxWidth = Math.ceil(column.maxWidth);\n    column.minWidth = Math.ceil(column.minWidth);\n    column.truncate = !!column.truncate;\n    column.align = column.align || 'left';\n  }); // sanitize data\n\n  items = items.map(function (item) {\n    var result = Object.create(null);\n    columnNames.forEach(function (columnName) {\n      // null/undefined -> ''\n      result[columnName] = item[columnName] != null ? item[columnName] : ''; // toString everything\n\n      result[columnName] = '' + result[columnName];\n\n      if (columns[columnName].preserveNewLines) {\n        // merge non-newline whitespace chars\n        result[columnName] = result[columnName].replace(/[^\\S\\n]/gmi, ' ');\n      } else {\n        // merge all whitespace chars\n        result[columnName] = result[columnName].replace(/\\s/gmi, ' ');\n      }\n    });\n    return result;\n  }); // transform data cells\n\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    items = items.map(function (item, index) {\n      var col = Object.create(column);\n      item[columnName] = column.dataTransform(item[columnName], col, index);\n      var changedKeys = Object.keys(col); // disable default heading transform if we wrote to column.name\n\n      if (changedKeys.indexOf('name') !== -1) {\n        if (column.headingTransform !== DEFAULT_HEADING_TRANSFORM) return;\n\n        column.headingTransform = function (heading) {\n          return heading;\n        };\n      }\n\n      changedKeys.forEach(function (key) {\n        return column[key] = col[key];\n      });\n      return item;\n    });\n  }); // add headers\n\n  var headers = {};\n\n  if (options.showHeaders) {\n    columnNames.forEach(function (columnName) {\n      var column = columns[columnName];\n\n      if (!column.showHeaders) {\n        headers[columnName] = '';\n        return;\n      }\n\n      headers[columnName] = column.headingTransform(column.name);\n    });\n    items.unshift(headers);\n  } // get actual max-width between min & max\n  // based on length of data in columns\n\n\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    column.width = items.map(function (item) {\n      return item[columnName];\n    }).reduce(function (min, cur) {\n      // if already at maxWidth don't bother testing\n      if (min >= column.maxWidth) return min;\n      return Math.max(min, Math.min(column.maxWidth, Math.max(column.minWidth, wcwidth(cur))));\n    }, 0);\n  }); // split long words so they can break onto multiple lines\n\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    items = items.map(function (item) {\n      item[columnName] = splitLongWords(item[columnName], column.width, column.truncateMarker);\n      return item;\n    });\n  }); // wrap long lines. each item is now an array of lines.\n\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    items = items.map(function (item, index) {\n      var cell = item[columnName];\n      item[columnName] = splitIntoLines(cell, column.width); // if truncating required, only include first line + add truncation char\n\n      if (column.truncate && item[columnName].length > 1) {\n        item[columnName] = splitIntoLines(cell, column.width - wcwidth(column.truncateMarker));\n        var firstLine = item[columnName][0];\n        if (!endsWith(firstLine, column.truncateMarker)) item[columnName][0] += column.truncateMarker;\n        item[columnName] = item[columnName].slice(0, 1);\n      }\n\n      return item;\n    });\n  }); // recalculate column widths from truncated output/lines\n\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    column.width = items.map(function (item) {\n      return item[columnName].reduce(function (min, cur) {\n        if (min >= column.maxWidth) return min;\n        return Math.max(min, Math.min(column.maxWidth, Math.max(column.minWidth, wcwidth(cur))));\n      }, 0);\n    }).reduce(function (min, cur) {\n      if (min >= column.maxWidth) return min;\n      return Math.max(min, Math.min(column.maxWidth, Math.max(column.minWidth, cur)));\n    }, 0);\n  });\n  var rows = createRows(items, columns, columnNames, options.paddingChr); // merge lines into rows\n  // conceive output\n\n  return rows.reduce(function (output, row) {\n    return output.concat(row.reduce(function (rowOut, line) {\n      return rowOut.concat(line.join(options.columnSplitter));\n    }, []));\n  }, []).map(function (line) {\n    return truncateString(line, maxLineWidth);\n  }).join(options.spacing);\n};\n/**\n * Convert wrapped lines into rows with padded values.\n *\n * @param Array items data to process\n * @param Array columns column width settings for wrapping\n * @param Array columnNames column ordering\n * @return Array items wrapped in arrays, corresponding to lines\n */\n\n\nfunction createRows(items, columns, columnNames, paddingChr) {\n  return items.map(function (item) {\n    var row = [];\n    var numLines = 0;\n    columnNames.forEach(function (columnName) {\n      numLines = Math.max(numLines, item[columnName].length);\n    }); // combine matching lines of each rows\n\n    var _loop = function _loop(i) {\n      row[i] = row[i] || [];\n      columnNames.forEach(function (columnName) {\n        var column = columns[columnName];\n        var val = item[columnName][i] || ''; // || '' ensures empty columns get padded\n\n        if (column.align === 'right') row[i].push(padLeft(val, column.width, paddingChr));else if (column.align === 'center' || column.align === 'centre') row[i].push(padCenter(val, column.width, paddingChr));else row[i].push(padRight(val, column.width, paddingChr));\n      });\n    };\n\n    for (var i = 0; i < numLines; i++) {\n      _loop(i);\n    }\n\n    return row;\n  });\n}\n/**\n * Object.assign\n *\n * @return Object Object with properties mixed in.\n */\n\n\nfunction mixin() {\n  var _Object;\n\n  if (Object.assign) return (_Object = Object).assign.apply(_Object, arguments);\n  return ObjectAssign.apply(undefined, arguments);\n}\n\nfunction ObjectAssign(target, firstSource) {\n  \"use strict\";\n\n  if (target === undefined || target === null) throw new TypeError(\"Cannot convert first argument to object\");\n  var to = Object(target);\n  var hasPendingException = false;\n  var pendingException;\n\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) continue;\n    var keysArray = Object.keys(Object(nextSource));\n\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n\n      try {\n        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n        if (desc !== undefined && desc.enumerable) to[nextKey] = nextSource[nextKey];\n      } catch (e) {\n        if (!hasPendingException) {\n          hasPendingException = true;\n          pendingException = e;\n        }\n      }\n    }\n\n    if (hasPendingException) throw pendingException;\n  }\n\n  return to;\n}\n/**\n * Adapted from String.prototype.endsWith polyfill.\n */\n\n\nfunction endsWith(target, searchString, position) {\n  position = position || target.length;\n  position = position - searchString.length;\n  var lastIndex = target.lastIndexOf(searchString);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\nfunction toArray(items, columnNames) {\n  if (Array.isArray(items)) return items;\n  var rows = [];\n\n  for (var key in items) {\n    var item = {};\n    item[columnNames[0] || 'key'] = key;\n    item[columnNames[1] || 'value'] = items[key];\n    rows.push(item);\n  }\n\n  return rows;\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/columnify/columnify.js"],"names":["wcwidth","require","_require","padRight","padCenter","padLeft","splitIntoLines","splitLongWords","truncateString","DEFAULT_HEADING_TRANSFORM","key","toUpperCase","DEFAULT_DATA_TRANSFORM","cell","column","index","DEFAULTS","Object","freeze","maxWidth","Infinity","minWidth","columnSplitter","truncate","truncateMarker","preserveNewLines","paddingChr","showHeaders","headingTransform","dataTransform","module","exports","items","options","arguments","length","undefined","columnConfigs","config","maxLineWidth","process","stdout","columns","mixin","create","spacing","include","columnNames","toArray","forEach","item","columnName","indexOf","push","reduce","name","Math","ceil","align","map","result","replace","col","changedKeys","keys","heading","headers","unshift","width","min","cur","max","firstLine","endsWith","slice","rows","createRows","output","row","concat","rowOut","line","join","numLines","_loop","i","val","_Object","assign","apply","ObjectAssign","target","firstSource","TypeError","to","hasPendingException","pendingException","nextSource","keysArray","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","enumerable","e","searchString","position","lastIndex","lastIndexOf","Array","isArray"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar wcwidth = require('./width');\n\nvar _require = require('./utils');\n\nvar padRight = _require.padRight;\nvar padCenter = _require.padCenter;\nvar padLeft = _require.padLeft;\nvar splitIntoLines = _require.splitIntoLines;\nvar splitLongWords = _require.splitLongWords;\nvar truncateString = _require.truncateString;\n\nvar DEFAULT_HEADING_TRANSFORM = function DEFAULT_HEADING_TRANSFORM(key) {\n  return key.toUpperCase();\n};\n\nvar DEFAULT_DATA_TRANSFORM = function DEFAULT_DATA_TRANSFORM(cell, column, index) {\n  return cell;\n};\n\nvar DEFAULTS = Object.freeze({\n  maxWidth: Infinity,\n  minWidth: 0,\n  columnSplitter: ' ',\n  truncate: false,\n  truncateMarker: 'â€¦',\n  preserveNewLines: false,\n  paddingChr: ' ',\n  showHeaders: true,\n  headingTransform: DEFAULT_HEADING_TRANSFORM,\n  dataTransform: DEFAULT_DATA_TRANSFORM\n});\n\nmodule.exports = function (items) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  var columnConfigs = options.config || {};\n  delete options.config; // remove config so doesn't appear on every column.\n\n  var maxLineWidth = options.maxLineWidth || Infinity;\n  if (maxLineWidth === 'auto') maxLineWidth = process.stdout.columns || Infinity;\n  delete options.maxLineWidth; // this is a line control option, don't pass it to column\n\n  // Option defaults inheritance:\n  // options.config[columnName] => options => DEFAULTS\n  options = mixin({}, DEFAULTS, options);\n\n  options.config = options.config || Object.create(null);\n\n  options.spacing = options.spacing || '\\n'; // probably useless\n  options.preserveNewLines = !!options.preserveNewLines;\n  options.showHeaders = !!options.showHeaders;\n  options.columns = options.columns || options.include; // alias include/columns, prefer columns if supplied\n  var columnNames = options.columns || []; // optional user-supplied columns to include\n\n  items = toArray(items, columnNames);\n\n  // if not suppled column names, automatically determine columns from data keys\n  if (!columnNames.length) {\n    items.forEach(function (item) {\n      for (var columnName in item) {\n        if (columnNames.indexOf(columnName) === -1) columnNames.push(columnName);\n      }\n    });\n  }\n\n  // initialize column defaults (each column inherits from options.config)\n  var columns = columnNames.reduce(function (columns, columnName) {\n    var column = Object.create(options);\n    columns[columnName] = mixin(column, columnConfigs[columnName]);\n    return columns;\n  }, Object.create(null));\n\n  // sanitize column settings\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    column.name = columnName;\n    column.maxWidth = Math.ceil(column.maxWidth);\n    column.minWidth = Math.ceil(column.minWidth);\n    column.truncate = !!column.truncate;\n    column.align = column.align || 'left';\n  });\n\n  // sanitize data\n  items = items.map(function (item) {\n    var result = Object.create(null);\n    columnNames.forEach(function (columnName) {\n      // null/undefined -> ''\n      result[columnName] = item[columnName] != null ? item[columnName] : '';\n      // toString everything\n      result[columnName] = '' + result[columnName];\n      if (columns[columnName].preserveNewLines) {\n        // merge non-newline whitespace chars\n        result[columnName] = result[columnName].replace(/[^\\S\\n]/gmi, ' ');\n      } else {\n        // merge all whitespace chars\n        result[columnName] = result[columnName].replace(/\\s/gmi, ' ');\n      }\n    });\n    return result;\n  });\n\n  // transform data cells\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    items = items.map(function (item, index) {\n      var col = Object.create(column);\n      item[columnName] = column.dataTransform(item[columnName], col, index);\n\n      var changedKeys = Object.keys(col);\n      // disable default heading transform if we wrote to column.name\n      if (changedKeys.indexOf('name') !== -1) {\n        if (column.headingTransform !== DEFAULT_HEADING_TRANSFORM) return;\n        column.headingTransform = function (heading) {\n          return heading;\n        };\n      }\n      changedKeys.forEach(function (key) {\n        return column[key] = col[key];\n      });\n      return item;\n    });\n  });\n\n  // add headers\n  var headers = {};\n  if (options.showHeaders) {\n    columnNames.forEach(function (columnName) {\n      var column = columns[columnName];\n\n      if (!column.showHeaders) {\n        headers[columnName] = '';\n        return;\n      }\n\n      headers[columnName] = column.headingTransform(column.name);\n    });\n    items.unshift(headers);\n  }\n  // get actual max-width between min & max\n  // based on length of data in columns\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    column.width = items.map(function (item) {\n      return item[columnName];\n    }).reduce(function (min, cur) {\n      // if already at maxWidth don't bother testing\n      if (min >= column.maxWidth) return min;\n      return Math.max(min, Math.min(column.maxWidth, Math.max(column.minWidth, wcwidth(cur))));\n    }, 0);\n  });\n\n  // split long words so they can break onto multiple lines\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    items = items.map(function (item) {\n      item[columnName] = splitLongWords(item[columnName], column.width, column.truncateMarker);\n      return item;\n    });\n  });\n\n  // wrap long lines. each item is now an array of lines.\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    items = items.map(function (item, index) {\n      var cell = item[columnName];\n      item[columnName] = splitIntoLines(cell, column.width);\n\n      // if truncating required, only include first line + add truncation char\n      if (column.truncate && item[columnName].length > 1) {\n        item[columnName] = splitIntoLines(cell, column.width - wcwidth(column.truncateMarker));\n        var firstLine = item[columnName][0];\n        if (!endsWith(firstLine, column.truncateMarker)) item[columnName][0] += column.truncateMarker;\n        item[columnName] = item[columnName].slice(0, 1);\n      }\n      return item;\n    });\n  });\n\n  // recalculate column widths from truncated output/lines\n  columnNames.forEach(function (columnName) {\n    var column = columns[columnName];\n    column.width = items.map(function (item) {\n      return item[columnName].reduce(function (min, cur) {\n        if (min >= column.maxWidth) return min;\n        return Math.max(min, Math.min(column.maxWidth, Math.max(column.minWidth, wcwidth(cur))));\n      }, 0);\n    }).reduce(function (min, cur) {\n      if (min >= column.maxWidth) return min;\n      return Math.max(min, Math.min(column.maxWidth, Math.max(column.minWidth, cur)));\n    }, 0);\n  });\n\n  var rows = createRows(items, columns, columnNames, options.paddingChr); // merge lines into rows\n  // conceive output\n  return rows.reduce(function (output, row) {\n    return output.concat(row.reduce(function (rowOut, line) {\n      return rowOut.concat(line.join(options.columnSplitter));\n    }, []));\n  }, []).map(function (line) {\n    return truncateString(line, maxLineWidth);\n  }).join(options.spacing);\n};\n\n/**\n * Convert wrapped lines into rows with padded values.\n *\n * @param Array items data to process\n * @param Array columns column width settings for wrapping\n * @param Array columnNames column ordering\n * @return Array items wrapped in arrays, corresponding to lines\n */\n\nfunction createRows(items, columns, columnNames, paddingChr) {\n  return items.map(function (item) {\n    var row = [];\n    var numLines = 0;\n    columnNames.forEach(function (columnName) {\n      numLines = Math.max(numLines, item[columnName].length);\n    });\n    // combine matching lines of each rows\n\n    var _loop = function _loop(i) {\n      row[i] = row[i] || [];\n      columnNames.forEach(function (columnName) {\n        var column = columns[columnName];\n        var val = item[columnName][i] || ''; // || '' ensures empty columns get padded\n        if (column.align === 'right') row[i].push(padLeft(val, column.width, paddingChr));else if (column.align === 'center' || column.align === 'centre') row[i].push(padCenter(val, column.width, paddingChr));else row[i].push(padRight(val, column.width, paddingChr));\n      });\n    };\n\n    for (var i = 0; i < numLines; i++) {\n      _loop(i);\n    }\n    return row;\n  });\n}\n\n/**\n * Object.assign\n *\n * @return Object Object with properties mixed in.\n */\n\nfunction mixin() {\n  var _Object;\n\n  if (Object.assign) return (_Object = Object).assign.apply(_Object, arguments);\n  return ObjectAssign.apply(undefined, arguments);\n}\n\nfunction ObjectAssign(target, firstSource) {\n  \"use strict\";\n\n  if (target === undefined || target === null) throw new TypeError(\"Cannot convert first argument to object\");\n\n  var to = Object(target);\n\n  var hasPendingException = false;\n  var pendingException;\n\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) continue;\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      try {\n        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n        if (desc !== undefined && desc.enumerable) to[nextKey] = nextSource[nextKey];\n      } catch (e) {\n        if (!hasPendingException) {\n          hasPendingException = true;\n          pendingException = e;\n        }\n      }\n    }\n\n    if (hasPendingException) throw pendingException;\n  }\n  return to;\n}\n\n/**\n * Adapted from String.prototype.endsWith polyfill.\n */\n\nfunction endsWith(target, searchString, position) {\n  position = position || target.length;\n  position = position - searchString.length;\n  var lastIndex = target.lastIndexOf(searchString);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\nfunction toArray(items, columnNames) {\n  if (Array.isArray(items)) return items;\n  var rows = [];\n  for (var key in items) {\n    var item = {};\n    item[columnNames[0] || 'key'] = key;\n    item[columnNames[1] || 'value'] = items[key];\n    rows.push(item);\n  }\n  return rows;\n}\n\n"]},"metadata":{},"sourceType":"script"}