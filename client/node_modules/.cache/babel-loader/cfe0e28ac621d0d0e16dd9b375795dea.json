{"ast":null,"code":"'use strict';\n\nclass FetchError extends Error {\n  constructor(message, type, systemError) {\n    super(message);\n    this.code = 'FETCH_ERROR'; // pick up code, expected, path, ...\n\n    if (systemError) Object.assign(this, systemError);\n    this.errno = this.code; // override anything the system error might've clobbered\n\n    this.type = this.code === 'EBADSIZE' && this.found > this.expect ? 'max-size' : type;\n    this.message = message;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  get name() {\n    return 'FetchError';\n  } // don't allow name to be overwritten\n\n\n  set name(n) {}\n\n  get [Symbol.toStringTag]() {\n    return 'FetchError';\n  }\n\n}\n\nmodule.exports = FetchError;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/minipass-fetch/lib/fetch-error.js"],"names":["FetchError","Error","constructor","message","type","systemError","code","Object","assign","errno","found","expect","captureStackTrace","name","n","Symbol","toStringTag","module","exports"],"mappings":"AAAA;;AACA,MAAMA,UAAN,SAAyBC,KAAzB,CAA+B;AAC7BC,EAAAA,WAAW,CAAEC,OAAF,EAAWC,IAAX,EAAiBC,WAAjB,EAA8B;AACvC,UAAMF,OAAN;AACA,SAAKG,IAAL,GAAY,aAAZ,CAFuC,CAIvC;;AACA,QAAID,WAAJ,EACEE,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBH,WAApB;AAEF,SAAKI,KAAL,GAAa,KAAKH,IAAlB,CARuC,CAUvC;;AACA,SAAKF,IAAL,GAAY,KAAKE,IAAL,KAAc,UAAd,IAA4B,KAAKI,KAAL,GAAa,KAAKC,MAA9C,GACR,UADQ,GACKP,IADjB;AAEA,SAAKD,OAAL,GAAeA,OAAf;AACAF,IAAAA,KAAK,CAACW,iBAAN,CAAwB,IAAxB,EAA8B,KAAKV,WAAnC;AACD;;AAEO,MAAJW,IAAI,GAAI;AACV,WAAO,YAAP;AACD,GApB4B,CAsB7B;;;AACQ,MAAJA,IAAI,CAAEC,CAAF,EAAK,CAAE;;AAEQ,OAAlBC,MAAM,CAACC,WAAW,IAAK;AAC1B,WAAO,YAAP;AACD;;AA3B4B;;AA6B/BC,MAAM,CAACC,OAAP,GAAiBlB,UAAjB","sourcesContent":["'use strict'\nclass FetchError extends Error {\n  constructor (message, type, systemError) {\n    super(message)\n    this.code = 'FETCH_ERROR'\n\n    // pick up code, expected, path, ...\n    if (systemError)\n      Object.assign(this, systemError)\n\n    this.errno = this.code\n\n    // override anything the system error might've clobbered\n    this.type = this.code === 'EBADSIZE' && this.found > this.expect\n      ? 'max-size' : type\n    this.message = message\n    Error.captureStackTrace(this, this.constructor)\n  }\n\n  get name () {\n    return 'FetchError'\n  }\n\n  // don't allow name to be overwritten\n  set name (n) {}\n\n  get [Symbol.toStringTag] () {\n    return 'FetchError'\n  }\n}\nmodule.exports = FetchError\n"]},"metadata":{},"sourceType":"script"}