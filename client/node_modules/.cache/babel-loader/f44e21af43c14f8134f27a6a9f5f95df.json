{"ast":null,"code":"// npm explore <pkg>[@<version>]\n// open a subshell to the package folder.\nconst rpj = require('read-package-json-fast');\n\nconst runScript = require('@npmcli/run-script');\n\nconst {\n  join,\n  resolve,\n  relative\n} = require('path');\n\nconst completion = require('./utils/completion/installed-shallow.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Explore extends BaseCommand {\n  static get description() {\n    return 'Browse an installed package';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'explore';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['<pkg> [ -- <command>]'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['shell'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n\n  exec(args, cb) {\n    this.explore(args).then(() => cb()).catch(cb);\n  }\n\n  async explore(args) {\n    if (args.length < 1 || !args[0]) throw this.usage;\n    const pkgname = args.shift(); // detect and prevent any .. shenanigans\n\n    const path = join(this.npm.dir, join('/', pkgname));\n    if (relative(path, this.npm.dir) === '') throw this.usage; // run as if running a script named '_explore', which we set to either\n    // the set of arguments, or the shell config, and let @npmcli/run-script\n    // handle all the escaping and PATH setup stuff.\n\n    const pkg = await rpj(resolve(path, 'package.json')).catch(er => {\n      this.npm.log.error('explore', `It doesn't look like ${pkgname} is installed.`);\n      throw er;\n    });\n    const {\n      shell\n    } = this.npm.flatOptions;\n    pkg.scripts = { ...(pkg.scripts || {}),\n      _explore: args.join(' ').trim() || shell\n    };\n    if (!args.length) this.npm.output(`\\nExploring ${path}\\nType 'exit' or ^D when finished\\n`);\n    this.npm.log.disableProgress();\n\n    try {\n      return await runScript({ ...this.npm.flatOptions,\n        pkg,\n        banner: false,\n        path,\n        stdioString: true,\n        event: '_explore',\n        stdio: 'inherit'\n      }).catch(er => {\n        process.exitCode = typeof er.code === 'number' && er.code !== 0 ? er.code : 1; // if it's not an exit error, or non-interactive, throw it\n\n        const isProcExit = er.message === 'command failed' && (typeof er.code === 'number' || /^SIG/.test(er.signal || ''));\n        if (args.length || !isProcExit) throw er;\n      });\n    } finally {\n      this.npm.log.enableProgress();\n    }\n  }\n\n}\n\nmodule.exports = Explore;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/explore.js"],"names":["rpj","require","runScript","join","resolve","relative","completion","BaseCommand","Explore","description","name","usage","params","opts","npm","exec","args","cb","explore","then","catch","length","pkgname","shift","path","dir","pkg","er","log","error","shell","flatOptions","scripts","_explore","trim","output","disableProgress","banner","stdioString","event","stdio","process","exitCode","code","isProcExit","message","test","signal","enableProgress","module","exports"],"mappings":"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","sourcesContent":["// npm explore <pkg>[@<version>]\n// open a subshell to the package folder.\n\nconst rpj = require('read-package-json-fast')\nconst runScript = require('@npmcli/run-script')\nconst { join, resolve, relative } = require('path')\nconst completion = require('./utils/completion/installed-shallow.js')\nconst BaseCommand = require('./base-command.js')\n\nclass Explore extends BaseCommand {\n  static get description () {\n    return 'Browse an installed package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'explore'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<pkg> [ -- <command>]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['shell']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  exec (args, cb) {\n    this.explore(args).then(() => cb()).catch(cb)\n  }\n\n  async explore (args) {\n    if (args.length < 1 || !args[0])\n      throw this.usage\n\n    const pkgname = args.shift()\n\n    // detect and prevent any .. shenanigans\n    const path = join(this.npm.dir, join('/', pkgname))\n    if (relative(path, this.npm.dir) === '')\n      throw this.usage\n\n    // run as if running a script named '_explore', which we set to either\n    // the set of arguments, or the shell config, and let @npmcli/run-script\n    // handle all the escaping and PATH setup stuff.\n\n    const pkg = await rpj(resolve(path, 'package.json')).catch(er => {\n      this.npm.log.error('explore', `It doesn't look like ${pkgname} is installed.`)\n      throw er\n    })\n\n    const { shell } = this.npm.flatOptions\n    pkg.scripts = {\n      ...(pkg.scripts || {}),\n      _explore: args.join(' ').trim() || shell,\n    }\n\n    if (!args.length)\n      this.npm.output(`\\nExploring ${path}\\nType 'exit' or ^D when finished\\n`)\n    this.npm.log.disableProgress()\n    try {\n      return await runScript({\n        ...this.npm.flatOptions,\n        pkg,\n        banner: false,\n        path,\n        stdioString: true,\n        event: '_explore',\n        stdio: 'inherit',\n      }).catch(er => {\n        process.exitCode = typeof er.code === 'number' && er.code !== 0 ? er.code\n          : 1\n        // if it's not an exit error, or non-interactive, throw it\n        const isProcExit = er.message === 'command failed' &&\n          (typeof er.code === 'number' || /^SIG/.test(er.signal || ''))\n        if (args.length || !isProcExit)\n          throw er\n      })\n    } finally {\n      this.npm.log.enableProgress()\n    }\n  }\n}\nmodule.exports = Explore\n"]},"metadata":{},"sourceType":"script"}