{"ast":null,"code":"const libnpmversion = require('libnpmversion');\n\nconst {\n  resolve\n} = require('path');\n\nconst {\n  promisify\n} = require('util');\n\nconst readFile = promisify(require('fs').readFile);\n\nconst BaseCommand = require('./base-command.js');\n\nclass Version extends BaseCommand {\n  static get description() {\n    return 'Bump a package version';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'version';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['allow-same-version', 'commit-hooks', 'git-tag-version', 'json', 'preid', 'sign-git-tag', 'workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]'];\n  }\n\n  async completion(opts) {\n    const {\n      conf: {\n        argv: {\n          remain\n        }\n      }\n    } = opts;\n    if (remain.length > 2) return [];\n    return ['major', 'minor', 'patch', 'premajor', 'preminor', 'prepatch', 'prerelease', 'from-git'];\n  }\n\n  exec(args, cb) {\n    return this.version(args).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.versionWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async version(args) {\n    switch (args.length) {\n      case 0:\n        return this.list();\n\n      case 1:\n        return this.change(args);\n\n      default:\n        throw this.usage;\n    }\n  }\n\n  async versionWorkspaces(args, filters) {\n    switch (args.length) {\n      case 0:\n        return this.listWorkspaces(filters);\n\n      case 1:\n        return this.changeWorkspaces(args, filters);\n\n      default:\n        throw this.usage;\n    }\n  }\n\n  async change(args) {\n    const prefix = this.npm.config.get('tag-version-prefix');\n    const version = await libnpmversion(args[0], { ...this.npm.flatOptions,\n      path: this.npm.prefix\n    });\n    return this.npm.output(`${prefix}${version}`);\n  }\n\n  async changeWorkspaces(args, filters) {\n    const prefix = this.npm.config.get('tag-version-prefix');\n    await this.setWorkspaces(filters);\n\n    for (const [name, path] of this.workspaces) {\n      this.npm.output(name);\n      const version = await libnpmversion(args[0], { ...this.npm.flatOptions,\n        'git-tag-version': false,\n        path\n      });\n      this.npm.output(`${prefix}${version}`);\n    }\n  }\n\n  async list(results = {}) {\n    const pj = resolve(this.npm.prefix, 'package.json');\n    const pkg = await readFile(pj, 'utf8').then(data => JSON.parse(data)).catch(() => ({}));\n    if (pkg.name && pkg.version) results[pkg.name] = pkg.version;\n    results.npm = this.npm.version;\n\n    for (const [key, version] of Object.entries(process.versions)) results[key] = version;\n\n    if (this.npm.config.get('json')) this.npm.output(JSON.stringify(results, null, 2));else this.npm.output(results);\n  }\n\n  async listWorkspaces(filters) {\n    const results = {};\n    await this.setWorkspaces(filters);\n\n    for (const path of this.workspacePaths) {\n      const pj = resolve(path, 'package.json'); // setWorkspaces has already parsed package.json so we know it won't error\n\n      const pkg = await readFile(pj, 'utf8').then(data => JSON.parse(data));\n      if (pkg.name && pkg.version) results[pkg.name] = pkg.version;\n    }\n\n    return this.list(results);\n  }\n\n}\n\nmodule.exports = Version;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/version.js"],"names":["libnpmversion","require","resolve","promisify","readFile","BaseCommand","Version","description","name","params","usage","completion","opts","conf","argv","remain","length","exec","args","cb","version","then","catch","execWorkspaces","filters","versionWorkspaces","list","change","listWorkspaces","changeWorkspaces","prefix","npm","config","get","flatOptions","path","output","setWorkspaces","workspaces","results","pj","pkg","data","JSON","parse","key","Object","entries","process","versions","stringify","workspacePaths","module","exports"],"mappings":"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","sourcesContent":["const libnpmversion = require('libnpmversion')\nconst { resolve } = require('path')\nconst { promisify } = require('util')\nconst readFile = promisify(require('fs').readFile)\n\nconst BaseCommand = require('./base-command.js')\n\nclass Version extends BaseCommand {\n  static get description () {\n    return 'Bump a package version'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'version'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'allow-same-version',\n      'commit-hooks',\n      'git-tag-version',\n      'json',\n      'preid',\n      'sign-git-tag',\n      'workspace',\n      'workspaces',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]']\n  }\n\n  async completion (opts) {\n    const { conf: { argv: { remain } } } = opts\n    if (remain.length > 2)\n      return []\n\n    return [\n      'major',\n      'minor',\n      'patch',\n      'premajor',\n      'preminor',\n      'prepatch',\n      'prerelease',\n      'from-git',\n    ]\n  }\n\n  exec (args, cb) {\n    return this.version(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.versionWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async version (args) {\n    switch (args.length) {\n      case 0:\n        return this.list()\n      case 1:\n        return this.change(args)\n      default:\n        throw this.usage\n    }\n  }\n\n  async versionWorkspaces (args, filters) {\n    switch (args.length) {\n      case 0:\n        return this.listWorkspaces(filters)\n      case 1:\n        return this.changeWorkspaces(args, filters)\n      default:\n        throw this.usage\n    }\n  }\n\n  async change (args) {\n    const prefix = this.npm.config.get('tag-version-prefix')\n    const version = await libnpmversion(args[0], {\n      ...this.npm.flatOptions,\n      path: this.npm.prefix,\n    })\n    return this.npm.output(`${prefix}${version}`)\n  }\n\n  async changeWorkspaces (args, filters) {\n    const prefix = this.npm.config.get('tag-version-prefix')\n    await this.setWorkspaces(filters)\n    for (const [name, path] of this.workspaces) {\n      this.npm.output(name)\n      const version = await libnpmversion(args[0], {\n        ...this.npm.flatOptions,\n        'git-tag-version': false,\n        path,\n      })\n      this.npm.output(`${prefix}${version}`)\n    }\n  }\n\n  async list (results = {}) {\n    const pj = resolve(this.npm.prefix, 'package.json')\n\n    const pkg = await readFile(pj, 'utf8')\n      .then(data => JSON.parse(data))\n      .catch(() => ({}))\n\n    if (pkg.name && pkg.version)\n      results[pkg.name] = pkg.version\n\n    results.npm = this.npm.version\n    for (const [key, version] of Object.entries(process.versions))\n      results[key] = version\n\n    if (this.npm.config.get('json'))\n      this.npm.output(JSON.stringify(results, null, 2))\n    else\n      this.npm.output(results)\n  }\n\n  async listWorkspaces (filters) {\n    const results = {}\n    await this.setWorkspaces(filters)\n    for (const path of this.workspacePaths) {\n      const pj = resolve(path, 'package.json')\n      // setWorkspaces has already parsed package.json so we know it won't error\n      const pkg = await readFile(pj, 'utf8')\n        .then(data => JSON.parse(data))\n\n      if (pkg.name && pkg.version)\n        results[pkg.name] = pkg.version\n    }\n    return this.list(results)\n  }\n}\n\nmodule.exports = Version\n"]},"metadata":{},"sourceType":"script"}