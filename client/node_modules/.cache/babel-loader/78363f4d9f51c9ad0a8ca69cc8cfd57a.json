{"ast":null,"code":"// make sure that bins are executable, and that they don't have\n// windows line-endings on the hashbang line.\nconst fs = require('fs');\n\nconst {\n  promisify\n} = require('util');\n\nconst execMode = 0o777 & ~process.umask();\n\nconst writeFileAtomic = require('write-file-atomic');\n\nconst open = promisify(fs.open);\nconst close = promisify(fs.close);\nconst read = promisify(fs.read);\nconst chmod = promisify(fs.chmod);\nconst readFile = promisify(fs.readFile);\n\nconst isWindowsHashBang = buf => buf[0] === '#'.charCodeAt(0) && buf[1] === '!'.charCodeAt(0) && /^#![^\\n]+\\r\\n/.test(buf.toString());\n\nconst isWindowsHashbangFile = file => {\n  const FALSE = () => false;\n\n  return open(file, 'r').then(fd => {\n    const buf = Buffer.alloc(2048);\n    return read(fd, buf, 0, 2048, 0).then(() => {\n      const isWHB = isWindowsHashBang(buf);\n      return close(fd).then(() => isWHB, () => isWHB);\n    }, // don't leak FD if read() fails\n    () => close(fd).then(FALSE, FALSE));\n  }, FALSE);\n};\n\nconst dos2Unix = file => readFile(file, 'utf8').then(content => writeFileAtomic(file, content.replace(/^(#![^\\n]+)\\r\\n/, '$1\\n')));\n\nconst fixBin = file => chmod(file, execMode).then(() => isWindowsHashbangFile(file)).then(isWHB => isWHB ? dos2Unix(file) : null);\n\nmodule.exports = fixBin;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/bin-links/lib/fix-bin.js"],"names":["fs","require","promisify","execMode","process","umask","writeFileAtomic","open","close","read","chmod","readFile","isWindowsHashBang","buf","charCodeAt","test","toString","isWindowsHashbangFile","file","FALSE","then","fd","Buffer","alloc","isWHB","dos2Unix","content","replace","fixBin","module","exports"],"mappings":"AAAA;AACA;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,MAAD,CAA7B;;AAEA,MAAME,QAAQ,GAAG,QAAS,CAACC,OAAO,CAACC,KAAR,EAA3B;;AAEA,MAAMC,eAAe,GAAGL,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAMM,IAAI,GAAGL,SAAS,CAACF,EAAE,CAACO,IAAJ,CAAtB;AACA,MAAMC,KAAK,GAAGN,SAAS,CAACF,EAAE,CAACQ,KAAJ,CAAvB;AACA,MAAMC,IAAI,GAAGP,SAAS,CAACF,EAAE,CAACS,IAAJ,CAAtB;AACA,MAAMC,KAAK,GAAGR,SAAS,CAACF,EAAE,CAACU,KAAJ,CAAvB;AACA,MAAMC,QAAQ,GAAGT,SAAS,CAACF,EAAE,CAACW,QAAJ,CAA1B;;AAEA,MAAMC,iBAAiB,GAAGC,GAAG,IAC3BA,GAAG,CAAC,CAAD,CAAH,KAAW,IAAIC,UAAJ,CAAe,CAAf,CAAX,IACAD,GAAG,CAAC,CAAD,CAAH,KAAW,IAAIC,UAAJ,CAAe,CAAf,CADX,IAEA,gBAAgBC,IAAhB,CAAqBF,GAAG,CAACG,QAAJ,EAArB,CAHF;;AAKA,MAAMC,qBAAqB,GAAGC,IAAI,IAAI;AACpC,QAAMC,KAAK,GAAG,MAAM,KAApB;;AACA,SAAOZ,IAAI,CAACW,IAAD,EAAO,GAAP,CAAJ,CAAgBE,IAAhB,CAAqBC,EAAE,IAAI;AAChC,UAAMR,GAAG,GAAGS,MAAM,CAACC,KAAP,CAAa,IAAb,CAAZ;AACA,WAAOd,IAAI,CAACY,EAAD,EAAKR,GAAL,EAAU,CAAV,EAAa,IAAb,EAAmB,CAAnB,CAAJ,CACJO,IADI,CAEH,MAAM;AACJ,YAAMI,KAAK,GAAGZ,iBAAiB,CAACC,GAAD,CAA/B;AACA,aAAOL,KAAK,CAACa,EAAD,CAAL,CAAUD,IAAV,CAAe,MAAMI,KAArB,EAA4B,MAAMA,KAAlC,CAAP;AACD,KALE,EAMH;AACA,UAAMhB,KAAK,CAACa,EAAD,CAAL,CAAUD,IAAV,CAAeD,KAAf,EAAsBA,KAAtB,CAPH,CAAP;AASD,GAXM,EAWJA,KAXI,CAAP;AAYD,CAdD;;AAgBA,MAAMM,QAAQ,GAAGP,IAAI,IACnBP,QAAQ,CAACO,IAAD,EAAO,MAAP,CAAR,CAAuBE,IAAvB,CAA4BM,OAAO,IACjCpB,eAAe,CAACY,IAAD,EAAOQ,OAAO,CAACC,OAAR,CAAgB,iBAAhB,EAAmC,MAAnC,CAAP,CADjB,CADF;;AAIA,MAAMC,MAAM,GAAGV,IAAI,IAAIR,KAAK,CAACQ,IAAD,EAAOf,QAAP,CAAL,CACpBiB,IADoB,CACf,MAAMH,qBAAqB,CAACC,IAAD,CADZ,EAEpBE,IAFoB,CAEfI,KAAK,IAAIA,KAAK,GAAGC,QAAQ,CAACP,IAAD,CAAX,GAAoB,IAFnB,CAAvB;;AAIAW,MAAM,CAACC,OAAP,GAAiBF,MAAjB","sourcesContent":["// make sure that bins are executable, and that they don't have\n// windows line-endings on the hashbang line.\nconst fs = require('fs')\nconst { promisify } = require('util')\n\nconst execMode = 0o777 & (~process.umask())\n\nconst writeFileAtomic = require('write-file-atomic')\nconst open = promisify(fs.open)\nconst close = promisify(fs.close)\nconst read = promisify(fs.read)\nconst chmod = promisify(fs.chmod)\nconst readFile = promisify(fs.readFile)\n\nconst isWindowsHashBang = buf =>\n  buf[0] === '#'.charCodeAt(0) &&\n  buf[1] === '!'.charCodeAt(0) &&\n  /^#![^\\n]+\\r\\n/.test(buf.toString())\n\nconst isWindowsHashbangFile = file => {\n  const FALSE = () => false\n  return open(file, 'r').then(fd => {\n    const buf = Buffer.alloc(2048)\n    return read(fd, buf, 0, 2048, 0)\n      .then(\n        () => {\n          const isWHB = isWindowsHashBang(buf)\n          return close(fd).then(() => isWHB, () => isWHB)\n        },\n        // don't leak FD if read() fails\n        () => close(fd).then(FALSE, FALSE)\n      )\n  }, FALSE)\n}\n\nconst dos2Unix = file =>\n  readFile(file, 'utf8').then(content =>\n    writeFileAtomic(file, content.replace(/^(#![^\\n]+)\\r\\n/, '$1\\n')))\n\nconst fixBin = file => chmod(file, execMode)\n  .then(() => isWindowsHashbangFile(file))\n  .then(isWHB => isWHB ? dos2Unix(file) : null)\n\nmodule.exports = fixBin\n"]},"metadata":{},"sourceType":"script"}