{"ast":null,"code":"// XXX: To date, npm Enterprise Legacy is the only system that ever\n// implemented support for this type of login.  A better way to do\n// SSO is to use the WebLogin type of login supported by the npm-login\n// module.  This more forward-looking login style is, ironically,\n// supported by the '--auth-type=legacy' type of login.\n// When and if npm Enterprise Legacy is no longer supported by the npm\n// CLI, we can remove this, and fold the lib/auth/legacy.js back into\n// lib/adduser.js\nconst log = require('npmlog');\n\nconst profile = require('npm-profile');\n\nconst npmFetch = require('npm-registry-fetch');\n\nconst openUrl = require('../utils/open-url.js');\n\nconst otplease = require('../utils/otplease.js');\n\nconst pollForSession = ({\n  registry,\n  token,\n  opts\n}) => {\n  log.info('adduser', 'Polling for validated SSO session');\n  return npmFetch.json('/-/whoami', { ...opts,\n    registry,\n    forceAuth: {\n      token\n    }\n  }).then(({\n    username\n  }) => username, err => {\n    if (err.code === 'E401') {\n      return sleep(opts.ssoPollFrequency).then(() => {\n        return pollForSession({\n          registry,\n          token,\n          opts\n        });\n      });\n    } else throw err;\n  });\n};\n\nfunction sleep(time) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\n\nconst login = async (npm, {\n  creds,\n  registry,\n  scope\n}) => {\n  log.warn('deprecated', 'SSO --auth-type is deprecated');\n  const opts = { ...npm.flatOptions,\n    creds,\n    registry,\n    scope\n  };\n  const {\n    ssoType\n  } = opts;\n  if (!ssoType) throw new Error('Missing option: sso-type'); // We're reusing the legacy login endpoint, so we need some dummy\n  // stuff here to pass validation. They're never used.\n\n  const auth = {\n    username: 'npm_' + ssoType + '_auth_dummy_user',\n    password: 'placeholder',\n    email: 'support@npmjs.com',\n    authType: ssoType\n  };\n  const {\n    token,\n    sso\n  } = await otplease(opts, opts => profile.loginCouch(auth.username, auth.password, opts));\n  if (!token) throw new Error('no SSO token returned');\n  if (!sso) throw new Error('no SSO URL returned by services');\n  await openUrl(npm, sso, 'to complete your login please visit');\n  const username = await pollForSession({\n    registry,\n    token,\n    opts\n  });\n  log.info('adduser', `Authorized user ${username}`);\n  const scopeMessage = scope ? ' to scope ' + scope : '';\n  const message = `Logged in as ${username}${scopeMessage} on ${registry}.`;\n  return {\n    message,\n    newCreds: {\n      token\n    }\n  };\n};\n\nmodule.exports = login;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/auth/sso.js"],"names":["log","require","profile","npmFetch","openUrl","otplease","pollForSession","registry","token","opts","info","json","forceAuth","then","username","err","code","sleep","ssoPollFrequency","time","Promise","resolve","setTimeout","login","npm","creds","scope","warn","flatOptions","ssoType","Error","auth","password","email","authType","sso","loginCouch","scopeMessage","message","newCreds","module","exports"],"mappings":"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","sourcesContent":["// XXX: To date, npm Enterprise Legacy is the only system that ever\n// implemented support for this type of login.  A better way to do\n// SSO is to use the WebLogin type of login supported by the npm-login\n// module.  This more forward-looking login style is, ironically,\n// supported by the '--auth-type=legacy' type of login.\n// When and if npm Enterprise Legacy is no longer supported by the npm\n// CLI, we can remove this, and fold the lib/auth/legacy.js back into\n// lib/adduser.js\n\nconst log = require('npmlog')\nconst profile = require('npm-profile')\nconst npmFetch = require('npm-registry-fetch')\n\nconst openUrl = require('../utils/open-url.js')\nconst otplease = require('../utils/otplease.js')\n\nconst pollForSession = ({ registry, token, opts }) => {\n  log.info('adduser', 'Polling for validated SSO session')\n  return npmFetch.json(\n    '/-/whoami', { ...opts, registry, forceAuth: { token } }\n  ).then(\n    ({ username }) => username,\n    err => {\n      if (err.code === 'E401') {\n        return sleep(opts.ssoPollFrequency).then(() => {\n          return pollForSession({ registry, token, opts })\n        })\n      } else\n        throw err\n    }\n  )\n}\n\nfunction sleep (time) {\n  return new Promise((resolve) => setTimeout(resolve, time))\n}\n\nconst login = async (npm, { creds, registry, scope }) => {\n  log.warn('deprecated', 'SSO --auth-type is deprecated')\n\n  const opts = { ...npm.flatOptions, creds, registry, scope }\n  const { ssoType } = opts\n\n  if (!ssoType)\n    throw new Error('Missing option: sso-type')\n\n  // We're reusing the legacy login endpoint, so we need some dummy\n  // stuff here to pass validation. They're never used.\n  const auth = {\n    username: 'npm_' + ssoType + '_auth_dummy_user',\n    password: 'placeholder',\n    email: 'support@npmjs.com',\n    authType: ssoType,\n  }\n\n  const { token, sso } = await otplease(opts,\n    opts => profile.loginCouch(auth.username, auth.password, opts)\n  )\n\n  if (!token)\n    throw new Error('no SSO token returned')\n  if (!sso)\n    throw new Error('no SSO URL returned by services')\n\n  await openUrl(npm, sso, 'to complete your login please visit')\n\n  const username = await pollForSession({ registry, token, opts })\n\n  log.info('adduser', `Authorized user ${username}`)\n\n  const scopeMessage = scope ? ' to scope ' + scope : ''\n  const message = `Logged in as ${username}${scopeMessage} on ${registry}.`\n\n  return {\n    message,\n    newCreds: { token },\n  }\n}\n\nmodule.exports = login\n"]},"metadata":{},"sourceType":"script"}