{"ast":null,"code":"const opener = require('opener');\n\nconst {\n  URL\n} = require('url'); // attempt to open URL in web-browser, print address otherwise:\n\n\nconst open = async (npm, url, errMsg) => {\n  url = encodeURI(url);\n  const browser = npm.config.get('browser');\n\n  function printAlternateMsg() {\n    const json = npm.config.get('json');\n    const alternateMsg = json ? JSON.stringify({\n      title: errMsg,\n      url\n    }, null, 2) : `${errMsg}:\\n  ${url}\\n`;\n    npm.output(alternateMsg);\n  }\n\n  if (browser === false) {\n    printAlternateMsg();\n    return;\n  }\n\n  try {\n    if (!/^(https?|file):$/.test(new URL(url).protocol)) throw new Error();\n  } catch (_) {\n    throw new Error('Invalid URL: ' + url);\n  }\n\n  const command = browser === true ? null : browser;\n  await new Promise((resolve, reject) => {\n    opener(url, {\n      command\n    }, err => {\n      if (err) {\n        if (err.code === 'ENOENT') printAlternateMsg();else return reject(err);\n      }\n\n      return resolve();\n    });\n  });\n};\n\nmodule.exports = open;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/open-url.js"],"names":["opener","require","URL","open","npm","url","errMsg","encodeURI","browser","config","get","printAlternateMsg","json","alternateMsg","JSON","stringify","title","output","test","protocol","Error","_","command","Promise","resolve","reject","err","code","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAO,CAAC,KAAD,CAAvB,C,CAEA;;;AACA,MAAME,IAAI,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,MAAjB,KAA4B;AACvCD,EAAAA,GAAG,GAAGE,SAAS,CAACF,GAAD,CAAf;AACA,QAAMG,OAAO,GAAGJ,GAAG,CAACK,MAAJ,CAAWC,GAAX,CAAe,SAAf,CAAhB;;AAEA,WAASC,iBAAT,GAA8B;AAC5B,UAAMC,IAAI,GAAGR,GAAG,CAACK,MAAJ,CAAWC,GAAX,CAAe,MAAf,CAAb;AACA,UAAMG,YAAY,GAAGD,IAAI,GACrBE,IAAI,CAACC,SAAL,CAAe;AACfC,MAAAA,KAAK,EAAEV,MADQ;AAEfD,MAAAA;AAFe,KAAf,EAGC,IAHD,EAGO,CAHP,CADqB,GAKpB,GAAEC,MAAO,QAAOD,GAAI,IALzB;AAOAD,IAAAA,GAAG,CAACa,MAAJ,CAAWJ,YAAX;AACD;;AAED,MAAIL,OAAO,KAAK,KAAhB,EAAuB;AACrBG,IAAAA,iBAAiB;AACjB;AACD;;AAED,MAAI;AACF,QAAI,CAAC,mBAAmBO,IAAnB,CAAwB,IAAIhB,GAAJ,CAAQG,GAAR,EAAac,QAArC,CAAL,EACE,MAAM,IAAIC,KAAJ,EAAN;AACH,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,UAAM,IAAID,KAAJ,CAAU,kBAAkBf,GAA5B,CAAN;AACD;;AAED,QAAMiB,OAAO,GAAGd,OAAO,KAAK,IAAZ,GAAmB,IAAnB,GAA0BA,OAA1C;AACA,QAAM,IAAIe,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrCzB,IAAAA,MAAM,CAACK,GAAD,EAAM;AAAEiB,MAAAA;AAAF,KAAN,EAAoBI,GAAD,IAAS;AAChC,UAAIA,GAAJ,EAAS;AACP,YAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EACEhB,iBAAiB,GADnB,KAGE,OAAOc,MAAM,CAACC,GAAD,CAAb;AACH;;AACD,aAAOF,OAAO,EAAd;AACD,KARK,CAAN;AASD,GAVK,CAAN;AAWD,CAxCD;;AA0CAI,MAAM,CAACC,OAAP,GAAiB1B,IAAjB","sourcesContent":["const opener = require('opener')\n\nconst { URL } = require('url')\n\n// attempt to open URL in web-browser, print address otherwise:\nconst open = async (npm, url, errMsg) => {\n  url = encodeURI(url)\n  const browser = npm.config.get('browser')\n\n  function printAlternateMsg () {\n    const json = npm.config.get('json')\n    const alternateMsg = json\n      ? JSON.stringify({\n        title: errMsg,\n        url,\n      }, null, 2)\n      : `${errMsg}:\\n  ${url}\\n`\n\n    npm.output(alternateMsg)\n  }\n\n  if (browser === false) {\n    printAlternateMsg()\n    return\n  }\n\n  try {\n    if (!/^(https?|file):$/.test(new URL(url).protocol))\n      throw new Error()\n  } catch (_) {\n    throw new Error('Invalid URL: ' + url)\n  }\n\n  const command = browser === true ? null : browser\n  await new Promise((resolve, reject) => {\n    opener(url, { command }, (err) => {\n      if (err) {\n        if (err.code === 'ENOENT')\n          printAlternateMsg()\n        else\n          return reject(err)\n      }\n      return resolve()\n    })\n  })\n}\n\nmodule.exports = open\n"]},"metadata":{},"sourceType":"script"}