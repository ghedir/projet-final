{"ast":null,"code":"const {\n  relative\n} = require('path');\n\nconst npa = require('npm-package-arg');\n\nconst pkgContents = require('@npmcli/installed-package-contents');\n\nconst pacote = require('pacote');\n\nconst {\n  tarCreateOptions\n} = pacote.DirFetcher;\n\nconst tar = require('tar'); // returns a simplified tarball when reading files from node_modules folder,\n// thus avoiding running the prepare scripts and the extra logic from packlist\n\n\nconst nodeModulesTarball = (manifest, opts) => pkgContents({\n  path: manifest._resolved,\n  depth: 1\n}).then(files => files.map(file => relative(manifest._resolved, file))).then(files => tar.c(tarCreateOptions(manifest), files).concat());\n\nconst tarball = (manifest, opts) => {\n  const resolved = manifest._resolved;\n  const where = opts.where || process.cwd();\n  const fromNodeModules = npa(resolved).type === 'directory' && /node_modules[\\\\/](@[^\\\\/]+\\/)?[^\\\\/]+[\\\\/]?$/.test(relative(where, resolved));\n  if (fromNodeModules) return nodeModulesTarball(manifest, opts);\n  return pacote.tarball(manifest._resolved, opts);\n};\n\nmodule.exports = tarball;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/libnpmdiff/lib/tarball.js"],"names":["relative","require","npa","pkgContents","pacote","tarCreateOptions","DirFetcher","tar","nodeModulesTarball","manifest","opts","path","_resolved","depth","then","files","map","file","c","concat","tarball","resolved","where","process","cwd","fromNodeModules","type","test","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,MAAD,CAA5B;;AAEA,MAAMC,GAAG,GAAGD,OAAO,CAAC,iBAAD,CAAnB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,oCAAD,CAA3B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAuBD,MAAM,CAACE,UAApC;;AACA,MAAMC,GAAG,GAAGN,OAAO,CAAC,KAAD,CAAnB,C,CAEA;AACA;;;AACA,MAAMO,kBAAkB,GAAG,CAACC,QAAD,EAAWC,IAAX,KACzBP,WAAW,CAAC;AAAEQ,EAAAA,IAAI,EAAEF,QAAQ,CAACG,SAAjB;AAA4BC,EAAAA,KAAK,EAAE;AAAnC,CAAD,CAAX,CACGC,IADH,CACQC,KAAK,IACTA,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAIjB,QAAQ,CAACS,QAAQ,CAACG,SAAV,EAAqBK,IAArB,CAA1B,CAFJ,EAIGH,IAJH,CAIQC,KAAK,IACTR,GAAG,CAACW,CAAJ,CAAMb,gBAAgB,CAACI,QAAD,CAAtB,EAAkCM,KAAlC,EAAyCI,MAAzC,EALJ,CADF;;AASA,MAAMC,OAAO,GAAG,CAACX,QAAD,EAAWC,IAAX,KAAoB;AAClC,QAAMW,QAAQ,GAAGZ,QAAQ,CAACG,SAA1B;AACA,QAAMU,KAAK,GAAGZ,IAAI,CAACY,KAAL,IAAcC,OAAO,CAACC,GAAR,EAA5B;AAEA,QAAMC,eAAe,GAAGvB,GAAG,CAACmB,QAAD,CAAH,CAAcK,IAAd,KAAuB,WAAvB,IACnB,+CAA+CC,IAA/C,CAAoD3B,QAAQ,CAACsB,KAAD,EAAQD,QAAR,CAA5D,CADL;AAGA,MAAII,eAAJ,EACE,OAAOjB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,CAAzB;AAEF,SAAON,MAAM,CAACgB,OAAP,CAAeX,QAAQ,CAACG,SAAxB,EAAmCF,IAAnC,CAAP;AACD,CAXD;;AAaAkB,MAAM,CAACC,OAAP,GAAiBT,OAAjB","sourcesContent":["const { relative } = require('path')\n\nconst npa = require('npm-package-arg')\nconst pkgContents = require('@npmcli/installed-package-contents')\nconst pacote = require('pacote')\nconst { tarCreateOptions } = pacote.DirFetcher\nconst tar = require('tar')\n\n// returns a simplified tarball when reading files from node_modules folder,\n// thus avoiding running the prepare scripts and the extra logic from packlist\nconst nodeModulesTarball = (manifest, opts) =>\n  pkgContents({ path: manifest._resolved, depth: 1 })\n    .then(files =>\n      files.map(file => relative(manifest._resolved, file))\n    )\n    .then(files =>\n      tar.c(tarCreateOptions(manifest), files).concat()\n    )\n\nconst tarball = (manifest, opts) => {\n  const resolved = manifest._resolved\n  const where = opts.where || process.cwd()\n\n  const fromNodeModules = npa(resolved).type === 'directory'\n    && /node_modules[\\\\/](@[^\\\\/]+\\/)?[^\\\\/]+[\\\\/]?$/.test(relative(where, resolved))\n\n  if (fromNodeModules)\n    return nodeModulesTarball(manifest, opts)\n\n  return pacote.tarball(manifest._resolved, opts)\n}\n\nmodule.exports = tarball\n"]},"metadata":{},"sourceType":"script"}