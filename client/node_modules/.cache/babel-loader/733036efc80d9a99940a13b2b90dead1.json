{"ast":null,"code":"// don't expand so that we only assemble the set of defaults when needed\nconst configDefs = require('./utils/config/index.js');\n\nconst mkdirp = require('mkdirp-infer-owner');\n\nconst {\n  dirname\n} = require('path');\n\nconst {\n  promisify\n} = require('util');\n\nconst fs = require('fs');\n\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\n\nconst {\n  spawn\n} = require('child_process');\n\nconst {\n  EOL\n} = require('os');\n\nconst ini = require('ini');\n\nconst localeCompare = require('@isaacs/string-locale-compare')('en'); // take an array of `[key, value, k2=v2, k3, v3, ...]` and turn into\n// { key: value, k2: v2, k3: v3 }\n\n\nconst keyValues = args => {\n  const kv = {};\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i].split('=');\n    const key = arg.shift();\n    const val = arg.length ? arg.join('=') : i < args.length - 1 ? args[++i] : '';\n    kv[key.trim()] = val.trim();\n  }\n\n  return kv;\n};\n\nconst publicVar = k => !/^(\\/\\/[^:]+:)?_/.test(k);\n\nconst BaseCommand = require('./base-command.js');\n\nclass Config extends BaseCommand {\n  static get description() {\n    return 'Manage the npm configuration files';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'config';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['set <key>=<value> [<key>=<value> ...]', 'get [<key> [<key> ...]]', 'delete <key> [<key> ...]', 'list [--json]', 'edit'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['json', 'global', 'editor', 'location', 'long'];\n  }\n\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n    if (argv[1] !== 'config') argv.unshift('config');\n\n    if (argv.length === 2) {\n      const cmds = ['get', 'set', 'delete', 'ls', 'rm', 'edit'];\n      if (opts.partialWord !== 'l') cmds.push('list');\n      return cmds;\n    }\n\n    const action = argv[2];\n\n    switch (action) {\n      case 'set':\n        // todo: complete with valid values, if possible.\n        if (argv.length > 3) return [];\n      // fallthrough\n\n      /* eslint no-fallthrough:0 */\n\n      case 'get':\n      case 'delete':\n      case 'rm':\n        return Object.keys(configDefs.definitions);\n\n      case 'edit':\n      case 'list':\n      case 'ls':\n      default:\n        return [];\n    }\n  }\n\n  exec(args, cb) {\n    this.config(args).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.npm.log.warn('config', 'This command does not support workspaces.');\n    this.exec(args, cb);\n  }\n\n  async config([action, ...args]) {\n    this.npm.log.disableProgress();\n\n    try {\n      switch (action) {\n        case 'set':\n          await this.set(args);\n          break;\n\n        case 'get':\n          await this.get(args);\n          break;\n\n        case 'delete':\n        case 'rm':\n        case 'del':\n          await this.del(args);\n          break;\n\n        case 'list':\n        case 'ls':\n          await (this.npm.flatOptions.json ? this.listJson() : this.list());\n          break;\n\n        case 'edit':\n          await this.edit();\n          break;\n\n        default:\n          throw this.usageError();\n      }\n    } finally {\n      this.npm.log.enableProgress();\n    }\n  }\n\n  async set(args) {\n    if (!args.length) throw this.usageError();\n    const where = this.npm.flatOptions.location;\n\n    for (const [key, val] of Object.entries(keyValues(args))) {\n      this.npm.log.info('config', 'set %j %j', key, val);\n      this.npm.config.set(key, val || '', where);\n      if (!this.npm.config.validate(where)) this.npm.log.warn('config', 'omitting invalid config values');\n    }\n\n    await this.npm.config.save(where);\n  }\n\n  async get(keys) {\n    if (!keys.length) return this.list();\n    const out = [];\n\n    for (const key of keys) {\n      if (!publicVar(key)) throw `The ${key} option is protected, and cannot be retrieved in this way`;\n      const pref = keys.length > 1 ? `${key}=` : '';\n      out.push(pref + this.npm.config.get(key));\n    }\n\n    this.npm.output(out.join('\\n'));\n  }\n\n  async del(keys) {\n    if (!keys.length) throw this.usageError();\n    const where = this.npm.flatOptions.location;\n\n    for (const key of keys) this.npm.config.delete(key, where);\n\n    await this.npm.config.save(where);\n  }\n\n  async edit() {\n    const e = this.npm.flatOptions.editor;\n    const where = this.npm.flatOptions.location;\n    const file = this.npm.config.data.get(where).source; // save first, just to make sure it's synced up\n    // this also removes all the comments from the last time we edited it.\n\n    await this.npm.config.save(where);\n    const data = (await readFile(file, 'utf8').catch(() => '')).replace(/\\r\\n/g, '\\n');\n    const entries = Object.entries(configDefs.defaults);\n    const defData = entries.reduce((str, [key, val]) => {\n      const obj = {\n        [key]: val\n      };\n      const i = ini.stringify(obj).replace(/\\r\\n/g, '\\n') // normalizes output from ini.stringify\n      .replace(/\\n$/m, '').replace(/^/g, '; ').replace(/\\n/g, '\\n; ').split('\\n');\n      return str + '\\n' + i;\n    }, '');\n    const tmpData = `;;;;\n; npm ${where}config file: ${file}\n; this is a simple ini-formatted file\n; lines that start with semi-colons are comments\n; run \\`npm help 7 config\\` for documentation of the various options\n;\n; Configs like \\`@scope:registry\\` map a scope to a given registry url.\n;\n; Configs like \\`//<hostname>/:_authToken\\` are auth that is restricted\n; to the registry host specified.\n\n${data.split('\\n').sort(localeCompare).join('\\n').trim()}\n\n;;;;\n; all available options shown below with default values\n;;;;\n\n${defData}\n`.split('\\n').join(EOL);\n    await mkdirp(dirname(file));\n    await writeFile(file, tmpData, 'utf8');\n    await new Promise((resolve, reject) => {\n      const [bin, ...args] = e.split(/\\s+/);\n      const editor = spawn(bin, [...args, file], {\n        stdio: 'inherit'\n      });\n      editor.on('exit', code => {\n        if (code) return reject(new Error(`editor process exited with code: ${code}`));\n        return resolve();\n      });\n    });\n  }\n\n  async list() {\n    const msg = []; // long does not have a flattener\n\n    const long = this.npm.config.get('long');\n\n    for (const [where, {\n      data,\n      source\n    }] of this.npm.config.data.entries()) {\n      if (where === 'default' && !long) continue;\n      const keys = Object.keys(data).sort(localeCompare);\n      if (!keys.length) continue;\n      msg.push(`; \"${where}\" config from ${source}`, '');\n\n      for (const k of keys) {\n        const v = publicVar(k) ? JSON.stringify(data[k]) : '(protected)';\n        const src = this.npm.config.find(k);\n        const overridden = src !== where;\n        msg.push((overridden ? '; ' : '') + `${k} = ${v} ${overridden ? `; overridden by ${src}` : ''}`);\n      }\n\n      msg.push('');\n    }\n\n    if (!long) {\n      msg.push(`; node bin location = ${process.execPath}`, `; cwd = ${process.cwd()}`, `; HOME = ${process.env.HOME}`, '; Run `npm config ls -l` to show all defaults.');\n    }\n\n    this.npm.output(msg.join('\\n').trim());\n  }\n\n  async listJson() {\n    const publicConf = {};\n\n    for (const key in this.npm.config.list[0]) {\n      if (!publicVar(key)) continue;\n      publicConf[key] = this.npm.config.get(key);\n    }\n\n    this.npm.output(JSON.stringify(publicConf, null, 2));\n  }\n\n}\n\nmodule.exports = Config;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/config.js"],"names":["configDefs","require","mkdirp","dirname","promisify","fs","readFile","writeFile","spawn","EOL","ini","localeCompare","keyValues","args","kv","i","length","arg","split","key","shift","val","join","trim","publicVar","k","test","BaseCommand","Config","description","name","usage","params","completion","opts","argv","conf","remain","unshift","cmds","partialWord","push","action","Object","keys","definitions","exec","cb","config","then","catch","execWorkspaces","filters","npm","log","warn","disableProgress","set","get","del","flatOptions","json","listJson","list","edit","usageError","enableProgress","where","location","entries","info","validate","save","out","pref","output","delete","e","editor","file","data","source","replace","defaults","defData","reduce","str","obj","stringify","tmpData","sort","Promise","resolve","reject","bin","stdio","on","code","Error","msg","long","v","JSON","src","find","overridden","process","execPath","cwd","env","HOME","publicConf","module","exports"],"mappings":"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","sourcesContent":["// don't expand so that we only assemble the set of defaults when needed\nconst configDefs = require('./utils/config/index.js')\n\nconst mkdirp = require('mkdirp-infer-owner')\nconst { dirname } = require('path')\nconst { promisify } = require('util')\nconst fs = require('fs')\nconst readFile = promisify(fs.readFile)\nconst writeFile = promisify(fs.writeFile)\nconst { spawn } = require('child_process')\nconst { EOL } = require('os')\nconst ini = require('ini')\nconst localeCompare = require('@isaacs/string-locale-compare')('en')\n\n// take an array of `[key, value, k2=v2, k3, v3, ...]` and turn into\n// { key: value, k2: v2, k3: v3 }\nconst keyValues = args => {\n  const kv = {}\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i].split('=')\n    const key = arg.shift()\n    const val = arg.length ? arg.join('=')\n      : i < args.length - 1 ? args[++i]\n      : ''\n    kv[key.trim()] = val.trim()\n  }\n  return kv\n}\n\nconst publicVar = k => !/^(\\/\\/[^:]+:)?_/.test(k)\n\nconst BaseCommand = require('./base-command.js')\nclass Config extends BaseCommand {\n  static get description () {\n    return 'Manage the npm configuration files'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'config'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      'set <key>=<value> [<key>=<value> ...]',\n      'get [<key> [<key> ...]]',\n      'delete <key> [<key> ...]',\n      'list [--json]',\n      'edit',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'json',\n      'global',\n      'editor',\n      'location',\n      'long',\n    ]\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv[1] !== 'config')\n      argv.unshift('config')\n\n    if (argv.length === 2) {\n      const cmds = ['get', 'set', 'delete', 'ls', 'rm', 'edit']\n      if (opts.partialWord !== 'l')\n        cmds.push('list')\n\n      return cmds\n    }\n\n    const action = argv[2]\n    switch (action) {\n      case 'set':\n        // todo: complete with valid values, if possible.\n        if (argv.length > 3)\n          return []\n\n        // fallthrough\n        /* eslint no-fallthrough:0 */\n      case 'get':\n      case 'delete':\n      case 'rm':\n        return Object.keys(configDefs.definitions)\n      case 'edit':\n      case 'list':\n      case 'ls':\n      default:\n        return []\n    }\n  }\n\n  exec (args, cb) {\n    this.config(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.npm.log.warn('config', 'This command does not support workspaces.')\n    this.exec(args, cb)\n  }\n\n  async config ([action, ...args]) {\n    this.npm.log.disableProgress()\n    try {\n      switch (action) {\n        case 'set':\n          await this.set(args)\n          break\n        case 'get':\n          await this.get(args)\n          break\n        case 'delete':\n        case 'rm':\n        case 'del':\n          await this.del(args)\n          break\n        case 'list':\n        case 'ls':\n          await (this.npm.flatOptions.json ? this.listJson() : this.list())\n          break\n        case 'edit':\n          await this.edit()\n          break\n        default:\n          throw this.usageError()\n      }\n    } finally {\n      this.npm.log.enableProgress()\n    }\n  }\n\n  async set (args) {\n    if (!args.length)\n      throw this.usageError()\n\n    const where = this.npm.flatOptions.location\n    for (const [key, val] of Object.entries(keyValues(args))) {\n      this.npm.log.info('config', 'set %j %j', key, val)\n      this.npm.config.set(key, val || '', where)\n      if (!this.npm.config.validate(where))\n        this.npm.log.warn('config', 'omitting invalid config values')\n    }\n\n    await this.npm.config.save(where)\n  }\n\n  async get (keys) {\n    if (!keys.length)\n      return this.list()\n\n    const out = []\n    for (const key of keys) {\n      if (!publicVar(key))\n        throw `The ${key} option is protected, and cannot be retrieved in this way`\n\n      const pref = keys.length > 1 ? `${key}=` : ''\n      out.push(pref + this.npm.config.get(key))\n    }\n    this.npm.output(out.join('\\n'))\n  }\n\n  async del (keys) {\n    if (!keys.length)\n      throw this.usageError()\n\n    const where = this.npm.flatOptions.location\n    for (const key of keys)\n      this.npm.config.delete(key, where)\n    await this.npm.config.save(where)\n  }\n\n  async edit () {\n    const e = this.npm.flatOptions.editor\n    const where = this.npm.flatOptions.location\n    const file = this.npm.config.data.get(where).source\n\n    // save first, just to make sure it's synced up\n    // this also removes all the comments from the last time we edited it.\n    await this.npm.config.save(where)\n\n    const data = (\n      await readFile(file, 'utf8').catch(() => '')\n    ).replace(/\\r\\n/g, '\\n')\n    const entries = Object.entries(configDefs.defaults)\n    const defData = entries.reduce((str, [key, val]) => {\n      const obj = { [key]: val }\n      const i = ini.stringify(obj)\n        .replace(/\\r\\n/g, '\\n') // normalizes output from ini.stringify\n        .replace(/\\n$/m, '')\n        .replace(/^/g, '; ')\n        .replace(/\\n/g, '\\n; ')\n        .split('\\n')\n      return str + '\\n' + i\n    }, '')\n\n    const tmpData = `;;;;\n; npm ${where}config file: ${file}\n; this is a simple ini-formatted file\n; lines that start with semi-colons are comments\n; run \\`npm help 7 config\\` for documentation of the various options\n;\n; Configs like \\`@scope:registry\\` map a scope to a given registry url.\n;\n; Configs like \\`//<hostname>/:_authToken\\` are auth that is restricted\n; to the registry host specified.\n\n${data.split('\\n').sort(localeCompare).join('\\n').trim()}\n\n;;;;\n; all available options shown below with default values\n;;;;\n\n${defData}\n`.split('\\n').join(EOL)\n    await mkdirp(dirname(file))\n    await writeFile(file, tmpData, 'utf8')\n    await new Promise((resolve, reject) => {\n      const [bin, ...args] = e.split(/\\s+/)\n      const editor = spawn(bin, [...args, file], { stdio: 'inherit' })\n      editor.on('exit', (code) => {\n        if (code)\n          return reject(new Error(`editor process exited with code: ${code}`))\n        return resolve()\n      })\n    })\n  }\n\n  async list () {\n    const msg = []\n    // long does not have a flattener\n    const long = this.npm.config.get('long')\n    for (const [where, { data, source }] of this.npm.config.data.entries()) {\n      if (where === 'default' && !long)\n        continue\n\n      const keys = Object.keys(data).sort(localeCompare)\n      if (!keys.length)\n        continue\n\n      msg.push(`; \"${where}\" config from ${source}`, '')\n      for (const k of keys) {\n        const v = publicVar(k) ? JSON.stringify(data[k]) : '(protected)'\n        const src = this.npm.config.find(k)\n        const overridden = src !== where\n        msg.push((overridden ? '; ' : '') +\n          `${k} = ${v} ${overridden ? `; overridden by ${src}` : ''}`)\n      }\n      msg.push('')\n    }\n\n    if (!long) {\n      msg.push(\n        `; node bin location = ${process.execPath}`,\n        `; cwd = ${process.cwd()}`,\n        `; HOME = ${process.env.HOME}`,\n        '; Run `npm config ls -l` to show all defaults.'\n      )\n    }\n\n    this.npm.output(msg.join('\\n').trim())\n  }\n\n  async listJson () {\n    const publicConf = {}\n    for (const key in this.npm.config.list[0]) {\n      if (!publicVar(key))\n        continue\n\n      publicConf[key] = this.npm.config.get(key)\n    }\n    this.npm.output(JSON.stringify(publicConf, null, 2))\n  }\n}\n\nmodule.exports = Config\n"]},"metadata":{},"sourceType":"script"}