{"ast":null,"code":"'use strict';\n\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : '';\n\nconst maybeEncode = arg => arg ? encodeURIComponent(arg) : '';\n\nconst defaults = {\n  sshtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({\n    domain,\n    user,\n    project,\n    treepath,\n    committish\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({\n    type,\n    user,\n    project,\n    committish\n  }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    user,\n    project,\n    committish\n  }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    user,\n    project\n  }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n};\nconst gitHosts = {};\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: ({\n    auth,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5);\n\n    if (type && type !== 'tree') {\n      return;\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1);\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish\n    };\n  }\n});\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    if (['get'].includes(aux)) {\n      return;\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    const path = url.pathname.slice(1);\n\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return;\n    }\n\n    const segments = path.split('/');\n    let project = segments.pop();\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    const user = segments.join('/');\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    project,\n    committish,\n    path,\n    hashformat\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    user,\n    project,\n    committish,\n    path\n  }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({\n    type,\n    project,\n    committish\n  }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    project,\n    committish\n  }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    project\n  }) => `https://${domain}/${project}`,\n  gittemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    project,\n    committish\n  }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    if (aux === 'raw') {\n      return;\n    }\n\n    if (!project) {\n      if (!user) {\n        return;\n      }\n\n      project = user;\n      user = null;\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment);\n  }\n});\nconst names = Object.keys(gitHosts);\ngitHosts.byShortcut = {};\ngitHosts.byDomain = {};\n\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name;\n  gitHosts.byDomain[gitHosts[name].domain] = name;\n}\n\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}\n\nmodule.exports = gitHosts;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/hosted-git-info/git-host-info.js"],"names":["maybeJoin","args","every","arg","join","maybeEncode","encodeURIComponent","defaults","sshtemplate","domain","user","project","committish","sshurltemplate","browsetemplate","treepath","browsefiletemplate","path","fragment","hashformat","docstemplate","httpstemplate","auth","filetemplate","shortcuttemplate","type","pathtemplate","bugstemplate","formatHashFragment","gitHosts","github","Object","assign","protocols","gittemplate","tarballtemplate","extract","url","pathname","split","hash","slice","endsWith","bitbucket","aux","includes","gitlab","segments","pop","gist","names","keys","byShortcut","byDomain","name","toLowerCase","replace","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n}\n\nconst gitHosts = {}\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: ({ auth, user, project, committish, path }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  }\n})\n\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: ({ domain, project, committish }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, project, committish, path, hashformat }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) => `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  }\n})\n\nconst names = Object.keys(gitHosts)\ngitHosts.byShortcut = {}\ngitHosts.byDomain = {}\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name\n  gitHosts.byDomain[gitHosts[name].domain] = name\n}\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n\nmodule.exports = gitHosts\n"]},"metadata":{},"sourceType":"script"}