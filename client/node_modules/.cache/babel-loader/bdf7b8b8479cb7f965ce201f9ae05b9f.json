{"ast":null,"code":"const fs = require('fs');\n\nconst {\n  relative,\n  resolve\n} = require('path');\n\nconst mkdirp = require('mkdirp-infer-owner');\n\nconst initJson = require('init-package-json');\n\nconst npa = require('npm-package-arg');\n\nconst rpj = require('read-package-json-fast');\n\nconst libexec = require('libnpmexec');\n\nconst mapWorkspaces = require('@npmcli/map-workspaces');\n\nconst PackageJson = require('@npmcli/package-json');\n\nconst getLocationMsg = require('./exec/get-workspace-location-msg.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Init extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Create a package.json file';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['yes', 'force', 'workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'init';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[--force|-f|--yes|-y|--scope]', '<@scope> (same as `npx <@scope>/create`)', '[<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)'];\n  }\n\n  exec(args, cb) {\n    this.init(args).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.initWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async init(args) {\n    // npm exec style\n    if (args.length) return await this.execCreate({\n      args,\n      path: process.cwd()\n    }); // no args, uses classic init-package-json boilerplate\n\n    await this.template();\n  }\n\n  async initWorkspaces(args, filters) {\n    // reads package.json for the top-level folder first, by doing this we\n    // ensure the command throw if no package.json is found before trying\n    // to create a workspace package.json file or its folders\n    const pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'));\n\n    const wPath = filterArg => resolve(this.npm.localPrefix, filterArg); // npm-exec style, runs in the context of each workspace filter\n\n\n    if (args.length) {\n      for (const filterArg of filters) {\n        const path = wPath(filterArg);\n        await mkdirp(path);\n        await this.execCreate({\n          args,\n          path\n        });\n        await this.setWorkspace({\n          pkg,\n          workspacePath: path\n        });\n      }\n\n      return;\n    } // no args, uses classic init-package-json boilerplate\n\n\n    for (const filterArg of filters) {\n      const path = wPath(filterArg);\n      await mkdirp(path);\n      await this.template(path);\n      await this.setWorkspace({\n        pkg,\n        workspacePath: path\n      });\n    }\n  }\n\n  async execCreate({\n    args,\n    path\n  }) {\n    const [initerName, ...otherArgs] = args;\n    let packageName = initerName;\n    if (/^@[^/]+$/.test(initerName)) packageName = initerName + '/create';else {\n      const req = npa(initerName);\n\n      if (req.type === 'git' && req.hosted) {\n        const {\n          user,\n          project\n        } = req.hosted;\n        packageName = initerName.replace(user + '/' + project, user + '/create-' + project);\n      } else if (req.registry) {\n        packageName = req.name.replace(/^(@[^/]+\\/)?/, '$1create-');\n        if (req.rawSpec) packageName += '@' + req.rawSpec;\n      } else {\n        throw Object.assign(new Error('Unrecognized initializer: ' + initerName + '\\nFor more package binary executing power check out `npx`:' + '\\nhttps://www.npmjs.com/package/npx'), {\n          code: 'EUNSUPPORTED'\n        });\n      }\n    }\n    const newArgs = [packageName, ...otherArgs];\n    const {\n      color\n    } = this.npm.flatOptions;\n    const {\n      flatOptions,\n      localBin,\n      log,\n      globalBin\n    } = this.npm; // this function is definitely called.  But because of coverage map stuff\n    // it ends up both uncovered, and the coverage report doesn't even mention.\n    // the tests do assert that some output happens, so we know this line is\n    // being hit.\n\n    /* istanbul ignore next */\n\n    const output = (...outputArgs) => this.npm.output(...outputArgs);\n\n    const locationMsg = await getLocationMsg({\n      color,\n      path\n    });\n    const runPath = path;\n    const scriptShell = this.npm.config.get('script-shell') || undefined;\n    const yes = this.npm.config.get('yes');\n    await libexec({ ...flatOptions,\n      args: newArgs,\n      color,\n      localBin,\n      locationMsg,\n      log,\n      globalBin,\n      output,\n      path,\n      runPath,\n      scriptShell,\n      yes\n    });\n  }\n\n  async template(path = process.cwd()) {\n    this.npm.log.pause();\n    this.npm.log.disableProgress();\n    const initFile = this.npm.config.get('init-module');\n\n    if (!this.npm.config.get('yes') && !this.npm.config.get('force')) {\n      this.npm.output(['This utility will walk you through creating a package.json file.', 'It only covers the most common items, and tries to guess sensible defaults.', '', 'See `npm help init` for definitive documentation on these fields', 'and exactly what they do.', '', 'Use `npm install <pkg>` afterwards to install a package and', 'save it as a dependency in the package.json file.', '', 'Press ^C at any time to quit.'].join('\\n'));\n    } // XXX promisify init-package-json\n\n\n    await new Promise((res, rej) => {\n      initJson(path, initFile, this.npm.config, (er, data) => {\n        this.npm.log.resume();\n        this.npm.log.enableProgress();\n        this.npm.log.silly('package data', data);\n\n        if (er && er.message === 'canceled') {\n          this.npm.log.warn('init', 'canceled');\n          return res();\n        }\n\n        if (er) rej(er);else {\n          this.npm.log.info('init', 'written successfully');\n          res(data);\n        }\n      });\n    });\n  }\n\n  async setWorkspace({\n    pkg,\n    workspacePath\n  }) {\n    const workspaces = await mapWorkspaces({\n      cwd: this.npm.localPrefix,\n      pkg\n    }); // skip setting workspace if current package.json glob already satisfies it\n\n    for (const wPath of workspaces.values()) {\n      if (wPath === workspacePath) return;\n    } // if a create-pkg didn't generate a package.json at the workspace\n    // folder level, it might not be recognized as a workspace by\n    // mapWorkspaces, so we're just going to avoid touching the\n    // top-level package.json\n\n\n    try {\n      fs.statSync(resolve(workspacePath, 'package.json'));\n    } catch (err) {\n      return;\n    }\n\n    const pkgJson = await PackageJson.load(this.npm.localPrefix);\n    pkgJson.update({\n      workspaces: [...(pkgJson.content.workspaces || []), relative(this.npm.localPrefix, workspacePath)]\n    });\n    await pkgJson.save();\n  }\n\n}\n\nmodule.exports = Init;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/init.js"],"names":["fs","require","relative","resolve","mkdirp","initJson","npa","rpj","libexec","mapWorkspaces","PackageJson","getLocationMsg","BaseCommand","Init","description","params","name","usage","exec","args","cb","init","then","catch","execWorkspaces","filters","initWorkspaces","length","execCreate","path","process","cwd","template","pkg","npm","localPrefix","wPath","filterArg","setWorkspace","workspacePath","initerName","otherArgs","packageName","test","req","type","hosted","user","project","replace","registry","rawSpec","Object","assign","Error","code","newArgs","color","flatOptions","localBin","log","globalBin","output","outputArgs","locationMsg","runPath","scriptShell","config","get","undefined","yes","pause","disableProgress","initFile","join","Promise","res","rej","er","data","resume","enableProgress","silly","message","warn","info","workspaces","values","statSync","err","pkgJson","load","update","content","save","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst { relative, resolve } = require('path')\nconst mkdirp = require('mkdirp-infer-owner')\nconst initJson = require('init-package-json')\nconst npa = require('npm-package-arg')\nconst rpj = require('read-package-json-fast')\nconst libexec = require('libnpmexec')\nconst mapWorkspaces = require('@npmcli/map-workspaces')\nconst PackageJson = require('@npmcli/package-json')\n\nconst getLocationMsg = require('./exec/get-workspace-location-msg.js')\nconst BaseCommand = require('./base-command.js')\n\nclass Init extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Create a package.json file'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['yes', 'force', 'workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'init'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      '[--force|-f|--yes|-y|--scope]',\n      '<@scope> (same as `npx <@scope>/create`)',\n      '[<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)',\n    ]\n  }\n\n  exec (args, cb) {\n    this.init(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.initWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async init (args) {\n    // npm exec style\n    if (args.length)\n      return (await this.execCreate({ args, path: process.cwd() }))\n\n    // no args, uses classic init-package-json boilerplate\n    await this.template()\n  }\n\n  async initWorkspaces (args, filters) {\n    // reads package.json for the top-level folder first, by doing this we\n    // ensure the command throw if no package.json is found before trying\n    // to create a workspace package.json file or its folders\n    const pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'))\n    const wPath = filterArg => resolve(this.npm.localPrefix, filterArg)\n\n    // npm-exec style, runs in the context of each workspace filter\n    if (args.length) {\n      for (const filterArg of filters) {\n        const path = wPath(filterArg)\n        await mkdirp(path)\n        await this.execCreate({ args, path })\n        await this.setWorkspace({ pkg, workspacePath: path })\n      }\n      return\n    }\n\n    // no args, uses classic init-package-json boilerplate\n    for (const filterArg of filters) {\n      const path = wPath(filterArg)\n      await mkdirp(path)\n      await this.template(path)\n      await this.setWorkspace({ pkg, workspacePath: path })\n    }\n  }\n\n  async execCreate ({ args, path }) {\n    const [initerName, ...otherArgs] = args\n    let packageName = initerName\n\n    if (/^@[^/]+$/.test(initerName))\n      packageName = initerName + '/create'\n    else {\n      const req = npa(initerName)\n      if (req.type === 'git' && req.hosted) {\n        const { user, project } = req.hosted\n        packageName = initerName\n          .replace(user + '/' + project, user + '/create-' + project)\n      } else if (req.registry) {\n        packageName = req.name.replace(/^(@[^/]+\\/)?/, '$1create-')\n        if (req.rawSpec)\n          packageName += '@' + req.rawSpec\n      } else {\n        throw Object.assign(new Error(\n          'Unrecognized initializer: ' + initerName +\n          '\\nFor more package binary executing power check out `npx`:' +\n          '\\nhttps://www.npmjs.com/package/npx'\n        ), { code: 'EUNSUPPORTED' })\n      }\n    }\n\n    const newArgs = [packageName, ...otherArgs]\n    const { color } = this.npm.flatOptions\n    const {\n      flatOptions,\n      localBin,\n      log,\n      globalBin,\n    } = this.npm\n    // this function is definitely called.  But because of coverage map stuff\n    // it ends up both uncovered, and the coverage report doesn't even mention.\n    // the tests do assert that some output happens, so we know this line is\n    // being hit.\n    /* istanbul ignore next */\n    const output = (...outputArgs) => this.npm.output(...outputArgs)\n    const locationMsg = await getLocationMsg({ color, path })\n    const runPath = path\n    const scriptShell = this.npm.config.get('script-shell') || undefined\n    const yes = this.npm.config.get('yes')\n\n    await libexec({\n      ...flatOptions,\n      args: newArgs,\n      color,\n      localBin,\n      locationMsg,\n      log,\n      globalBin,\n      output,\n      path,\n      runPath,\n      scriptShell,\n      yes,\n    })\n  }\n\n  async template (path = process.cwd()) {\n    this.npm.log.pause()\n    this.npm.log.disableProgress()\n\n    const initFile = this.npm.config.get('init-module')\n    if (!this.npm.config.get('yes') && !this.npm.config.get('force')) {\n      this.npm.output([\n        'This utility will walk you through creating a package.json file.',\n        'It only covers the most common items, and tries to guess sensible defaults.',\n        '',\n        'See `npm help init` for definitive documentation on these fields',\n        'and exactly what they do.',\n        '',\n        'Use `npm install <pkg>` afterwards to install a package and',\n        'save it as a dependency in the package.json file.',\n        '',\n        'Press ^C at any time to quit.',\n      ].join('\\n'))\n    }\n\n    // XXX promisify init-package-json\n    await new Promise((res, rej) => {\n      initJson(path, initFile, this.npm.config, (er, data) => {\n        this.npm.log.resume()\n        this.npm.log.enableProgress()\n        this.npm.log.silly('package data', data)\n        if (er && er.message === 'canceled') {\n          this.npm.log.warn('init', 'canceled')\n          return res()\n        }\n        if (er)\n          rej(er)\n        else {\n          this.npm.log.info('init', 'written successfully')\n          res(data)\n        }\n      })\n    })\n  }\n\n  async setWorkspace ({ pkg, workspacePath }) {\n    const workspaces = await mapWorkspaces({ cwd: this.npm.localPrefix, pkg })\n\n    // skip setting workspace if current package.json glob already satisfies it\n    for (const wPath of workspaces.values()) {\n      if (wPath === workspacePath)\n        return\n    }\n\n    // if a create-pkg didn't generate a package.json at the workspace\n    // folder level, it might not be recognized as a workspace by\n    // mapWorkspaces, so we're just going to avoid touching the\n    // top-level package.json\n    try {\n      fs.statSync(resolve(workspacePath, 'package.json'))\n    } catch (err) {\n      return\n    }\n\n    const pkgJson = await PackageJson.load(this.npm.localPrefix)\n\n    pkgJson.update({\n      workspaces: [\n        ...(pkgJson.content.workspaces || []),\n        relative(this.npm.localPrefix, workspacePath),\n      ],\n    })\n\n    await pkgJson.save()\n  }\n}\n\nmodule.exports = Init\n"]},"metadata":{},"sourceType":"script"}