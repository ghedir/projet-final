{"ast":null,"code":"const {\n  parse,\n  sep,\n  normalize: norm\n} = require('path');\n\nfunction* commonArrayMembers(a, b) {\n  const [l, s] = a.length > b.length ? [a, b] : [b, a];\n\n  for (const x of s) {\n    if (x === l.shift()) yield x;else break;\n  }\n}\n\nconst commonAncestorPath = (a, b) => a === b ? a : parse(a).root !== parse(b).root ? null : [...commonArrayMembers(norm(a).split(sep), norm(b).split(sep))].join(sep);\n\nmodule.exports = (...paths) => paths.reduce(commonAncestorPath);","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/common-ancestor-path/index.js"],"names":["parse","sep","normalize","norm","require","commonArrayMembers","a","b","l","s","length","x","shift","commonAncestorPath","root","split","join","module","exports","paths","reduce"],"mappings":"AAAA,MAAM;AAACA,EAAAA,KAAD;AAAQC,EAAAA,GAAR;AAAaC,EAAAA,SAAS,EAAEC;AAAxB,IAAgCC,OAAO,CAAC,MAAD,CAA7C;;AAEA,UAAUC,kBAAV,CAA8BC,CAA9B,EAAiCC,CAAjC,EAAoC;AAClC,QAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,CAAC,CAACI,MAAF,GAAWH,CAAC,CAACG,MAAb,GAAsB,CAACJ,CAAD,EAAIC,CAAJ,CAAtB,GAA+B,CAACA,CAAD,EAAID,CAAJ,CAA9C;;AACA,OAAK,MAAMK,CAAX,IAAgBF,CAAhB,EAAmB;AACjB,QAAIE,CAAC,KAAKH,CAAC,CAACI,KAAF,EAAV,EACE,MAAMD,CAAN,CADF,KAGE;AACH;AACF;;AAED,MAAME,kBAAkB,GAAG,CAACP,CAAD,EAAIC,CAAJ,KAAUD,CAAC,KAAKC,CAAN,GAAUD,CAAV,GACjCN,KAAK,CAACM,CAAD,CAAL,CAASQ,IAAT,KAAkBd,KAAK,CAACO,CAAD,CAAL,CAASO,IAA3B,GAAkC,IAAlC,GACA,CAAC,GAAGT,kBAAkB,CAACF,IAAI,CAACG,CAAD,CAAJ,CAAQS,KAAR,CAAcd,GAAd,CAAD,EAAqBE,IAAI,CAACI,CAAD,CAAJ,CAAQQ,KAAR,CAAcd,GAAd,CAArB,CAAtB,EAAgEe,IAAhE,CAAqEf,GAArE,CAFJ;;AAIAgB,MAAM,CAACC,OAAP,GAAiB,CAAC,GAAGC,KAAJ,KAAcA,KAAK,CAACC,MAAN,CAAaP,kBAAb,CAA/B","sourcesContent":["const {parse, sep, normalize: norm} = require('path')\n\nfunction* commonArrayMembers (a, b) {\n  const [l, s] = a.length > b.length ? [a, b] : [b, a]\n  for (const x of s) {\n    if (x === l.shift())\n      yield x\n    else\n      break\n  }\n}\n\nconst commonAncestorPath = (a, b) => a === b ? a\n  : parse(a).root !== parse(b).root ? null\n  : [...commonArrayMembers(norm(a).split(sep), norm(b).split(sep))].join(sep)\n\nmodule.exports = (...paths) => paths.reduce(commonAncestorPath)\n"]},"metadata":{},"sourceType":"script"}