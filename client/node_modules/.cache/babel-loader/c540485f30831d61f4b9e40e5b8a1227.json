{"ast":null,"code":"// print an error or just nothing if the audit report has an error\n// this is called by the audit command, and by the reify-output util\n// prints a JSON version of the error if it's --json\n// returns 'true' if there was an error, false otherwise\nconst auditError = (npm, report) => {\n  if (!report || !report.error) return false;\n  if (npm.command !== 'audit') return true;\n  const {\n    error\n  } = report; // ok, we care about it, then\n\n  npm.log.warn('audit', error.message);\n  const {\n    body: errBody\n  } = error;\n  const body = Buffer.isBuffer(errBody) ? errBody.toString() : errBody;\n\n  if (npm.flatOptions.json) {\n    npm.output(JSON.stringify({\n      message: error.message,\n      method: error.method,\n      uri: error.uri,\n      headers: error.headers,\n      statusCode: error.statusCode,\n      body\n    }, null, 2));\n  } else npm.output(body);\n\n  throw 'audit endpoint returned an error';\n};\n\nmodule.exports = auditError;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/audit-error.js"],"names":["auditError","npm","report","error","command","log","warn","message","body","errBody","Buffer","isBuffer","toString","flatOptions","json","output","JSON","stringify","method","uri","headers","statusCode","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,MAAMA,UAAU,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAClC,MAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,KAAvB,EACE,OAAO,KAAP;AAEF,MAAIF,GAAG,CAACG,OAAJ,KAAgB,OAApB,EACE,OAAO,IAAP;AAEF,QAAM;AAAED,IAAAA;AAAF,MAAYD,MAAlB,CAPkC,CASlC;;AACAD,EAAAA,GAAG,CAACI,GAAJ,CAAQC,IAAR,CAAa,OAAb,EAAsBH,KAAK,CAACI,OAA5B;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAoBN,KAA1B;AACA,QAAMK,IAAI,GAAGE,MAAM,CAACC,QAAP,CAAgBF,OAAhB,IAA2BA,OAAO,CAACG,QAAR,EAA3B,GAAgDH,OAA7D;;AACA,MAAIR,GAAG,CAACY,WAAJ,CAAgBC,IAApB,EAA0B;AACxBb,IAAAA,GAAG,CAACc,MAAJ,CAAWC,IAAI,CAACC,SAAL,CAAe;AACxBV,MAAAA,OAAO,EAAEJ,KAAK,CAACI,OADS;AAExBW,MAAAA,MAAM,EAAEf,KAAK,CAACe,MAFU;AAGxBC,MAAAA,GAAG,EAAEhB,KAAK,CAACgB,GAHa;AAIxBC,MAAAA,OAAO,EAAEjB,KAAK,CAACiB,OAJS;AAKxBC,MAAAA,UAAU,EAAElB,KAAK,CAACkB,UALM;AAMxBb,MAAAA;AANwB,KAAf,EAOR,IAPQ,EAOF,CAPE,CAAX;AAQD,GATD,MAUEP,GAAG,CAACc,MAAJ,CAAWP,IAAX;;AAEF,QAAM,kCAAN;AACD,CA1BD;;AA4BAc,MAAM,CAACC,OAAP,GAAiBvB,UAAjB","sourcesContent":["// print an error or just nothing if the audit report has an error\n// this is called by the audit command, and by the reify-output util\n// prints a JSON version of the error if it's --json\n// returns 'true' if there was an error, false otherwise\n\nconst auditError = (npm, report) => {\n  if (!report || !report.error)\n    return false\n\n  if (npm.command !== 'audit')\n    return true\n\n  const { error } = report\n\n  // ok, we care about it, then\n  npm.log.warn('audit', error.message)\n  const { body: errBody } = error\n  const body = Buffer.isBuffer(errBody) ? errBody.toString() : errBody\n  if (npm.flatOptions.json) {\n    npm.output(JSON.stringify({\n      message: error.message,\n      method: error.method,\n      uri: error.uri,\n      headers: error.headers,\n      statusCode: error.statusCode,\n      body,\n    }, null, 2))\n  } else\n    npm.output(body)\n\n  throw 'audit endpoint returned an error'\n}\n\nmodule.exports = auditError\n"]},"metadata":{},"sourceType":"script"}