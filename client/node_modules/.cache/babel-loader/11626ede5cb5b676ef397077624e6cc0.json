{"ast":null,"code":"// take a path and a resolved value, and turn it into a resolution from\n// the given new path.  This is used with converting a package.json's\n// relative file: path into one suitable for a lockfile, or between\n// lockfiles, and for converting hosted git repos to a consistent url type.\nconst npa = require('npm-package-arg');\n\nconst relpath = require('./relpath.js');\n\nconst consistentResolve = (resolved, fromPath, toPath, relPaths = false) => {\n  if (!resolved) {\n    return null;\n  }\n\n  try {\n    const hostedOpt = {\n      noCommittish: false\n    };\n    const {\n      fetchSpec,\n      saveSpec,\n      type,\n      hosted,\n      rawSpec,\n      raw\n    } = npa(resolved, fromPath);\n    const isPath = type === 'file' || type === 'directory';\n    return isPath && !relPaths ? `file:${fetchSpec}` : isPath ? 'file:' + (toPath ? relpath(toPath, fetchSpec) : fetchSpec) : hosted ? `git+${hosted.auth ? hosted.https(hostedOpt) : hosted.sshurl(hostedOpt)}` : type === 'git' ? saveSpec // always return something.  'foo' is interpreted as 'foo@' otherwise.\n    : rawSpec === '' && raw.slice(-1) !== '@' ? raw // just strip off the name, but otherwise return as-is\n    : rawSpec;\n  } catch (_) {\n    // whatever we passed in was not acceptable to npa.\n    // leave it 100% untouched.\n    return resolved;\n  }\n};\n\nmodule.exports = consistentResolve;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/arborist/lib/consistent-resolve.js"],"names":["npa","require","relpath","consistentResolve","resolved","fromPath","toPath","relPaths","hostedOpt","noCommittish","fetchSpec","saveSpec","type","hosted","rawSpec","raw","isPath","auth","https","sshurl","slice","_","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAME,iBAAiB,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,MAArB,EAA6BC,QAAQ,GAAG,KAAxC,KAAkD;AAC1E,MAAI,CAACH,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AAED,MAAI;AACF,UAAMI,SAAS,GAAG;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAlB;AACA,UAAM;AACJC,MAAAA,SADI;AAEJC,MAAAA,QAFI;AAGJC,MAAAA,IAHI;AAIJC,MAAAA,MAJI;AAKJC,MAAAA,OALI;AAMJC,MAAAA;AANI,QAOFf,GAAG,CAACI,QAAD,EAAWC,QAAX,CAPP;AAQA,UAAMW,MAAM,GAAGJ,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,WAA3C;AACA,WAAOI,MAAM,IAAI,CAACT,QAAX,GAAuB,QAAOG,SAAU,EAAxC,GACHM,MAAM,GAAG,WAAWV,MAAM,GAAGJ,OAAO,CAACI,MAAD,EAASI,SAAT,CAAV,GAAgCA,SAAjD,CAAH,GACNG,MAAM,GAAI,OACVA,MAAM,CAACI,IAAP,GAAcJ,MAAM,CAACK,KAAP,CAAaV,SAAb,CAAd,GAAwCK,MAAM,CAACM,MAAP,CAAcX,SAAd,CACzC,EAFO,GAGNI,IAAI,KAAK,KAAT,GAAiBD,QAAjB,CACF;AADE,MAEAG,OAAO,KAAK,EAAZ,IAAkBC,GAAG,CAACK,KAAJ,CAAU,CAAC,CAAX,MAAkB,GAApC,GAA0CL,GAA1C,CACF;AADE,MAEAD,OATJ;AAUD,GArBD,CAqBE,OAAOO,CAAP,EAAU;AACV;AACA;AACA,WAAOjB,QAAP;AACD;AACF,CA/BD;;AAgCAkB,MAAM,CAACC,OAAP,GAAiBpB,iBAAjB","sourcesContent":["// take a path and a resolved value, and turn it into a resolution from\n// the given new path.  This is used with converting a package.json's\n// relative file: path into one suitable for a lockfile, or between\n// lockfiles, and for converting hosted git repos to a consistent url type.\nconst npa = require('npm-package-arg')\nconst relpath = require('./relpath.js')\nconst consistentResolve = (resolved, fromPath, toPath, relPaths = false) => {\n  if (!resolved) {\n    return null\n  }\n\n  try {\n    const hostedOpt = { noCommittish: false }\n    const {\n      fetchSpec,\n      saveSpec,\n      type,\n      hosted,\n      rawSpec,\n      raw,\n    } = npa(resolved, fromPath)\n    const isPath = type === 'file' || type === 'directory'\n    return isPath && !relPaths ? `file:${fetchSpec}`\n      : isPath ? 'file:' + (toPath ? relpath(toPath, fetchSpec) : fetchSpec)\n      : hosted ? `git+${\n        hosted.auth ? hosted.https(hostedOpt) : hosted.sshurl(hostedOpt)\n      }`\n      : type === 'git' ? saveSpec\n      // always return something.  'foo' is interpreted as 'foo@' otherwise.\n      : rawSpec === '' && raw.slice(-1) !== '@' ? raw\n      // just strip off the name, but otherwise return as-is\n      : rawSpec\n  } catch (_) {\n    // whatever we passed in was not acceptable to npa.\n    // leave it 100% untouched.\n    return resolved\n  }\n}\nmodule.exports = consistentResolve\n"]},"metadata":{},"sourceType":"script"}