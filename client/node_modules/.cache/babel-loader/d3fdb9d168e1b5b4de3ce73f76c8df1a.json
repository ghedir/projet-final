{"ast":null,"code":"const Arborist = require('@npmcli/arborist');\n\nconst auditReport = require('npm-audit-report');\n\nconst reifyFinish = require('./utils/reify-finish.js');\n\nconst auditError = require('./utils/audit-error.js');\n\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\n\nclass Audit extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Run a security audit';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'audit';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['audit-level', 'dry-run', 'force', 'json', 'package-lock-only', 'omit', ...super.params];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[fix]'];\n  }\n\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n    if (argv.length === 2) return ['fix'];\n\n    switch (argv[2]) {\n      case 'fix':\n        return [];\n\n      default:\n        throw new Error(argv[2] + ' not recognized');\n    }\n  }\n\n  exec(args, cb) {\n    this.audit(args).then(() => cb()).catch(cb);\n  }\n\n  async audit(args) {\n    const reporter = this.npm.config.get('json') ? 'json' : 'detail';\n    const opts = { ...this.npm.flatOptions,\n      audit: true,\n      path: this.npm.prefix,\n      reporter,\n      workspaces: this.workspaceNames\n    };\n    const arb = new Arborist(opts);\n    const fix = args[0] === 'fix';\n    await arb.audit({\n      fix\n    });\n    if (fix) await reifyFinish(this.npm, arb);else {\n      // will throw if there's an error, because this is an audit command\n      auditError(this.npm, arb.auditReport);\n      const result = auditReport(arb.auditReport, opts);\n      process.exitCode = process.exitCode || result.exitCode;\n      this.npm.output(result.report);\n    }\n  }\n\n}\n\nmodule.exports = Audit;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/audit.js"],"names":["Arborist","require","auditReport","reifyFinish","auditError","ArboristWorkspaceCmd","Audit","description","name","params","usage","completion","opts","argv","conf","remain","length","Error","exec","args","cb","audit","then","catch","reporter","npm","config","get","flatOptions","path","prefix","workspaces","workspaceNames","arb","fix","result","process","exitCode","output","report","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,kBAAD,CAA3B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,8BAAD,CAApC;;AAEA,MAAMK,KAAN,SAAoBD,oBAApB,CAAyC;AACvC;AACsB,aAAXE,WAAW,GAAI;AACxB,WAAO,sBAAP;AACD;AAED;;;AACe,aAAJC,IAAI,GAAI;AACjB,WAAO,OAAP;AACD;AAED;;;AACiB,aAANC,MAAM,GAAI;AACnB,WAAO,CACL,aADK,EAEL,SAFK,EAGL,OAHK,EAIL,MAJK,EAKL,mBALK,EAML,MANK,EAOL,GAAG,MAAMA,MAPJ,CAAP;AASD;AAED;;;AACgB,aAALC,KAAK,GAAI;AAClB,WAAO,CAAC,OAAD,CAAP;AACD;;AAEe,QAAVC,UAAU,CAAEC,IAAF,EAAQ;AACtB,UAAMC,IAAI,GAAGD,IAAI,CAACE,IAAL,CAAUD,IAAV,CAAeE,MAA5B;AAEA,QAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EACE,OAAO,CAAC,KAAD,CAAP;;AAEF,YAAQH,IAAI,CAAC,CAAD,CAAZ;AACE,WAAK,KAAL;AACE,eAAO,EAAP;;AACF;AACE,cAAM,IAAII,KAAJ,CAAUJ,IAAI,CAAC,CAAD,CAAJ,GAAU,iBAApB,CAAN;AAJJ;AAMD;;AAEDK,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,KAAL,CAAWF,IAAX,EAAiBG,IAAjB,CAAsB,MAAMF,EAAE,EAA9B,EAAkCG,KAAlC,CAAwCH,EAAxC;AACD;;AAEU,QAALC,KAAK,CAAEF,IAAF,EAAQ;AACjB,UAAMK,QAAQ,GAAG,KAAKC,GAAL,CAASC,MAAT,CAAgBC,GAAhB,CAAoB,MAApB,IAA8B,MAA9B,GAAuC,QAAxD;AACA,UAAMf,IAAI,GAAG,EACX,GAAG,KAAKa,GAAL,CAASG,WADD;AAEXP,MAAAA,KAAK,EAAE,IAFI;AAGXQ,MAAAA,IAAI,EAAE,KAAKJ,GAAL,CAASK,MAHJ;AAIXN,MAAAA,QAJW;AAKXO,MAAAA,UAAU,EAAE,KAAKC;AALN,KAAb;AAQA,UAAMC,GAAG,GAAG,IAAIjC,QAAJ,CAAaY,IAAb,CAAZ;AACA,UAAMsB,GAAG,GAAGf,IAAI,CAAC,CAAD,CAAJ,KAAY,KAAxB;AACA,UAAMc,GAAG,CAACZ,KAAJ,CAAU;AAAEa,MAAAA;AAAF,KAAV,CAAN;AACA,QAAIA,GAAJ,EACE,MAAM/B,WAAW,CAAC,KAAKsB,GAAN,EAAWQ,GAAX,CAAjB,CADF,KAEK;AACH;AACA7B,MAAAA,UAAU,CAAC,KAAKqB,GAAN,EAAWQ,GAAG,CAAC/B,WAAf,CAAV;AACA,YAAMiC,MAAM,GAAGjC,WAAW,CAAC+B,GAAG,CAAC/B,WAAL,EAAkBU,IAAlB,CAA1B;AACAwB,MAAAA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,IAAoBF,MAAM,CAACE,QAA9C;AACA,WAAKZ,GAAL,CAASa,MAAT,CAAgBH,MAAM,CAACI,MAAvB;AACD;AACF;;AArEsC;;AAwEzCC,MAAM,CAACC,OAAP,GAAiBnC,KAAjB","sourcesContent":["const Arborist = require('@npmcli/arborist')\nconst auditReport = require('npm-audit-report')\nconst reifyFinish = require('./utils/reify-finish.js')\nconst auditError = require('./utils/audit-error.js')\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\n\nclass Audit extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Run a security audit'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'audit'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'audit-level',\n      'dry-run',\n      'force',\n      'json',\n      'package-lock-only',\n      'omit',\n      ...super.params,\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[fix]']\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n\n    if (argv.length === 2)\n      return ['fix']\n\n    switch (argv[2]) {\n      case 'fix':\n        return []\n      default:\n        throw new Error(argv[2] + ' not recognized')\n    }\n  }\n\n  exec (args, cb) {\n    this.audit(args).then(() => cb()).catch(cb)\n  }\n\n  async audit (args) {\n    const reporter = this.npm.config.get('json') ? 'json' : 'detail'\n    const opts = {\n      ...this.npm.flatOptions,\n      audit: true,\n      path: this.npm.prefix,\n      reporter,\n      workspaces: this.workspaceNames,\n    }\n\n    const arb = new Arborist(opts)\n    const fix = args[0] === 'fix'\n    await arb.audit({ fix })\n    if (fix)\n      await reifyFinish(this.npm, arb)\n    else {\n      // will throw if there's an error, because this is an audit command\n      auditError(this.npm, arb.auditReport)\n      const result = auditReport(arb.auditReport, opts)\n      process.exitCode = process.exitCode || result.exitCode\n      this.npm.output(result.report)\n    }\n  }\n}\n\nmodule.exports = Audit\n"]},"metadata":{},"sourceType":"script"}