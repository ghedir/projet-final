{"ast":null,"code":"var util = require('util');\n\nmodule.exports = util && util.debuglog || debuglog;\nvar debugs = {};\nvar debugEnviron = process.env.NODE_DEBUG || '';\n\nfunction debuglog(set) {\n  set = set.toUpperCase();\n\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n\n      debugs[set] = function () {\n        var msg = util.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function () {};\n    }\n  }\n\n  return debugs[set];\n}\n\n;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/debuglog/debuglog.js"],"names":["util","require","module","exports","debuglog","debugs","debugEnviron","process","env","NODE_DEBUG","set","toUpperCase","RegExp","test","pid","msg","format","apply","arguments","console","error"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAkBH,IAAI,IAAIA,IAAI,CAACI,QAAd,IAA2BA,QAA5C;AAEA,IAAIC,MAAM,GAAG,EAAb;AACA,IAAIC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAAZ,IAA0B,EAA7C;;AAEA,SAASL,QAAT,CAAkBM,GAAlB,EAAuB;AACrBA,EAAAA,GAAG,GAAGA,GAAG,CAACC,WAAJ,EAAN;;AACA,MAAI,CAACN,MAAM,CAACK,GAAD,CAAX,EAAkB;AAChB,QAAI,IAAIE,MAAJ,CAAW,QAAQF,GAAR,GAAc,KAAzB,EAAgC,GAAhC,EAAqCG,IAArC,CAA0CP,YAA1C,CAAJ,EAA6D;AAC3D,UAAIQ,GAAG,GAAGP,OAAO,CAACO,GAAlB;;AACAT,MAAAA,MAAM,CAACK,GAAD,CAAN,GAAc,YAAW;AACvB,YAAIK,GAAG,GAAGf,IAAI,CAACgB,MAAL,CAAYC,KAAZ,CAAkBd,OAAlB,EAA2Be,SAA3B,CAAV;AACAC,QAAAA,OAAO,CAACC,KAAR,CAAc,WAAd,EAA2BV,GAA3B,EAAgCI,GAAhC,EAAqCC,GAArC;AACD,OAHD;AAID,KAND,MAMO;AACLV,MAAAA,MAAM,CAACK,GAAD,CAAN,GAAc,YAAW,CAAE,CAA3B;AACD;AACF;;AACD,SAAOL,MAAM,CAACK,GAAD,CAAb;AACD;;AAAA","sourcesContent":["var util = require('util');\n\nmodule.exports = (util && util.debuglog) || debuglog;\n\nvar debugs = {};\nvar debugEnviron = process.env.NODE_DEBUG || '';\n\nfunction debuglog(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = util.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n"]},"metadata":{},"sourceType":"script"}