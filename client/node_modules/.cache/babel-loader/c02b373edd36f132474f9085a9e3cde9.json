{"ast":null,"code":"const envPath = require('./utils/path.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Bin extends BaseCommand {\n  static get description() {\n    return 'Display npm bin folder';\n  }\n\n  static get name() {\n    return 'bin';\n  }\n\n  static get params() {\n    return ['global'];\n  }\n\n  exec(args, cb) {\n    this.bin(args).then(() => cb()).catch(cb);\n  }\n\n  async bin(args) {\n    const b = this.npm.bin;\n    this.npm.output(b);\n    if (this.npm.config.get('global') && !envPath.includes(b)) console.error('(not in PATH env variable)');\n  }\n\n}\n\nmodule.exports = Bin;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/bin.js"],"names":["envPath","require","BaseCommand","Bin","description","name","params","exec","args","cb","bin","then","catch","b","npm","output","config","get","includes","console","error","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,mBAAD,CAA3B;;AAEA,MAAME,GAAN,SAAkBD,WAAlB,CAA8B;AACN,aAAXE,WAAW,GAAI;AACxB,WAAO,wBAAP;AACD;;AAEc,aAAJC,IAAI,GAAI;AACjB,WAAO,KAAP;AACD;;AAEgB,aAANC,MAAM,GAAI;AACnB,WAAO,CAAC,QAAD,CAAP;AACD;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,GAAL,CAASF,IAAT,EAAeG,IAAf,CAAoB,MAAMF,EAAE,EAA5B,EAAgCG,KAAhC,CAAsCH,EAAtC;AACD;;AAEQ,QAAHC,GAAG,CAAEF,IAAF,EAAQ;AACf,UAAMK,CAAC,GAAG,KAAKC,GAAL,CAASJ,GAAnB;AACA,SAAKI,GAAL,CAASC,MAAT,CAAgBF,CAAhB;AACA,QAAI,KAAKC,GAAL,CAASE,MAAT,CAAgBC,GAAhB,CAAoB,QAApB,KAAiC,CAACjB,OAAO,CAACkB,QAAR,CAAiBL,CAAjB,CAAtC,EACEM,OAAO,CAACC,KAAR,CAAc,4BAAd;AACH;;AAtB2B;;AAwB9BC,MAAM,CAACC,OAAP,GAAiBnB,GAAjB","sourcesContent":["const envPath = require('./utils/path.js')\nconst BaseCommand = require('./base-command.js')\n\nclass Bin extends BaseCommand {\n  static get description () {\n    return 'Display npm bin folder'\n  }\n\n  static get name () {\n    return 'bin'\n  }\n\n  static get params () {\n    return ['global']\n  }\n\n  exec (args, cb) {\n    this.bin(args).then(() => cb()).catch(cb)\n  }\n\n  async bin (args) {\n    const b = this.npm.bin\n    this.npm.output(b)\n    if (this.npm.config.get('global') && !envPath.includes(b))\n      console.error('(not in PATH env variable)')\n  }\n}\nmodule.exports = Bin\n"]},"metadata":{},"sourceType":"script"}