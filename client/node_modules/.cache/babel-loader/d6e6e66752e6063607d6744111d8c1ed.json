{"ast":null,"code":"'use strict';\n\nconst npmFetch = require('npm-registry-fetch');\n\nmodule.exports = search;\n\nfunction search(query, opts) {\n  return search.stream(query, opts).collect();\n}\n\nsearch.stream = searchStream;\n\nfunction searchStream(query, opts = {}) {\n  opts = {\n    detailed: false,\n    limit: 20,\n    from: 0,\n    quality: 0.65,\n    popularity: 0.98,\n    maintenance: 0.5,\n    ...opts.opts,\n    // this is to support the cli's --searchopts parameter\n    ...opts\n  };\n\n  switch (opts.sortBy) {\n    case 'optimal':\n      {\n        opts.quality = 0.65;\n        opts.popularity = 0.98;\n        opts.maintenance = 0.5;\n        break;\n      }\n\n    case 'quality':\n      {\n        opts.quality = 1;\n        opts.popularity = 0;\n        opts.maintenance = 0;\n        break;\n      }\n\n    case 'popularity':\n      {\n        opts.quality = 0;\n        opts.popularity = 1;\n        opts.maintenance = 0;\n        break;\n      }\n\n    case 'maintenance':\n      {\n        opts.quality = 0;\n        opts.popularity = 0;\n        opts.maintenance = 1;\n        break;\n      }\n  }\n\n  return npmFetch.json.stream('/-/v1/search', 'objects.*', { ...opts,\n    query: {\n      text: Array.isArray(query) ? query.join(' ') : query,\n      size: opts.limit,\n      from: opts.from,\n      quality: opts.quality,\n      popularity: opts.popularity,\n      maintenance: opts.maintenance\n    },\n    mapJSON: obj => {\n      if (obj.package.date) {\n        obj.package.date = new Date(obj.package.date);\n      }\n\n      if (opts.detailed) {\n        return obj;\n      } else {\n        return obj.package;\n      }\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/libnpmsearch/index.js"],"names":["npmFetch","require","module","exports","search","query","opts","stream","collect","searchStream","detailed","limit","from","quality","popularity","maintenance","sortBy","json","text","Array","isArray","join","size","mapJSON","obj","package","date","Date"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;;AACA,SAASA,MAAT,CAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;AAC5B,SAAOF,MAAM,CAACG,MAAP,CAAcF,KAAd,EAAqBC,IAArB,EAA2BE,OAA3B,EAAP;AACD;;AACDJ,MAAM,CAACG,MAAP,GAAgBE,YAAhB;;AACA,SAASA,YAAT,CAAuBJ,KAAvB,EAA8BC,IAAI,GAAG,EAArC,EAAyC;AACvCA,EAAAA,IAAI,GAAG;AACLI,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAE,EAFF;AAGLC,IAAAA,IAAI,EAAE,CAHD;AAILC,IAAAA,OAAO,EAAE,IAJJ;AAKLC,IAAAA,UAAU,EAAE,IALP;AAMLC,IAAAA,WAAW,EAAE,GANR;AAOL,OAAGT,IAAI,CAACA,IAPH;AAOS;AACd,OAAGA;AARE,GAAP;;AAWA,UAAQA,IAAI,CAACU,MAAb;AACE,SAAK,SAAL;AAAgB;AACdV,QAAAA,IAAI,CAACO,OAAL,GAAe,IAAf;AACAP,QAAAA,IAAI,CAACQ,UAAL,GAAkB,IAAlB;AACAR,QAAAA,IAAI,CAACS,WAAL,GAAmB,GAAnB;AACA;AACD;;AACD,SAAK,SAAL;AAAgB;AACdT,QAAAA,IAAI,CAACO,OAAL,GAAe,CAAf;AACAP,QAAAA,IAAI,CAACQ,UAAL,GAAkB,CAAlB;AACAR,QAAAA,IAAI,CAACS,WAAL,GAAmB,CAAnB;AACA;AACD;;AACD,SAAK,YAAL;AAAmB;AACjBT,QAAAA,IAAI,CAACO,OAAL,GAAe,CAAf;AACAP,QAAAA,IAAI,CAACQ,UAAL,GAAkB,CAAlB;AACAR,QAAAA,IAAI,CAACS,WAAL,GAAmB,CAAnB;AACA;AACD;;AACD,SAAK,aAAL;AAAoB;AAClBT,QAAAA,IAAI,CAACO,OAAL,GAAe,CAAf;AACAP,QAAAA,IAAI,CAACQ,UAAL,GAAkB,CAAlB;AACAR,QAAAA,IAAI,CAACS,WAAL,GAAmB,CAAnB;AACA;AACD;AAxBH;;AA0BA,SAAOf,QAAQ,CAACiB,IAAT,CAAcV,MAAd,CAAqB,cAArB,EAAqC,WAArC,EACL,EACE,GAAGD,IADL;AAEED,IAAAA,KAAK,EAAE;AACLa,MAAAA,IAAI,EAAEC,KAAK,CAACC,OAAN,CAAcf,KAAd,IAAuBA,KAAK,CAACgB,IAAN,CAAW,GAAX,CAAvB,GAAyChB,KAD1C;AAELiB,MAAAA,IAAI,EAAEhB,IAAI,CAACK,KAFN;AAGLC,MAAAA,IAAI,EAAEN,IAAI,CAACM,IAHN;AAILC,MAAAA,OAAO,EAAEP,IAAI,CAACO,OAJT;AAKLC,MAAAA,UAAU,EAAER,IAAI,CAACQ,UALZ;AAMLC,MAAAA,WAAW,EAAET,IAAI,CAACS;AANb,KAFT;AAUEQ,IAAAA,OAAO,EAAGC,GAAD,IAAS;AAChB,UAAIA,GAAG,CAACC,OAAJ,CAAYC,IAAhB,EAAsB;AACpBF,QAAAA,GAAG,CAACC,OAAJ,CAAYC,IAAZ,GAAmB,IAAIC,IAAJ,CAASH,GAAG,CAACC,OAAJ,CAAYC,IAArB,CAAnB;AACD;;AACD,UAAIpB,IAAI,CAACI,QAAT,EAAmB;AACjB,eAAOc,GAAP;AACD,OAFD,MAEO;AACL,eAAOA,GAAG,CAACC,OAAX;AACD;AACF;AAnBH,GADK,CAAP;AAuBD","sourcesContent":["'use strict'\n\nconst npmFetch = require('npm-registry-fetch')\n\nmodule.exports = search\nfunction search (query, opts) {\n  return search.stream(query, opts).collect()\n}\nsearch.stream = searchStream\nfunction searchStream (query, opts = {}) {\n  opts = {\n    detailed: false,\n    limit: 20,\n    from: 0,\n    quality: 0.65,\n    popularity: 0.98,\n    maintenance: 0.5,\n    ...opts.opts, // this is to support the cli's --searchopts parameter\n    ...opts\n  }\n\n  switch (opts.sortBy) {\n    case 'optimal': {\n      opts.quality = 0.65\n      opts.popularity = 0.98\n      opts.maintenance = 0.5\n      break\n    }\n    case 'quality': {\n      opts.quality = 1\n      opts.popularity = 0\n      opts.maintenance = 0\n      break\n    }\n    case 'popularity': {\n      opts.quality = 0\n      opts.popularity = 1\n      opts.maintenance = 0\n      break\n    }\n    case 'maintenance': {\n      opts.quality = 0\n      opts.popularity = 0\n      opts.maintenance = 1\n      break\n    }\n  }\n  return npmFetch.json.stream('/-/v1/search', 'objects.*',\n    {\n      ...opts,\n      query: {\n        text: Array.isArray(query) ? query.join(' ') : query,\n        size: opts.limit,\n        from: opts.from,\n        quality: opts.quality,\n        popularity: opts.popularity,\n        maintenance: opts.maintenance\n      },\n      mapJSON: (obj) => {\n        if (obj.package.date) {\n          obj.package.date = new Date(obj.package.date)\n        }\n        if (opts.detailed) {\n          return obj\n        } else {\n          return obj.package\n        }\n      }\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"script"}