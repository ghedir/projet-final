{"ast":null,"code":"const cacache = require('cacache');\n\nconst chalk = require('chalk');\n\nconst fs = require('fs');\n\nconst fetch = require('make-fetch-happen');\n\nconst table = require('text-table');\n\nconst which = require('which');\n\nconst pacote = require('pacote');\n\nconst {\n  resolve\n} = require('path');\n\nconst semver = require('semver');\n\nconst {\n  promisify\n} = require('util');\n\nconst ansiTrim = require('./utils/ansi-trim.js');\n\nconst isWindows = require('./utils/is-windows.js');\n\nconst ping = require('./utils/ping.js');\n\nconst {\n  registry: {\n    default: defaultRegistry\n  }\n} = require('./utils/config/definitions.js');\n\nconst lstat = promisify(fs.lstat);\nconst readdir = promisify(fs.readdir);\nconst access = promisify(fs.access);\nconst {\n  R_OK,\n  W_OK,\n  X_OK\n} = fs.constants;\n\nconst maskLabel = mask => {\n  const label = [];\n  if (mask & R_OK) label.push('readable');\n  if (mask & W_OK) label.push('writable');\n  if (mask & X_OK) label.push('executable');\n  return label.join(', ');\n};\n\nconst BaseCommand = require('./base-command.js');\n\nclass Doctor extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Check your npm environment';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'doctor';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['registry'];\n  }\n\n  exec(args, cb) {\n    this.doctor(args).then(() => cb()).catch(cb);\n  }\n\n  async doctor(args) {\n    this.npm.log.info('Running checkup'); // each message is [title, ok, message]\n\n    const messages = [];\n    const actions = [['npm ping', 'checkPing', []], ['npm -v', 'getLatestNpmVersion', []], ['node -v', 'getLatestNodejsVersion', []], ['npm config get registry', 'checkNpmRegistry', []], ['which git', 'getGitPath', []], ...(isWindows ? [] : [['Perms check on cached files', 'checkFilesPermission', [this.npm.cache, true, R_OK]], ['Perms check on local node_modules', 'checkFilesPermission', [this.npm.localDir, true]], ['Perms check on global node_modules', 'checkFilesPermission', [this.npm.globalDir, false]], ['Perms check on local bin folder', 'checkFilesPermission', [this.npm.localBin, false, R_OK | W_OK | X_OK]], ['Perms check on global bin folder', 'checkFilesPermission', [this.npm.globalBin, false, X_OK]]]), ['Verify cache contents', 'verifyCachedFiles', [this.npm.flatOptions.cache]] // TODO:\n    // - ensure arborist.loadActual() runs without errors and no invalid edges\n    // - ensure package-lock.json matches loadActual()\n    // - verify loadActual without hidden lock file matches hidden lockfile\n    // - verify all local packages have bins linked\n    ]; // Do the actual work\n\n    for (const [msg, fn, args] of actions) {\n      const line = [msg];\n\n      try {\n        line.push(true, await this[fn](...args));\n      } catch (er) {\n        line.push(false, er);\n      }\n\n      messages.push(line);\n    }\n\n    const outHead = ['Check', 'Value', 'Recommendation/Notes'].map(!this.npm.color ? h => h : h => chalk.underline(h));\n    let allOk = true;\n    const outBody = messages.map(!this.npm.color ? item => {\n      allOk = allOk && item[1];\n      item[1] = item[1] ? 'ok' : 'not ok';\n      item[2] = String(item[2]);\n      return item;\n    } : item => {\n      allOk = allOk && item[1];\n\n      if (!item[1]) {\n        item[0] = chalk.red(item[0]);\n        item[2] = chalk.magenta(String(item[2]));\n      }\n\n      item[1] = item[1] ? chalk.green('ok') : chalk.red('not ok');\n      return item;\n    });\n    const outTable = [outHead, ...outBody];\n    const tableOpts = {\n      stringLength: s => ansiTrim(s).length\n    };\n    const silent = this.npm.log.levels[this.npm.log.level] > this.npm.log.levels.error;\n\n    if (!silent) {\n      this.npm.output(table(outTable, tableOpts));\n      if (!allOk) console.error('');\n    }\n\n    if (!allOk) throw 'Some problems found. See above for recommendations.';\n  }\n\n  async checkPing() {\n    const tracker = this.npm.log.newItem('checkPing', 1);\n    tracker.info('checkPing', 'Pinging registry');\n\n    try {\n      await ping(this.npm.flatOptions);\n      return '';\n    } catch (er) {\n      if (/^E\\d{3}$/.test(er.code || '')) throw er.code.substr(1) + ' ' + er.message;else throw er.message;\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async getLatestNpmVersion() {\n    const tracker = this.npm.log.newItem('getLatestNpmVersion', 1);\n    tracker.info('getLatestNpmVersion', 'Getting npm package information');\n\n    try {\n      const latest = (await pacote.manifest('npm@latest', this.npm.flatOptions)).version;\n      if (semver.gte(this.npm.version, latest)) return `current: v${this.npm.version}, latest: v${latest}`;else throw `Use npm v${latest}`;\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async getLatestNodejsVersion() {\n    // XXX get the latest in the current major as well\n    const current = process.version;\n    const currentRange = `^${current}`;\n    const url = 'https://nodejs.org/dist/index.json';\n    const tracker = this.npm.log.newItem('getLatestNodejsVersion', 1);\n    tracker.info('getLatestNodejsVersion', 'Getting Node.js release information');\n\n    try {\n      const res = await fetch(url, {\n        method: 'GET',\n        ...this.npm.flatOptions\n      });\n      const data = await res.json();\n      let maxCurrent = '0.0.0';\n      let maxLTS = '0.0.0';\n\n      for (const {\n        lts,\n        version\n      } of data) {\n        if (lts && semver.gt(version, maxLTS)) maxLTS = version;\n        if (semver.satisfies(version, currentRange) && semver.gt(version, maxCurrent)) maxCurrent = version;\n      }\n\n      const recommended = semver.gt(maxCurrent, maxLTS) ? maxCurrent : maxLTS;\n      if (semver.gte(process.version, recommended)) return `current: ${current}, recommended: ${recommended}`;else throw `Use node ${recommended} (current: ${current})`;\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async checkFilesPermission(root, shouldOwn, mask = null) {\n    if (mask === null) mask = shouldOwn ? R_OK | W_OK : R_OK;\n    let ok = true;\n    const tracker = this.npm.log.newItem(root, 1);\n\n    try {\n      const uid = process.getuid();\n      const gid = process.getgid();\n      const files = new Set([root]);\n\n      for (const f of files) {\n        tracker.silly('checkFilesPermission', f.substr(root.length + 1));\n        const st = await lstat(f).catch(er => {\n          ok = false;\n          tracker.warn('checkFilesPermission', 'error getting info for ' + f);\n        });\n        tracker.completeWork(1);\n        if (!st) continue;\n\n        if (shouldOwn && (uid !== st.uid || gid !== st.gid)) {\n          tracker.warn('checkFilesPermission', 'should be owner of ' + f);\n          ok = false;\n        }\n\n        if (!st.isDirectory() && !st.isFile()) continue;\n\n        try {\n          await access(f, mask);\n        } catch (er) {\n          ok = false;\n          const msg = `Missing permissions on ${f} (expect: ${maskLabel(mask)})`;\n          tracker.error('checkFilesPermission', msg);\n          continue;\n        }\n\n        if (st.isDirectory()) {\n          const entries = await readdir(f).catch(er => {\n            ok = false;\n            tracker.warn('checkFilesPermission', 'error reading directory ' + f);\n            return [];\n          });\n\n          for (const entry of entries) files.add(resolve(f, entry));\n        }\n      }\n    } finally {\n      tracker.finish();\n\n      if (!ok) {\n        throw `Check the permissions of files in ${root}` + (shouldOwn ? ' (should be owned by current user)' : '');\n      } else return '';\n    }\n  }\n\n  async getGitPath() {\n    const tracker = this.npm.log.newItem('getGitPath', 1);\n    tracker.info('getGitPath', 'Finding git in your PATH');\n\n    try {\n      return await which('git').catch(er => {\n        tracker.warn(er);\n        throw \"Install git and ensure it's in your PATH.\";\n      });\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async verifyCachedFiles() {\n    const tracker = this.npm.log.newItem('verifyCachedFiles', 1);\n    tracker.info('verifyCachedFiles', 'Verifying the npm cache');\n\n    try {\n      const stats = await cacache.verify(this.npm.flatOptions.cache);\n      const {\n        badContentCount,\n        reclaimedCount,\n        missingContent,\n        reclaimedSize\n      } = stats;\n\n      if (badContentCount || reclaimedCount || missingContent) {\n        if (badContentCount) tracker.warn('verifyCachedFiles', `Corrupted content removed: ${badContentCount}`);\n        if (reclaimedCount) tracker.warn('verifyCachedFiles', `Content garbage-collected: ${reclaimedCount} (${reclaimedSize} bytes)`);\n        if (missingContent) tracker.warn('verifyCachedFiles', `Missing content: ${missingContent}`);\n        tracker.warn('verifyCachedFiles', 'Cache issues have been fixed');\n      }\n\n      tracker.info('verifyCachedFiles', `Verification complete. Stats: ${JSON.stringify(stats, null, 2)}`);\n      return `verified ${stats.verifiedContent} tarballs`;\n    } finally {\n      tracker.finish();\n    }\n  }\n\n  async checkNpmRegistry() {\n    if (this.npm.flatOptions.registry !== defaultRegistry) throw `Try \\`npm config set registry=${defaultRegistry}\\``;else return `using default registry (${defaultRegistry})`;\n  }\n\n}\n\nmodule.exports = Doctor;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/doctor.js"],"names":["cacache","require","chalk","fs","fetch","table","which","pacote","resolve","semver","promisify","ansiTrim","isWindows","ping","registry","default","defaultRegistry","lstat","readdir","access","R_OK","W_OK","X_OK","constants","maskLabel","mask","label","push","join","BaseCommand","Doctor","description","name","params","exec","args","cb","doctor","then","catch","npm","log","info","messages","actions","cache","localDir","globalDir","localBin","globalBin","flatOptions","msg","fn","line","er","outHead","map","color","h","underline","allOk","outBody","item","String","red","magenta","green","outTable","tableOpts","stringLength","s","length","silent","levels","level","error","output","console","checkPing","tracker","newItem","test","code","substr","message","finish","getLatestNpmVersion","latest","manifest","version","gte","getLatestNodejsVersion","current","process","currentRange","url","res","method","data","json","maxCurrent","maxLTS","lts","gt","satisfies","recommended","checkFilesPermission","root","shouldOwn","ok","uid","getuid","gid","getgid","files","Set","f","silly","st","warn","completeWork","isDirectory","isFile","entries","entry","add","getGitPath","verifyCachedFiles","stats","verify","badContentCount","reclaimedCount","missingContent","reclaimedSize","JSON","stringify","verifiedContent","checkNpmRegistry","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,mBAAD,CAArB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AAAEO,EAAAA;AAAF,IAAcP,OAAO,CAAC,MAAD,CAA3B;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AAAES,EAAAA;AAAF,IAAgBT,OAAO,CAAC,MAAD,CAA7B;;AACA,MAAMU,QAAQ,GAAGV,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMW,SAAS,GAAGX,OAAO,CAAC,uBAAD,CAAzB;;AACA,MAAMY,IAAI,GAAGZ,OAAO,CAAC,iBAAD,CAApB;;AACA,MAAM;AAAEa,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,OAAO,EAAEC;AAAX;AAAZ,IAA6Cf,OAAO,CAAC,+BAAD,CAA1D;;AACA,MAAMgB,KAAK,GAAGP,SAAS,CAACP,EAAE,CAACc,KAAJ,CAAvB;AACA,MAAMC,OAAO,GAAGR,SAAS,CAACP,EAAE,CAACe,OAAJ,CAAzB;AACA,MAAMC,MAAM,GAAGT,SAAS,CAACP,EAAE,CAACgB,MAAJ,CAAxB;AACA,MAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,IAAuBnB,EAAE,CAACoB,SAAhC;;AACA,MAAMC,SAAS,GAAGC,IAAI,IAAI;AACxB,QAAMC,KAAK,GAAG,EAAd;AACA,MAAID,IAAI,GAAGL,IAAX,EACEM,KAAK,CAACC,IAAN,CAAW,UAAX;AAEF,MAAIF,IAAI,GAAGJ,IAAX,EACEK,KAAK,CAACC,IAAN,CAAW,UAAX;AAEF,MAAIF,IAAI,GAAGH,IAAX,EACEI,KAAK,CAACC,IAAN,CAAW,YAAX;AAEF,SAAOD,KAAK,CAACE,IAAN,CAAW,IAAX,CAAP;AACD,CAZD;;AAcA,MAAMC,WAAW,GAAG5B,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAM6B,MAAN,SAAqBD,WAArB,CAAiC;AAC/B;AACsB,aAAXE,WAAW,GAAI;AACxB,WAAO,4BAAP;AACD;AAED;;;AACe,aAAJC,IAAI,GAAI;AACjB,WAAO,QAAP;AACD;AAED;;;AACiB,aAANC,MAAM,GAAI;AACnB,WAAO,CAAC,UAAD,CAAP;AACD;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,MAAL,CAAYF,IAAZ,EAAkBG,IAAlB,CAAuB,MAAMF,EAAE,EAA/B,EAAmCG,KAAnC,CAAyCH,EAAzC;AACD;;AAEW,QAANC,MAAM,CAAEF,IAAF,EAAQ;AAClB,SAAKK,GAAL,CAASC,GAAT,CAAaC,IAAb,CAAkB,iBAAlB,EADkB,CAGlB;;AACA,UAAMC,QAAQ,GAAG,EAAjB;AAEA,UAAMC,OAAO,GAAG,CACd,CAAC,UAAD,EAAa,WAAb,EAA0B,EAA1B,CADc,EAEd,CAAC,QAAD,EAAW,qBAAX,EAAkC,EAAlC,CAFc,EAGd,CAAC,SAAD,EAAY,wBAAZ,EAAsC,EAAtC,CAHc,EAId,CAAC,yBAAD,EAA4B,kBAA5B,EAAgD,EAAhD,CAJc,EAKd,CAAC,WAAD,EAAc,YAAd,EAA4B,EAA5B,CALc,EAMd,IAAIhC,SAAS,GAAG,EAAH,GAAQ,CACnB,CAAC,6BAAD,EAAgC,sBAAhC,EAAwD,CAAC,KAAK4B,GAAL,CAASK,KAAV,EAAiB,IAAjB,EAAuBzB,IAAvB,CAAxD,CADmB,EAEnB,CAAC,mCAAD,EAAsC,sBAAtC,EAA8D,CAAC,KAAKoB,GAAL,CAASM,QAAV,EAAoB,IAApB,CAA9D,CAFmB,EAGnB,CAAC,oCAAD,EAAuC,sBAAvC,EAA+D,CAAC,KAAKN,GAAL,CAASO,SAAV,EAAqB,KAArB,CAA/D,CAHmB,EAInB,CAAC,iCAAD,EAAoC,sBAApC,EAA4D,CAAC,KAAKP,GAAL,CAASQ,QAAV,EAAoB,KAApB,EAA2B5B,IAAI,GAAGC,IAAP,GAAcC,IAAzC,CAA5D,CAJmB,EAKnB,CAAC,kCAAD,EAAqC,sBAArC,EAA6D,CAAC,KAAKkB,GAAL,CAASS,SAAV,EAAqB,KAArB,EAA4B3B,IAA5B,CAA7D,CALmB,CAArB,CANc,EAad,CAAC,uBAAD,EAA0B,mBAA1B,EAA+C,CAAC,KAAKkB,GAAL,CAASU,WAAT,CAAqBL,KAAtB,CAA/C,CAbc,CAcd;AACA;AACA;AACA;AACA;AAlBc,KAAhB,CANkB,CA2BlB;;AACA,SAAK,MAAM,CAACM,GAAD,EAAMC,EAAN,EAAUjB,IAAV,CAAX,IAA8BS,OAA9B,EAAuC;AACrC,YAAMS,IAAI,GAAG,CAACF,GAAD,CAAb;;AACA,UAAI;AACFE,QAAAA,IAAI,CAAC1B,IAAL,CAAU,IAAV,EAAgB,MAAM,KAAKyB,EAAL,EAAS,GAAGjB,IAAZ,CAAtB;AACD,OAFD,CAEE,OAAOmB,EAAP,EAAW;AACXD,QAAAA,IAAI,CAAC1B,IAAL,CAAU,KAAV,EAAiB2B,EAAjB;AACD;;AACDX,MAAAA,QAAQ,CAAChB,IAAT,CAAc0B,IAAd;AACD;;AAED,UAAME,OAAO,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,sBAAnB,EACbC,GADa,CACT,CAAC,KAAKhB,GAAL,CAASiB,KAAV,GAAkBC,CAAC,IAAIA,CAAvB,GAA2BA,CAAC,IAAIxD,KAAK,CAACyD,SAAN,CAAgBD,CAAhB,CADvB,CAAhB;AAEA,QAAIE,KAAK,GAAG,IAAZ;AACA,UAAMC,OAAO,GAAGlB,QAAQ,CAACa,GAAT,CAAa,CAAC,KAAKhB,GAAL,CAASiB,KAAV,GACzBK,IAAI,IAAI;AACRF,MAAAA,KAAK,GAAGA,KAAK,IAAIE,IAAI,CAAC,CAAD,CAArB;AACAA,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV,GAAiB,QAA3B;AACAA,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,MAAM,CAACD,IAAI,CAAC,CAAD,CAAL,CAAhB;AACA,aAAOA,IAAP;AACD,KAN0B,GAOzBA,IAAI,IAAI;AACRF,MAAAA,KAAK,GAAGA,KAAK,IAAIE,IAAI,CAAC,CAAD,CAArB;;AACA,UAAI,CAACA,IAAI,CAAC,CAAD,CAAT,EAAc;AACZA,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU5D,KAAK,CAAC8D,GAAN,CAAUF,IAAI,CAAC,CAAD,CAAd,CAAV;AACAA,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU5D,KAAK,CAAC+D,OAAN,CAAcF,MAAM,CAACD,IAAI,CAAC,CAAD,CAAL,CAApB,CAAV;AACD;;AACDA,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAJ,GAAU5D,KAAK,CAACgE,KAAN,CAAY,IAAZ,CAAV,GAA8BhE,KAAK,CAAC8D,GAAN,CAAU,QAAV,CAAxC;AACA,aAAOF,IAAP;AACD,KAfa,CAAhB;AAgBA,UAAMK,QAAQ,GAAG,CAACZ,OAAD,EAAU,GAAGM,OAAb,CAAjB;AACA,UAAMO,SAAS,GAAG;AAChBC,MAAAA,YAAY,EAAEC,CAAC,IAAI3D,QAAQ,CAAC2D,CAAD,CAAR,CAAYC;AADf,KAAlB;AAIA,UAAMC,MAAM,GAAG,KAAKhC,GAAL,CAASC,GAAT,CAAagC,MAAb,CAAoB,KAAKjC,GAAL,CAASC,GAAT,CAAaiC,KAAjC,IACb,KAAKlC,GAAL,CAASC,GAAT,CAAagC,MAAb,CAAoBE,KADtB;;AAEA,QAAI,CAACH,MAAL,EAAa;AACX,WAAKhC,GAAL,CAASoC,MAAT,CAAgBvE,KAAK,CAAC8D,QAAD,EAAWC,SAAX,CAArB;AACA,UAAI,CAACR,KAAL,EACEiB,OAAO,CAACF,KAAR,CAAc,EAAd;AACH;;AACD,QAAI,CAACf,KAAL,EACE,MAAM,qDAAN;AACH;;AAEc,QAATkB,SAAS,GAAI;AACjB,UAAMC,OAAO,GAAG,KAAKvC,GAAL,CAASC,GAAT,CAAauC,OAAb,CAAqB,WAArB,EAAkC,CAAlC,CAAhB;AACAD,IAAAA,OAAO,CAACrC,IAAR,CAAa,WAAb,EAA0B,kBAA1B;;AACA,QAAI;AACF,YAAM7B,IAAI,CAAC,KAAK2B,GAAL,CAASU,WAAV,CAAV;AACA,aAAO,EAAP;AACD,KAHD,CAGE,OAAOI,EAAP,EAAW;AACX,UAAI,WAAW2B,IAAX,CAAgB3B,EAAE,CAAC4B,IAAH,IAAW,EAA3B,CAAJ,EACE,MAAM5B,EAAE,CAAC4B,IAAH,CAAQC,MAAR,CAAe,CAAf,IAAoB,GAApB,GAA0B7B,EAAE,CAAC8B,OAAnC,CADF,KAGE,MAAM9B,EAAE,CAAC8B,OAAT;AACH,KARD,SAQU;AACRL,MAAAA,OAAO,CAACM,MAAR;AACD;AACF;;AAEwB,QAAnBC,mBAAmB,GAAI;AAC3B,UAAMP,OAAO,GAAG,KAAKvC,GAAL,CAASC,GAAT,CAAauC,OAAb,CAAqB,qBAArB,EAA4C,CAA5C,CAAhB;AACAD,IAAAA,OAAO,CAACrC,IAAR,CAAa,qBAAb,EAAoC,iCAApC;;AACA,QAAI;AACF,YAAM6C,MAAM,GAAG,CAAC,MAAMhF,MAAM,CAACiF,QAAP,CAAgB,YAAhB,EAA8B,KAAKhD,GAAL,CAASU,WAAvC,CAAP,EAA4DuC,OAA3E;AACA,UAAIhF,MAAM,CAACiF,GAAP,CAAW,KAAKlD,GAAL,CAASiD,OAApB,EAA6BF,MAA7B,CAAJ,EACE,OAAQ,aAAY,KAAK/C,GAAL,CAASiD,OAAQ,cAAaF,MAAO,EAAzD,CADF,KAGE,MAAO,YAAWA,MAAO,EAAzB;AACH,KAND,SAMU;AACRR,MAAAA,OAAO,CAACM,MAAR;AACD;AACF;;AAE2B,QAAtBM,sBAAsB,GAAI;AAC9B;AACA,UAAMC,OAAO,GAAGC,OAAO,CAACJ,OAAxB;AACA,UAAMK,YAAY,GAAI,IAAGF,OAAQ,EAAjC;AACA,UAAMG,GAAG,GAAG,oCAAZ;AACA,UAAMhB,OAAO,GAAG,KAAKvC,GAAL,CAASC,GAAT,CAAauC,OAAb,CAAqB,wBAArB,EAA+C,CAA/C,CAAhB;AACAD,IAAAA,OAAO,CAACrC,IAAR,CAAa,wBAAb,EAAuC,qCAAvC;;AACA,QAAI;AACF,YAAMsD,GAAG,GAAG,MAAM5F,KAAK,CAAC2F,GAAD,EAAM;AAAEE,QAAAA,MAAM,EAAE,KAAV;AAAiB,WAAG,KAAKzD,GAAL,CAASU;AAA7B,OAAN,CAAvB;AACA,YAAMgD,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,UAAIC,UAAU,GAAG,OAAjB;AACA,UAAIC,MAAM,GAAG,OAAb;;AACA,WAAK,MAAM;AAAEC,QAAAA,GAAF;AAAOb,QAAAA;AAAP,OAAX,IAA+BS,IAA/B,EAAqC;AACnC,YAAII,GAAG,IAAI7F,MAAM,CAAC8F,EAAP,CAAUd,OAAV,EAAmBY,MAAnB,CAAX,EACEA,MAAM,GAAGZ,OAAT;AAEF,YAAIhF,MAAM,CAAC+F,SAAP,CAAiBf,OAAjB,EAA0BK,YAA1B,KACFrF,MAAM,CAAC8F,EAAP,CAAUd,OAAV,EAAmBW,UAAnB,CADF,EAEEA,UAAU,GAAGX,OAAb;AACH;;AACD,YAAMgB,WAAW,GAAGhG,MAAM,CAAC8F,EAAP,CAAUH,UAAV,EAAsBC,MAAtB,IAAgCD,UAAhC,GAA6CC,MAAjE;AACA,UAAI5F,MAAM,CAACiF,GAAP,CAAWG,OAAO,CAACJ,OAAnB,EAA4BgB,WAA5B,CAAJ,EACE,OAAQ,YAAWb,OAAQ,kBAAiBa,WAAY,EAAxD,CADF,KAGE,MAAO,YAAWA,WAAY,cAAab,OAAQ,GAAnD;AACH,KAlBD,SAkBU;AACRb,MAAAA,OAAO,CAACM,MAAR;AACD;AACF;;AAEyB,QAApBqB,oBAAoB,CAAEC,IAAF,EAAQC,SAAR,EAAmBnF,IAAI,GAAG,IAA1B,EAAgC;AACxD,QAAIA,IAAI,KAAK,IAAb,EACEA,IAAI,GAAGmF,SAAS,GAAGxF,IAAI,GAAGC,IAAV,GAAiBD,IAAjC;AAEF,QAAIyF,EAAE,GAAG,IAAT;AAEA,UAAM9B,OAAO,GAAG,KAAKvC,GAAL,CAASC,GAAT,CAAauC,OAAb,CAAqB2B,IAArB,EAA2B,CAA3B,CAAhB;;AAEA,QAAI;AACF,YAAMG,GAAG,GAAGjB,OAAO,CAACkB,MAAR,EAAZ;AACA,YAAMC,GAAG,GAAGnB,OAAO,CAACoB,MAAR,EAAZ;AACA,YAAMC,KAAK,GAAG,IAAIC,GAAJ,CAAQ,CAACR,IAAD,CAAR,CAAd;;AACA,WAAK,MAAMS,CAAX,IAAgBF,KAAhB,EAAuB;AACrBnC,QAAAA,OAAO,CAACsC,KAAR,CAAc,sBAAd,EAAsCD,CAAC,CAACjC,MAAF,CAASwB,IAAI,CAACpC,MAAL,GAAc,CAAvB,CAAtC;AACA,cAAM+C,EAAE,GAAG,MAAMrG,KAAK,CAACmG,CAAD,CAAL,CACd7E,KADc,CACRe,EAAE,IAAI;AACXuD,UAAAA,EAAE,GAAG,KAAL;AACA9B,UAAAA,OAAO,CAACwC,IAAR,CAAa,sBAAb,EAAqC,4BAA4BH,CAAjE;AACD,SAJc,CAAjB;AAMArC,QAAAA,OAAO,CAACyC,YAAR,CAAqB,CAArB;AAEA,YAAI,CAACF,EAAL,EACE;;AAEF,YAAIV,SAAS,KAAKE,GAAG,KAAKQ,EAAE,CAACR,GAAX,IAAkBE,GAAG,KAAKM,EAAE,CAACN,GAAlC,CAAb,EAAqD;AACnDjC,UAAAA,OAAO,CAACwC,IAAR,CAAa,sBAAb,EAAqC,wBAAwBH,CAA7D;AACAP,UAAAA,EAAE,GAAG,KAAL;AACD;;AAED,YAAI,CAACS,EAAE,CAACG,WAAH,EAAD,IAAqB,CAACH,EAAE,CAACI,MAAH,EAA1B,EACE;;AAEF,YAAI;AACF,gBAAMvG,MAAM,CAACiG,CAAD,EAAI3F,IAAJ,CAAZ;AACD,SAFD,CAEE,OAAO6B,EAAP,EAAW;AACXuD,UAAAA,EAAE,GAAG,KAAL;AACA,gBAAM1D,GAAG,GAAI,0BAAyBiE,CAAE,aAAY5F,SAAS,CAACC,IAAD,CAAO,GAApE;AACAsD,UAAAA,OAAO,CAACJ,KAAR,CAAc,sBAAd,EAAsCxB,GAAtC;AACA;AACD;;AAED,YAAImE,EAAE,CAACG,WAAH,EAAJ,EAAsB;AACpB,gBAAME,OAAO,GAAG,MAAMzG,OAAO,CAACkG,CAAD,CAAP,CACnB7E,KADmB,CACbe,EAAE,IAAI;AACXuD,YAAAA,EAAE,GAAG,KAAL;AACA9B,YAAAA,OAAO,CAACwC,IAAR,CAAa,sBAAb,EAAqC,6BAA6BH,CAAlE;AACA,mBAAO,EAAP;AACD,WALmB,CAAtB;;AAMA,eAAK,MAAMQ,KAAX,IAAoBD,OAApB,EACET,KAAK,CAACW,GAAN,CAAUrH,OAAO,CAAC4G,CAAD,EAAIQ,KAAJ,CAAjB;AACH;AACF;AACF,KA7CD,SA6CU;AACR7C,MAAAA,OAAO,CAACM,MAAR;;AACA,UAAI,CAACwB,EAAL,EAAS;AACP,cAAO,qCAAoCF,IAAK,EAA1C,IACHC,SAAS,GAAG,oCAAH,GAA0C,EADhD,CAAN;AAED,OAHD,MAIE,OAAO,EAAP;AACH;AACF;;AAEe,QAAVkB,UAAU,GAAI;AAClB,UAAM/C,OAAO,GAAG,KAAKvC,GAAL,CAASC,GAAT,CAAauC,OAAb,CAAqB,YAArB,EAAmC,CAAnC,CAAhB;AACAD,IAAAA,OAAO,CAACrC,IAAR,CAAa,YAAb,EAA2B,0BAA3B;;AACA,QAAI;AACF,aAAO,MAAMpC,KAAK,CAAC,KAAD,CAAL,CAAaiC,KAAb,CAAmBe,EAAE,IAAI;AACpCyB,QAAAA,OAAO,CAACwC,IAAR,CAAajE,EAAb;AACA,cAAM,2CAAN;AACD,OAHY,CAAb;AAID,KALD,SAKU;AACRyB,MAAAA,OAAO,CAACM,MAAR;AACD;AACF;;AAEsB,QAAjB0C,iBAAiB,GAAI;AACzB,UAAMhD,OAAO,GAAG,KAAKvC,GAAL,CAASC,GAAT,CAAauC,OAAb,CAAqB,mBAArB,EAA0C,CAA1C,CAAhB;AACAD,IAAAA,OAAO,CAACrC,IAAR,CAAa,mBAAb,EAAkC,yBAAlC;;AACA,QAAI;AACF,YAAMsF,KAAK,GAAG,MAAMhI,OAAO,CAACiI,MAAR,CAAe,KAAKzF,GAAL,CAASU,WAAT,CAAqBL,KAApC,CAApB;AACA,YAAM;AACJqF,QAAAA,eADI;AAEJC,QAAAA,cAFI;AAGJC,QAAAA,cAHI;AAIJC,QAAAA;AAJI,UAKFL,KALJ;;AAMA,UAAIE,eAAe,IAAIC,cAAnB,IAAqCC,cAAzC,EAAyD;AACvD,YAAIF,eAAJ,EACEnD,OAAO,CAACwC,IAAR,CAAa,mBAAb,EAAmC,8BAA6BW,eAAgB,EAAhF;AAEF,YAAIC,cAAJ,EACEpD,OAAO,CAACwC,IAAR,CAAa,mBAAb,EAAmC,8BAA6BY,cAAe,KAAIE,aAAc,SAAjG;AAEF,YAAID,cAAJ,EACErD,OAAO,CAACwC,IAAR,CAAa,mBAAb,EAAmC,oBAAmBa,cAAe,EAArE;AAEFrD,QAAAA,OAAO,CAACwC,IAAR,CAAa,mBAAb,EAAkC,8BAAlC;AACD;;AACDxC,MAAAA,OAAO,CAACrC,IAAR,CAAa,mBAAb,EAAmC,iCACnC4F,IAAI,CAACC,SAAL,CAAeP,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CACD,EAFC;AAGA,aAAQ,YAAWA,KAAK,CAACQ,eAAgB,WAAzC;AACD,KAxBD,SAwBU;AACRzD,MAAAA,OAAO,CAACM,MAAR;AACD;AACF;;AAEqB,QAAhBoD,gBAAgB,GAAI;AACxB,QAAI,KAAKjG,GAAL,CAASU,WAAT,CAAqBpC,QAArB,KAAkCE,eAAtC,EACE,MAAO,iCAAgCA,eAAgB,IAAvD,CADF,KAGE,OAAQ,2BAA0BA,eAAgB,GAAlD;AACH;;AA1Q8B;;AA6QjC0H,MAAM,CAACC,OAAP,GAAiB7G,MAAjB","sourcesContent":["const cacache = require('cacache')\nconst chalk = require('chalk')\nconst fs = require('fs')\nconst fetch = require('make-fetch-happen')\nconst table = require('text-table')\nconst which = require('which')\nconst pacote = require('pacote')\nconst { resolve } = require('path')\nconst semver = require('semver')\nconst { promisify } = require('util')\nconst ansiTrim = require('./utils/ansi-trim.js')\nconst isWindows = require('./utils/is-windows.js')\nconst ping = require('./utils/ping.js')\nconst { registry: { default: defaultRegistry } } = require('./utils/config/definitions.js')\nconst lstat = promisify(fs.lstat)\nconst readdir = promisify(fs.readdir)\nconst access = promisify(fs.access)\nconst { R_OK, W_OK, X_OK } = fs.constants\nconst maskLabel = mask => {\n  const label = []\n  if (mask & R_OK)\n    label.push('readable')\n\n  if (mask & W_OK)\n    label.push('writable')\n\n  if (mask & X_OK)\n    label.push('executable')\n\n  return label.join(', ')\n}\n\nconst BaseCommand = require('./base-command.js')\nclass Doctor extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Check your npm environment'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'doctor'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['registry']\n  }\n\n  exec (args, cb) {\n    this.doctor(args).then(() => cb()).catch(cb)\n  }\n\n  async doctor (args) {\n    this.npm.log.info('Running checkup')\n\n    // each message is [title, ok, message]\n    const messages = []\n\n    const actions = [\n      ['npm ping', 'checkPing', []],\n      ['npm -v', 'getLatestNpmVersion', []],\n      ['node -v', 'getLatestNodejsVersion', []],\n      ['npm config get registry', 'checkNpmRegistry', []],\n      ['which git', 'getGitPath', []],\n      ...(isWindows ? [] : [\n        ['Perms check on cached files', 'checkFilesPermission', [this.npm.cache, true, R_OK]],\n        ['Perms check on local node_modules', 'checkFilesPermission', [this.npm.localDir, true]],\n        ['Perms check on global node_modules', 'checkFilesPermission', [this.npm.globalDir, false]],\n        ['Perms check on local bin folder', 'checkFilesPermission', [this.npm.localBin, false, R_OK | W_OK | X_OK]],\n        ['Perms check on global bin folder', 'checkFilesPermission', [this.npm.globalBin, false, X_OK]],\n      ]),\n      ['Verify cache contents', 'verifyCachedFiles', [this.npm.flatOptions.cache]],\n      // TODO:\n      // - ensure arborist.loadActual() runs without errors and no invalid edges\n      // - ensure package-lock.json matches loadActual()\n      // - verify loadActual without hidden lock file matches hidden lockfile\n      // - verify all local packages have bins linked\n    ]\n\n    // Do the actual work\n    for (const [msg, fn, args] of actions) {\n      const line = [msg]\n      try {\n        line.push(true, await this[fn](...args))\n      } catch (er) {\n        line.push(false, er)\n      }\n      messages.push(line)\n    }\n\n    const outHead = ['Check', 'Value', 'Recommendation/Notes']\n      .map(!this.npm.color ? h => h : h => chalk.underline(h))\n    let allOk = true\n    const outBody = messages.map(!this.npm.color\n      ? item => {\n        allOk = allOk && item[1]\n        item[1] = item[1] ? 'ok' : 'not ok'\n        item[2] = String(item[2])\n        return item\n      }\n      : item => {\n        allOk = allOk && item[1]\n        if (!item[1]) {\n          item[0] = chalk.red(item[0])\n          item[2] = chalk.magenta(String(item[2]))\n        }\n        item[1] = item[1] ? chalk.green('ok') : chalk.red('not ok')\n        return item\n      })\n    const outTable = [outHead, ...outBody]\n    const tableOpts = {\n      stringLength: s => ansiTrim(s).length,\n    }\n\n    const silent = this.npm.log.levels[this.npm.log.level] >\n      this.npm.log.levels.error\n    if (!silent) {\n      this.npm.output(table(outTable, tableOpts))\n      if (!allOk)\n        console.error('')\n    }\n    if (!allOk)\n      throw 'Some problems found. See above for recommendations.'\n  }\n\n  async checkPing () {\n    const tracker = this.npm.log.newItem('checkPing', 1)\n    tracker.info('checkPing', 'Pinging registry')\n    try {\n      await ping(this.npm.flatOptions)\n      return ''\n    } catch (er) {\n      if (/^E\\d{3}$/.test(er.code || ''))\n        throw er.code.substr(1) + ' ' + er.message\n      else\n        throw er.message\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async getLatestNpmVersion () {\n    const tracker = this.npm.log.newItem('getLatestNpmVersion', 1)\n    tracker.info('getLatestNpmVersion', 'Getting npm package information')\n    try {\n      const latest = (await pacote.manifest('npm@latest', this.npm.flatOptions)).version\n      if (semver.gte(this.npm.version, latest))\n        return `current: v${this.npm.version}, latest: v${latest}`\n      else\n        throw `Use npm v${latest}`\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async getLatestNodejsVersion () {\n    // XXX get the latest in the current major as well\n    const current = process.version\n    const currentRange = `^${current}`\n    const url = 'https://nodejs.org/dist/index.json'\n    const tracker = this.npm.log.newItem('getLatestNodejsVersion', 1)\n    tracker.info('getLatestNodejsVersion', 'Getting Node.js release information')\n    try {\n      const res = await fetch(url, { method: 'GET', ...this.npm.flatOptions })\n      const data = await res.json()\n      let maxCurrent = '0.0.0'\n      let maxLTS = '0.0.0'\n      for (const { lts, version } of data) {\n        if (lts && semver.gt(version, maxLTS))\n          maxLTS = version\n\n        if (semver.satisfies(version, currentRange) &&\n          semver.gt(version, maxCurrent))\n          maxCurrent = version\n      }\n      const recommended = semver.gt(maxCurrent, maxLTS) ? maxCurrent : maxLTS\n      if (semver.gte(process.version, recommended))\n        return `current: ${current}, recommended: ${recommended}`\n      else\n        throw `Use node ${recommended} (current: ${current})`\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async checkFilesPermission (root, shouldOwn, mask = null) {\n    if (mask === null)\n      mask = shouldOwn ? R_OK | W_OK : R_OK\n\n    let ok = true\n\n    const tracker = this.npm.log.newItem(root, 1)\n\n    try {\n      const uid = process.getuid()\n      const gid = process.getgid()\n      const files = new Set([root])\n      for (const f of files) {\n        tracker.silly('checkFilesPermission', f.substr(root.length + 1))\n        const st = await lstat(f)\n          .catch(er => {\n            ok = false\n            tracker.warn('checkFilesPermission', 'error getting info for ' + f)\n          })\n\n        tracker.completeWork(1)\n\n        if (!st)\n          continue\n\n        if (shouldOwn && (uid !== st.uid || gid !== st.gid)) {\n          tracker.warn('checkFilesPermission', 'should be owner of ' + f)\n          ok = false\n        }\n\n        if (!st.isDirectory() && !st.isFile())\n          continue\n\n        try {\n          await access(f, mask)\n        } catch (er) {\n          ok = false\n          const msg = `Missing permissions on ${f} (expect: ${maskLabel(mask)})`\n          tracker.error('checkFilesPermission', msg)\n          continue\n        }\n\n        if (st.isDirectory()) {\n          const entries = await readdir(f)\n            .catch(er => {\n              ok = false\n              tracker.warn('checkFilesPermission', 'error reading directory ' + f)\n              return []\n            })\n          for (const entry of entries)\n            files.add(resolve(f, entry))\n        }\n      }\n    } finally {\n      tracker.finish()\n      if (!ok) {\n        throw `Check the permissions of files in ${root}` +\n          (shouldOwn ? ' (should be owned by current user)' : '')\n      } else\n        return ''\n    }\n  }\n\n  async getGitPath () {\n    const tracker = this.npm.log.newItem('getGitPath', 1)\n    tracker.info('getGitPath', 'Finding git in your PATH')\n    try {\n      return await which('git').catch(er => {\n        tracker.warn(er)\n        throw \"Install git and ensure it's in your PATH.\"\n      })\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async verifyCachedFiles () {\n    const tracker = this.npm.log.newItem('verifyCachedFiles', 1)\n    tracker.info('verifyCachedFiles', 'Verifying the npm cache')\n    try {\n      const stats = await cacache.verify(this.npm.flatOptions.cache)\n      const {\n        badContentCount,\n        reclaimedCount,\n        missingContent,\n        reclaimedSize,\n      } = stats\n      if (badContentCount || reclaimedCount || missingContent) {\n        if (badContentCount)\n          tracker.warn('verifyCachedFiles', `Corrupted content removed: ${badContentCount}`)\n\n        if (reclaimedCount)\n          tracker.warn('verifyCachedFiles', `Content garbage-collected: ${reclaimedCount} (${reclaimedSize} bytes)`)\n\n        if (missingContent)\n          tracker.warn('verifyCachedFiles', `Missing content: ${missingContent}`)\n\n        tracker.warn('verifyCachedFiles', 'Cache issues have been fixed')\n      }\n      tracker.info('verifyCachedFiles', `Verification complete. Stats: ${\n      JSON.stringify(stats, null, 2)\n    }`)\n      return `verified ${stats.verifiedContent} tarballs`\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async checkNpmRegistry () {\n    if (this.npm.flatOptions.registry !== defaultRegistry)\n      throw `Try \\`npm config set registry=${defaultRegistry}\\``\n    else\n      return `using default registry (${defaultRegistry})`\n  }\n}\n\nmodule.exports = Doctor\n"]},"metadata":{},"sourceType":"script"}