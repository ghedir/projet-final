{"ast":null,"code":"// certain assertions we should do only when testing arborist itself, because\n// they are too expensive or aggressive and would break user programs if we\n// miss a situation where they are actually valid.\n//\n// call like this:\n//\n// /* istanbul ignore next - debug check */\n// debug(() => {\n//   if (someExpensiveCheck)\n//     throw new Error('expensive check should have returned false')\n// })\n// run in debug mode if explicitly requested, running arborist tests,\n// or working in the arborist project directory.\nconst debug = process.env.ARBORIST_DEBUG !== '0' && (process.env.ARBORIST_DEBUG === '1' || /\\barborist\\b/.test(process.env.NODE_DEBUG || '') || process.env.npm_package_name === '@npmcli/arborist' && ['test', 'snap'].includes(process.env.npm_lifecycle_event) || process.cwd() === require('path').resolve(__dirname, '..'));\n\nmodule.exports = debug ? fn => fn() : () => {};\nconst red = process.stderr.isTTY ? msg => `\\x1B[31m${msg}\\x1B[39m` : m => m;\n\nmodule.exports.log = (...msg) => module.exports(() => {\n  const {\n    format\n  } = require('util');\n\n  const prefix = `\\n${process.pid} ${red(format(msg.shift()))} `;\n  msg = (prefix + format(...msg).trim().split('\\n').join(prefix)).trim();\n  console.error(msg);\n});","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/arborist/lib/debug.js"],"names":["debug","process","env","ARBORIST_DEBUG","test","NODE_DEBUG","npm_package_name","includes","npm_lifecycle_event","cwd","require","resolve","__dirname","module","exports","fn","red","stderr","isTTY","msg","m","log","format","prefix","pid","shift","trim","split","join","console","error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAZ,KAA+B,GAA/B,KACZF,OAAO,CAACC,GAAR,CAAYC,cAAZ,KAA+B,GAA/B,IACA,eAAeC,IAAf,CAAoBH,OAAO,CAACC,GAAR,CAAYG,UAAZ,IAA0B,EAA9C,CADA,IAEAJ,OAAO,CAACC,GAAR,CAAYI,gBAAZ,KAAiC,kBAAjC,IACA,CAAC,MAAD,EAAS,MAAT,EAAiBC,QAAjB,CAA0BN,OAAO,CAACC,GAAR,CAAYM,mBAAtC,CAHA,IAIAP,OAAO,CAACQ,GAAR,OAAkBC,OAAO,CAAC,MAAD,CAAP,CAAgBC,OAAhB,CAAwBC,SAAxB,EAAmC,IAAnC,CALN,CAAd;;AAQAC,MAAM,CAACC,OAAP,GAAiBd,KAAK,GAAGe,EAAE,IAAIA,EAAE,EAAX,GAAgB,MAAM,CAAE,CAA9C;AACA,MAAMC,GAAG,GAAGf,OAAO,CAACgB,MAAR,CAAeC,KAAf,GAAuBC,GAAG,IAAK,WAAUA,GAAI,UAA7C,GAAyDC,CAAC,IAAIA,CAA1E;;AACAP,MAAM,CAACC,OAAP,CAAeO,GAAf,GAAqB,CAAC,GAAGF,GAAJ,KAAYN,MAAM,CAACC,OAAP,CAAe,MAAM;AACpD,QAAM;AAAEQ,IAAAA;AAAF,MAAaZ,OAAO,CAAC,MAAD,CAA1B;;AACA,QAAMa,MAAM,GAAI,KAAItB,OAAO,CAACuB,GAAI,IAAGR,GAAG,CAACM,MAAM,CAACH,GAAG,CAACM,KAAJ,EAAD,CAAP,CAAsB,GAA5D;AACAN,EAAAA,GAAG,GAAG,CAACI,MAAM,GAAGD,MAAM,CAAC,GAAGH,GAAJ,CAAN,CAAeO,IAAf,GAAsBC,KAAtB,CAA4B,IAA5B,EAAkCC,IAAlC,CAAuCL,MAAvC,CAAV,EAA0DG,IAA1D,EAAN;AACAG,EAAAA,OAAO,CAACC,KAAR,CAAcX,GAAd;AACD,CALgC,CAAjC","sourcesContent":["// certain assertions we should do only when testing arborist itself, because\n// they are too expensive or aggressive and would break user programs if we\n// miss a situation where they are actually valid.\n//\n// call like this:\n//\n// /* istanbul ignore next - debug check */\n// debug(() => {\n//   if (someExpensiveCheck)\n//     throw new Error('expensive check should have returned false')\n// })\n\n// run in debug mode if explicitly requested, running arborist tests,\n// or working in the arborist project directory.\n\nconst debug = process.env.ARBORIST_DEBUG !== '0' && (\n  process.env.ARBORIST_DEBUG === '1' ||\n  /\\barborist\\b/.test(process.env.NODE_DEBUG || '') ||\n  process.env.npm_package_name === '@npmcli/arborist' &&\n  ['test', 'snap'].includes(process.env.npm_lifecycle_event) ||\n  process.cwd() === require('path').resolve(__dirname, '..')\n)\n\nmodule.exports = debug ? fn => fn() : () => {}\nconst red = process.stderr.isTTY ? msg => `\\x1B[31m${msg}\\x1B[39m` : m => m\nmodule.exports.log = (...msg) => module.exports(() => {\n  const { format } = require('util')\n  const prefix = `\\n${process.pid} ${red(format(msg.shift()))} `\n  msg = (prefix + format(...msg).trim().split('\\n').join(prefix)).trim()\n  console.error(msg)\n})\n"]},"metadata":{},"sourceType":"script"}