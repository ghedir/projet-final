{"ast":null,"code":"const utils = require('./utils');\n\nconst tableLayout = require('./layout-manager');\n\nclass Table extends Array {\n  constructor(options) {\n    super();\n    this.options = utils.mergeOptions(options);\n  }\n\n  toString() {\n    let array = this;\n    let headersPresent = this.options.head && this.options.head.length;\n\n    if (headersPresent) {\n      array = [this.options.head];\n\n      if (this.length) {\n        array.push.apply(array, this);\n      }\n    } else {\n      this.options.style.head = [];\n    }\n\n    let cells = tableLayout.makeTableLayout(array);\n    cells.forEach(function (row) {\n      row.forEach(function (cell) {\n        cell.mergeTableOptions(this.options, cells);\n      }, this);\n    }, this);\n    tableLayout.computeWidths(this.options.colWidths, cells);\n    tableLayout.computeHeights(this.options.rowHeights, cells);\n    cells.forEach(function (row) {\n      row.forEach(function (cell) {\n        cell.init(this.options);\n      }, this);\n    }, this);\n    let result = [];\n\n    for (let rowIndex = 0; rowIndex < cells.length; rowIndex++) {\n      let row = cells[rowIndex];\n      let heightOfRow = this.options.rowHeights[rowIndex];\n\n      if (rowIndex === 0 || !this.options.style.compact || rowIndex == 1 && headersPresent) {\n        doDraw(row, 'top', result);\n      }\n\n      for (let lineNum = 0; lineNum < heightOfRow; lineNum++) {\n        doDraw(row, lineNum, result);\n      }\n\n      if (rowIndex + 1 == cells.length) {\n        doDraw(row, 'bottom', result);\n      }\n    }\n\n    return result.join('\\n');\n  }\n\n  get width() {\n    let str = this.toString().split('\\n');\n    return str[0].length;\n  }\n\n}\n\nfunction doDraw(row, lineNum, result) {\n  let line = [];\n  row.forEach(function (cell) {\n    line.push(cell.draw(lineNum));\n  });\n  let str = line.join('');\n  if (str.length) result.push(str);\n}\n\nmodule.exports = Table;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/cli-table3/src/table.js"],"names":["utils","require","tableLayout","Table","Array","constructor","options","mergeOptions","toString","array","headersPresent","head","length","push","apply","style","cells","makeTableLayout","forEach","row","cell","mergeTableOptions","computeWidths","colWidths","computeHeights","rowHeights","init","result","rowIndex","heightOfRow","compact","doDraw","lineNum","join","width","str","split","line","draw","module","exports"],"mappings":"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","sourcesContent":["const utils = require('./utils');\nconst tableLayout = require('./layout-manager');\n\nclass Table extends Array {\n  constructor(options) {\n    super();\n\n    this.options = utils.mergeOptions(options);\n  }\n\n  toString() {\n    let array = this;\n    let headersPresent = this.options.head && this.options.head.length;\n    if (headersPresent) {\n      array = [this.options.head];\n      if (this.length) {\n        array.push.apply(array, this);\n      }\n    } else {\n      this.options.style.head = [];\n    }\n\n    let cells = tableLayout.makeTableLayout(array);\n\n    cells.forEach(function (row) {\n      row.forEach(function (cell) {\n        cell.mergeTableOptions(this.options, cells);\n      }, this);\n    }, this);\n\n    tableLayout.computeWidths(this.options.colWidths, cells);\n    tableLayout.computeHeights(this.options.rowHeights, cells);\n\n    cells.forEach(function (row) {\n      row.forEach(function (cell) {\n        cell.init(this.options);\n      }, this);\n    }, this);\n\n    let result = [];\n\n    for (let rowIndex = 0; rowIndex < cells.length; rowIndex++) {\n      let row = cells[rowIndex];\n      let heightOfRow = this.options.rowHeights[rowIndex];\n\n      if (rowIndex === 0 || !this.options.style.compact || (rowIndex == 1 && headersPresent)) {\n        doDraw(row, 'top', result);\n      }\n\n      for (let lineNum = 0; lineNum < heightOfRow; lineNum++) {\n        doDraw(row, lineNum, result);\n      }\n\n      if (rowIndex + 1 == cells.length) {\n        doDraw(row, 'bottom', result);\n      }\n    }\n\n    return result.join('\\n');\n  }\n\n  get width() {\n    let str = this.toString().split('\\n');\n    return str[0].length;\n  }\n}\n\nfunction doDraw(row, lineNum, result) {\n  let line = [];\n  row.forEach(function (cell) {\n    line.push(cell.draw(lineNum));\n  });\n  let str = line.join('');\n  if (str.length) result.push(str);\n}\n\nmodule.exports = Table;\n"]},"metadata":{},"sourceType":"script"}