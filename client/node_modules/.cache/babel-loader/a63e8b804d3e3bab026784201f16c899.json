{"ast":null,"code":"const spawn = require('@npmcli/promise-spawn');\n\nconst promiseRetry = require('promise-retry');\n\nconst makeError = require('./make-error.js');\n\nconst whichGit = require('./which.js');\n\nconst makeOpts = require('./opts.js');\n\nconst procLog = require('./proc-log.js');\n\nmodule.exports = (gitArgs, opts = {}) => {\n  const gitPath = whichGit(opts);\n\n  if (gitPath instanceof Error) {\n    return Promise.reject(gitPath);\n  } // undocumented option, mostly only here for tests\n\n\n  const args = opts.allowReplace || gitArgs[0] === '--no-replace-objects' ? gitArgs : ['--no-replace-objects', ...gitArgs];\n  const log = opts.log || procLog;\n  let retry = opts.retry;\n\n  if (retry === null || retry === undefined) {\n    retry = {\n      retries: opts.fetchRetries || 2,\n      factor: opts.fetchRetryFactor || 10,\n      maxTimeout: opts.fetchRetryMaxtimeout || 60000,\n      minTimeout: opts.fetchRetryMintimeout || 1000\n    };\n  }\n\n  return promiseRetry((retry, number) => {\n    if (number !== 1) {\n      log.silly('git', `Retrying git command: ${args.join(' ')} attempt # ${number}`);\n    }\n\n    return spawn(gitPath, args, makeOpts(opts)).catch(er => {\n      const gitError = makeError(er);\n\n      if (!gitError.shouldRetry(number)) {\n        throw gitError;\n      }\n\n      retry(gitError);\n    });\n  }, retry);\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/git/lib/spawn.js"],"names":["spawn","require","promiseRetry","makeError","whichGit","makeOpts","procLog","module","exports","gitArgs","opts","gitPath","Error","Promise","reject","args","allowReplace","log","retry","undefined","retries","fetchRetries","factor","fetchRetryFactor","maxTimeout","fetchRetryMaxtimeout","minTimeout","fetchRetryMintimeout","number","silly","join","catch","er","gitError","shouldRetry"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,uBAAD,CAArB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,eAAD,CAAvB;;AAEAM,MAAM,CAACC,OAAP,GAAiB,CAACC,OAAD,EAAUC,IAAI,GAAG,EAAjB,KAAwB;AACvC,QAAMC,OAAO,GAAGP,QAAQ,CAACM,IAAD,CAAxB;;AAEA,MAAIC,OAAO,YAAYC,KAAvB,EAA8B;AAAE,WAAOC,OAAO,CAACC,MAAR,CAAeH,OAAf,CAAP;AAAgC,GAHzB,CAKvC;;;AACA,QAAMI,IAAI,GAAGL,IAAI,CAACM,YAAL,IAAqBP,OAAO,CAAC,CAAD,CAAP,KAAe,sBAApC,GACTA,OADS,GAET,CAAC,sBAAD,EAAyB,GAAGA,OAA5B,CAFJ;AAIA,QAAMQ,GAAG,GAAGP,IAAI,CAACO,GAAL,IAAYX,OAAxB;AACA,MAAIY,KAAK,GAAGR,IAAI,CAACQ,KAAjB;;AACA,MAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;AACzCD,IAAAA,KAAK,GAAG;AACNE,MAAAA,OAAO,EAAEV,IAAI,CAACW,YAAL,IAAqB,CADxB;AAENC,MAAAA,MAAM,EAAEZ,IAAI,CAACa,gBAAL,IAAyB,EAF3B;AAGNC,MAAAA,UAAU,EAAEd,IAAI,CAACe,oBAAL,IAA6B,KAHnC;AAINC,MAAAA,UAAU,EAAEhB,IAAI,CAACiB,oBAAL,IAA6B;AAJnC,KAAR;AAMD;;AACD,SAAOzB,YAAY,CAAC,CAACgB,KAAD,EAAQU,MAAR,KAAmB;AACrC,QAAIA,MAAM,KAAK,CAAf,EAAkB;AAChBX,MAAAA,GAAG,CAACY,KAAJ,CAAU,KAAV,EAAkB,yBAChBd,IAAI,CAACe,IAAL,CAAU,GAAV,CAAe,cAAaF,MAAO,EADrC;AAED;;AAED,WAAO5B,KAAK,CAACW,OAAD,EAAUI,IAAV,EAAgBV,QAAQ,CAACK,IAAD,CAAxB,CAAL,CACJqB,KADI,CACEC,EAAE,IAAI;AACX,YAAMC,QAAQ,GAAG9B,SAAS,CAAC6B,EAAD,CAA1B;;AACA,UAAI,CAACC,QAAQ,CAACC,WAAT,CAAqBN,MAArB,CAAL,EAAmC;AACjC,cAAMK,QAAN;AACD;;AACDf,MAAAA,KAAK,CAACe,QAAD,CAAL;AACD,KAPI,CAAP;AAQD,GAdkB,EAchBf,KAdgB,CAAnB;AAeD,CAnCD","sourcesContent":["const spawn = require('@npmcli/promise-spawn')\nconst promiseRetry = require('promise-retry')\nconst makeError = require('./make-error.js')\nconst whichGit = require('./which.js')\nconst makeOpts = require('./opts.js')\nconst procLog = require('./proc-log.js')\n\nmodule.exports = (gitArgs, opts = {}) => {\n  const gitPath = whichGit(opts)\n\n  if (gitPath instanceof Error) { return Promise.reject(gitPath) }\n\n  // undocumented option, mostly only here for tests\n  const args = opts.allowReplace || gitArgs[0] === '--no-replace-objects'\n    ? gitArgs\n    : ['--no-replace-objects', ...gitArgs]\n\n  const log = opts.log || procLog\n  let retry = opts.retry\n  if (retry === null || retry === undefined) {\n    retry = {\n      retries: opts.fetchRetries || 2,\n      factor: opts.fetchRetryFactor || 10,\n      maxTimeout: opts.fetchRetryMaxtimeout || 60000,\n      minTimeout: opts.fetchRetryMintimeout || 1000\n    }\n  }\n  return promiseRetry((retry, number) => {\n    if (number !== 1) {\n      log.silly('git', `Retrying git command: ${\n        args.join(' ')} attempt # ${number}`)\n    }\n\n    return spawn(gitPath, args, makeOpts(opts))\n      .catch(er => {\n        const gitError = makeError(er)\n        if (!gitError.shouldRetry(number)) {\n          throw gitError\n        }\n        retry(gitError)\n      })\n  }, retry)\n}\n"]},"metadata":{},"sourceType":"script"}