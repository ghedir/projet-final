{"ast":null,"code":"const {\n  resolve\n} = require('path');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst npa = require('npm-package-arg');\n\nconst semver = require('semver');\n\nconst completion = require('./utils/completion/installed-deep.js');\n\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\n\nclass Rebuild extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Rebuild a package';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'rebuild';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['global', 'bin-links', 'ignore-scripts', ...super.params];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[[<@scope>/]<name>[@<version>] ...]'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n\n  exec(args, cb) {\n    this.rebuild(args).then(() => cb()).catch(cb);\n  }\n\n  async rebuild(args) {\n    const globalTop = resolve(this.npm.globalDir, '..');\n    const where = this.npm.config.get('global') ? globalTop : this.npm.prefix;\n    const arb = new Arborist({ ...this.npm.flatOptions,\n      path: where // TODO when extending ReifyCmd\n      // workspaces: this.workspaceNames,\n\n    });\n\n    if (args.length) {\n      // get the set of nodes matching the name that we want rebuilt\n      const tree = await arb.loadActual();\n      const specs = args.map(arg => {\n        const spec = npa(arg);\n        if (spec.type === 'tag' && spec.rawSpec === '') return spec;\n        if (spec.type !== 'range' && spec.type !== 'version' && spec.type !== 'directory') throw new Error('`npm rebuild` only supports SemVer version/range specifiers');\n        return spec;\n      });\n      const nodes = tree.inventory.filter(node => this.isNode(specs, node));\n      await arb.rebuild({\n        nodes\n      });\n    } else await arb.rebuild();\n\n    this.npm.output('rebuilt dependencies successfully');\n  }\n\n  isNode(specs, node) {\n    return specs.some(spec => {\n      if (spec.type === 'directory') return node.path === spec.fetchSpec;\n      if (spec.name !== node.name) return false;\n      if (spec.rawSpec === '' || spec.rawSpec === '*') return true;\n      const {\n        version\n      } = node.package; // TODO: add tests for a package with missing version\n\n      return semver.satisfies(version, spec.fetchSpec);\n    });\n  }\n\n}\n\nmodule.exports = Rebuild;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/rebuild.js"],"names":["resolve","require","Arborist","npa","semver","completion","ArboristWorkspaceCmd","Rebuild","description","name","params","usage","opts","npm","exec","args","cb","rebuild","then","catch","globalTop","globalDir","where","config","get","prefix","arb","flatOptions","path","length","tree","loadActual","specs","map","arg","spec","type","rawSpec","Error","nodes","inventory","filter","node","isNode","output","some","fetchSpec","version","package","satisfies","module","exports"],"mappings":"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","sourcesContent":["const { resolve } = require('path')\nconst Arborist = require('@npmcli/arborist')\nconst npa = require('npm-package-arg')\nconst semver = require('semver')\nconst completion = require('./utils/completion/installed-deep.js')\n\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\nclass Rebuild extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Rebuild a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'rebuild'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'global',\n      'bin-links',\n      'ignore-scripts',\n      ...super.params,\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[[<@scope>/]<name>[@<version>] ...]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  exec (args, cb) {\n    this.rebuild(args).then(() => cb()).catch(cb)\n  }\n\n  async rebuild (args) {\n    const globalTop = resolve(this.npm.globalDir, '..')\n    const where = this.npm.config.get('global') ? globalTop : this.npm.prefix\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: where,\n      // TODO when extending ReifyCmd\n      // workspaces: this.workspaceNames,\n    })\n\n    if (args.length) {\n      // get the set of nodes matching the name that we want rebuilt\n      const tree = await arb.loadActual()\n      const specs = args.map(arg => {\n        const spec = npa(arg)\n        if (spec.type === 'tag' && spec.rawSpec === '')\n          return spec\n\n        if (spec.type !== 'range' && spec.type !== 'version' && spec.type !== 'directory')\n          throw new Error('`npm rebuild` only supports SemVer version/range specifiers')\n\n        return spec\n      })\n      const nodes = tree.inventory.filter(node => this.isNode(specs, node))\n\n      await arb.rebuild({ nodes })\n    } else\n      await arb.rebuild()\n\n    this.npm.output('rebuilt dependencies successfully')\n  }\n\n  isNode (specs, node) {\n    return specs.some(spec => {\n      if (spec.type === 'directory')\n        return node.path === spec.fetchSpec\n\n      if (spec.name !== node.name)\n        return false\n\n      if (spec.rawSpec === '' || spec.rawSpec === '*')\n        return true\n\n      const { version } = node.package\n      // TODO: add tests for a package with missing version\n      return semver.satisfies(version, spec.fetchSpec)\n    })\n  }\n}\nmodule.exports = Rebuild\n"]},"metadata":{},"sourceType":"script"}