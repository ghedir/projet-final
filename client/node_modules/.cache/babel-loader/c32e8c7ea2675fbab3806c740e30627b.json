{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst color = require('ansicolors');\n\nconst {\n  promisify\n} = require('util');\n\nconst glob = promisify(require('glob'));\nconst readFile = promisify(fs.readFile);\n\nconst BaseCommand = require('./base-command.js');\n\nclass HelpSearch extends BaseCommand {\n  static get description() {\n    return 'Search npm help documentation';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'help-search';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['<text>'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['long'];\n  }\n\n  exec(args, cb) {\n    this.helpSearch(args).then(() => cb()).catch(cb);\n  }\n\n  async helpSearch(args) {\n    if (!args.length) return this.npm.output(this.usage);\n    const docPath = path.resolve(__dirname, '..', 'docs/content');\n    const files = await glob(`${docPath}/*/*.md`);\n    const data = await this.readFiles(files);\n    const results = await this.searchFiles(args, data, files);\n    const formatted = this.formatResults(args, results);\n    if (!formatted.trim()) this.npm.output(`No matches in help for: ${args.join(' ')}\\n`);else this.npm.output(formatted);\n  }\n\n  async readFiles(files) {\n    const res = {};\n    await Promise.all(files.map(async file => {\n      res[file] = (await readFile(file, 'utf8')).replace(/^---\\n(.*\\n)*?---\\n/, '').trim();\n    }));\n    return res;\n  }\n\n  async searchFiles(args, data, files) {\n    const results = [];\n\n    for (const [file, content] of Object.entries(data)) {\n      const lowerCase = content.toLowerCase(); // skip if no matches at all\n\n      if (!args.some(a => lowerCase.includes(a.toLowerCase()))) continue;\n      const lines = content.split(/\\n+/); // if a line has a search term, then skip it and the next line.\n      // if the next line has a search term, then skip all 3\n      // otherwise, set the line to null.  then remove the nulls.\n\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const nextLine = lines[i + 1];\n        let match = false;\n\n        if (nextLine) {\n          match = args.some(a => nextLine.toLowerCase().includes(a.toLowerCase()));\n\n          if (match) {\n            // skip over the next line, and the line after it.\n            i += 2;\n            continue;\n          }\n        }\n\n        match = args.some(a => line.toLowerCase().includes(a.toLowerCase()));\n\n        if (match) {\n          // skip over the next line\n          i++;\n          continue;\n        }\n\n        lines[i] = null;\n      } // now squish any string of nulls into a single null\n\n\n      const pruned = lines.reduce((l, r) => {\n        if (!(r === null && l[l.length - 1] === null)) l.push(r);\n        return l;\n      }, []);\n      if (pruned[pruned.length - 1] === null) pruned.pop();\n      if (pruned[0] === null) pruned.shift(); // now count how many args were found\n\n      const found = {};\n      let totalHits = 0;\n\n      for (const line of pruned) {\n        for (const arg of args) {\n          const hit = (line || '').toLowerCase().split(arg.toLowerCase()).length - 1;\n\n          if (hit > 0) {\n            found[arg] = (found[arg] || 0) + hit;\n            totalHits += hit;\n          }\n        }\n      }\n\n      const cmd = 'npm help ' + path.basename(file, '.md').replace(/^npm-/, '');\n      results.push({\n        file,\n        cmd,\n        lines: pruned,\n        found: Object.keys(found),\n        hits: found,\n        totalHits\n      });\n    } // sort results by number of results found, then by number of hits\n    // then by number of matching lines\n    // coverage is ignored here because the contents of results are\n    // nondeterministic due to either glob or readFiles or Object.entries\n\n\n    return results.sort(\n    /* istanbul ignore next */\n    (a, b) => a.found.length > b.found.length ? -1 : a.found.length < b.found.length ? 1 : a.totalHits > b.totalHits ? -1 : a.totalHits < b.totalHits ? 1 : a.lines.length > b.lines.length ? -1 : a.lines.length < b.lines.length ? 1 : 0).slice(0, 10);\n  }\n\n  formatResults(args, results) {\n    const cols = Math.min(process.stdout.columns || Infinity, 80) + 1;\n    const out = results.map(res => {\n      const out = [res.cmd];\n      const r = Object.keys(res.hits).map(k => `${k}:${res.hits[k]}`).sort((a, b) => a > b ? 1 : -1).join(' ');\n      out.push(' '.repeat(Math.max(1, cols - out.join(' ').length - r.length - 1)));\n      out.push(r);\n      if (!this.npm.config.get('long')) return out.join('');\n      out.unshift('\\n\\n');\n      out.push('\\n');\n      out.push('-'.repeat(cols - 1) + '\\n');\n      res.lines.forEach((line, i) => {\n        if (line === null || i > 3) return;\n\n        if (!this.npm.color) {\n          out.push(line + '\\n');\n          return;\n        }\n\n        const hilitLine = [];\n\n        for (const arg of args) {\n          const finder = line.toLowerCase().split(arg.toLowerCase());\n          let p = 0;\n\n          for (const f of finder) {\n            hilitLine.push(line.substr(p, f.length));\n            const word = line.substr(p + f.length, arg.length);\n            const hilit = color.bgBlack(color.red(word));\n            hilitLine.push(hilit);\n            p += f.length + arg.length;\n          }\n        }\n\n        out.push(hilitLine.join('') + '\\n');\n      });\n      return out.join('');\n    }).join('\\n');\n    const finalOut = results.length && !this.npm.config.get('long') ? 'Top hits for ' + args.map(JSON.stringify).join(' ') + '\\n' + '—'.repeat(cols - 1) + '\\n' + out + '\\n' + '—'.repeat(cols - 1) + '\\n' + '(run with -l or --long to see more context)' : out;\n    return finalOut.trim();\n  }\n\n}\n\nmodule.exports = HelpSearch;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/help-search.js"],"names":["fs","require","path","color","promisify","glob","readFile","BaseCommand","HelpSearch","description","name","usage","params","exec","args","cb","helpSearch","then","catch","length","npm","output","docPath","resolve","__dirname","files","data","readFiles","results","searchFiles","formatted","formatResults","trim","join","res","Promise","all","map","file","replace","content","Object","entries","lowerCase","toLowerCase","some","a","includes","lines","split","i","line","nextLine","match","pruned","reduce","l","r","push","pop","shift","found","totalHits","arg","hit","cmd","basename","keys","hits","sort","b","slice","cols","Math","min","process","stdout","columns","Infinity","out","k","repeat","max","config","get","unshift","forEach","hilitLine","finder","p","f","substr","word","hilit","bgBlack","red","finalOut","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst color = require('ansicolors')\nconst { promisify } = require('util')\nconst glob = promisify(require('glob'))\nconst readFile = promisify(fs.readFile)\nconst BaseCommand = require('./base-command.js')\n\nclass HelpSearch extends BaseCommand {\n  static get description () {\n    return 'Search npm help documentation'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'help-search'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<text>']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['long']\n  }\n\n  exec (args, cb) {\n    this.helpSearch(args).then(() => cb()).catch(cb)\n  }\n\n  async helpSearch (args) {\n    if (!args.length)\n      return this.npm.output(this.usage)\n\n    const docPath = path.resolve(__dirname, '..', 'docs/content')\n    const files = await glob(`${docPath}/*/*.md`)\n    const data = await this.readFiles(files)\n    const results = await this.searchFiles(args, data, files)\n    const formatted = this.formatResults(args, results)\n    if (!formatted.trim())\n      this.npm.output(`No matches in help for: ${args.join(' ')}\\n`)\n    else\n      this.npm.output(formatted)\n  }\n\n  async readFiles (files) {\n    const res = {}\n    await Promise.all(files.map(async file => {\n      res[file] = (await readFile(file, 'utf8'))\n        .replace(/^---\\n(.*\\n)*?---\\n/, '').trim()\n    }))\n    return res\n  }\n\n  async searchFiles (args, data, files) {\n    const results = []\n    for (const [file, content] of Object.entries(data)) {\n      const lowerCase = content.toLowerCase()\n      // skip if no matches at all\n      if (!args.some(a => lowerCase.includes(a.toLowerCase())))\n        continue\n\n      const lines = content.split(/\\n+/)\n\n      // if a line has a search term, then skip it and the next line.\n      // if the next line has a search term, then skip all 3\n      // otherwise, set the line to null.  then remove the nulls.\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i]\n        const nextLine = lines[i + 1]\n        let match = false\n        if (nextLine) {\n          match = args.some(a =>\n            nextLine.toLowerCase().includes(a.toLowerCase()))\n          if (match) {\n            // skip over the next line, and the line after it.\n            i += 2\n            continue\n          }\n        }\n\n        match = args.some(a => line.toLowerCase().includes(a.toLowerCase()))\n\n        if (match) {\n          // skip over the next line\n          i++\n          continue\n        }\n\n        lines[i] = null\n      }\n\n      // now squish any string of nulls into a single null\n      const pruned = lines.reduce((l, r) => {\n        if (!(r === null && l[l.length - 1] === null))\n          l.push(r)\n\n        return l\n      }, [])\n\n      if (pruned[pruned.length - 1] === null)\n        pruned.pop()\n\n      if (pruned[0] === null)\n        pruned.shift()\n\n      // now count how many args were found\n      const found = {}\n      let totalHits = 0\n      for (const line of pruned) {\n        for (const arg of args) {\n          const hit = (line || '').toLowerCase()\n            .split(arg.toLowerCase()).length - 1\n\n          if (hit > 0) {\n            found[arg] = (found[arg] || 0) + hit\n            totalHits += hit\n          }\n        }\n      }\n\n      const cmd = 'npm help ' +\n        path.basename(file, '.md').replace(/^npm-/, '')\n      results.push({\n        file,\n        cmd,\n        lines: pruned,\n        found: Object.keys(found),\n        hits: found,\n        totalHits,\n      })\n    }\n\n    // sort results by number of results found, then by number of hits\n    // then by number of matching lines\n\n    // coverage is ignored here because the contents of results are\n    // nondeterministic due to either glob or readFiles or Object.entries\n    return results.sort(/* istanbul ignore next */ (a, b) =>\n      a.found.length > b.found.length ? -1\n      : a.found.length < b.found.length ? 1\n      : a.totalHits > b.totalHits ? -1\n      : a.totalHits < b.totalHits ? 1\n      : a.lines.length > b.lines.length ? -1\n      : a.lines.length < b.lines.length ? 1\n      : 0).slice(0, 10)\n  }\n\n  formatResults (args, results) {\n    const cols = Math.min(process.stdout.columns || Infinity, 80) + 1\n\n    const out = results.map(res => {\n      const out = [res.cmd]\n      const r = Object.keys(res.hits)\n        .map(k => `${k}:${res.hits[k]}`)\n        .sort((a, b) => a > b ? 1 : -1)\n        .join(' ')\n\n      out.push(' '.repeat((Math.max(1, cols - out.join(' ').length - r.length - 1))))\n      out.push(r)\n\n      if (!this.npm.config.get('long'))\n        return out.join('')\n\n      out.unshift('\\n\\n')\n      out.push('\\n')\n      out.push('-'.repeat(cols - 1) + '\\n')\n      res.lines.forEach((line, i) => {\n        if (line === null || i > 3)\n          return\n\n        if (!this.npm.color) {\n          out.push(line + '\\n')\n          return\n        }\n        const hilitLine = []\n        for (const arg of args) {\n          const finder = line.toLowerCase().split(arg.toLowerCase())\n          let p = 0\n          for (const f of finder) {\n            hilitLine.push(line.substr(p, f.length))\n            const word = line.substr(p + f.length, arg.length)\n            const hilit = color.bgBlack(color.red(word))\n            hilitLine.push(hilit)\n            p += f.length + arg.length\n          }\n        }\n        out.push(hilitLine.join('') + '\\n')\n      })\n\n      return out.join('')\n    }).join('\\n')\n\n    const finalOut = results.length && !this.npm.config.get('long')\n      ? 'Top hits for ' + (args.map(JSON.stringify).join(' ')) + '\\n' +\n      '—'.repeat(cols - 1) + '\\n' +\n      out + '\\n' +\n      '—'.repeat(cols - 1) + '\\n' +\n      '(run with -l or --long to see more context)'\n      : out\n\n    return finalOut.trim()\n  }\n}\nmodule.exports = HelpSearch\n"]},"metadata":{},"sourceType":"script"}