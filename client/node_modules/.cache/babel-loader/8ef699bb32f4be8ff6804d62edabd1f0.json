{"ast":null,"code":"module.exports = cls => class Deduper extends cls {\n  async dedupe(options = {}) {\n    // allow the user to set options on the ctor as well.\n    // XXX: deprecate separate method options objects.\n    options = { ...this.options,\n      ...options\n    };\n    const tree = await this.loadVirtual().catch(() => this.loadActual());\n    const names = [];\n\n    for (const name of tree.inventory.query('name')) {\n      if (tree.inventory.query('name', name).size > 1) {\n        names.push(name);\n      }\n    }\n\n    return this.reify({ ...options,\n      preferDedupe: true,\n      update: {\n        names\n      }\n    });\n  }\n\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/arborist/lib/arborist/deduper.js"],"names":["module","exports","cls","Deduper","dedupe","options","tree","loadVirtual","catch","loadActual","names","name","inventory","query","size","push","reify","preferDedupe","update"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,GAAG,IAAI,MAAMC,OAAN,SAAsBD,GAAtB,CAA0B;AACpC,QAANE,MAAM,CAAEC,OAAO,GAAG,EAAZ,EAAgB;AAC1B;AACA;AACAA,IAAAA,OAAO,GAAG,EAAE,GAAG,KAAKA,OAAV;AAAmB,SAAGA;AAAtB,KAAV;AACA,UAAMC,IAAI,GAAG,MAAM,KAAKC,WAAL,GAAmBC,KAAnB,CAAyB,MAAM,KAAKC,UAAL,EAA/B,CAAnB;AACA,UAAMC,KAAK,GAAG,EAAd;;AACA,SAAK,MAAMC,IAAX,IAAmBL,IAAI,CAACM,SAAL,CAAeC,KAAf,CAAqB,MAArB,CAAnB,EAAiD;AAC/C,UAAIP,IAAI,CAACM,SAAL,CAAeC,KAAf,CAAqB,MAArB,EAA6BF,IAA7B,EAAmCG,IAAnC,GAA0C,CAA9C,EAAiD;AAC/CJ,QAAAA,KAAK,CAACK,IAAN,CAAWJ,IAAX;AACD;AACF;;AACD,WAAO,KAAKK,KAAL,CAAW,EAChB,GAAGX,OADa;AAEhBY,MAAAA,YAAY,EAAE,IAFE;AAGhBC,MAAAA,MAAM,EAAE;AAAER,QAAAA;AAAF;AAHQ,KAAX,CAAP;AAKD;;AAjB+C,CAAlD","sourcesContent":["module.exports = cls => class Deduper extends cls {\n  async dedupe (options = {}) {\n    // allow the user to set options on the ctor as well.\n    // XXX: deprecate separate method options objects.\n    options = { ...this.options, ...options }\n    const tree = await this.loadVirtual().catch(() => this.loadActual())\n    const names = []\n    for (const name of tree.inventory.query('name')) {\n      if (tree.inventory.query('name', name).size > 1) {\n        names.push(name)\n      }\n    }\n    return this.reify({\n      ...options,\n      preferDedupe: true,\n      update: { names },\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}