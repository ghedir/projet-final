{"ast":null,"code":"const {\n  format\n} = require('util');\n\nconst semver = require('semver');\n\nconst checkEngine = (target, npmVer, nodeVer, force = false) => {\n  const nodev = force ? null : nodeVer;\n  const eng = target.engines;\n  const opt = {\n    includePrerelease: true\n  };\n\n  if (!eng) {\n    return;\n  }\n\n  const nodeFail = nodev && eng.node && !semver.satisfies(nodev, eng.node, opt);\n  const npmFail = npmVer && eng.npm && !semver.satisfies(npmVer, eng.npm, opt);\n\n  if (nodeFail || npmFail) {\n    throw Object.assign(new Error('Unsupported engine'), {\n      pkgid: target._id,\n      current: {\n        node: nodeVer,\n        npm: npmVer\n      },\n      required: eng,\n      code: 'EBADENGINE'\n    });\n  }\n};\n\nconst checkPlatform = (target, force = false) => {\n  if (force) {\n    return;\n  }\n\n  const platform = process.platform;\n  const arch = process.arch;\n  const osOk = target.os ? checkList(platform, target.os) : true;\n  const cpuOk = target.cpu ? checkList(arch, target.cpu) : true;\n\n  if (!osOk || !cpuOk) {\n    throw Object.assign(new Error('Unsupported platform'), {\n      pkgid: target._id,\n      current: {\n        os: platform,\n        cpu: arch\n      },\n      required: {\n        os: target.os,\n        cpu: target.cpu\n      },\n      code: 'EBADPLATFORM'\n    });\n  }\n};\n\nconst checkList = (value, list) => {\n  if (typeof list === 'string') {\n    list = [list];\n  }\n\n  if (list.length === 1 && list[0] === 'any') {\n    return true;\n  } // match none of the negated values, and at least one of the\n  // non-negated values, if any are present.\n\n\n  let negated = 0;\n  let match = false;\n\n  for (const entry of list) {\n    const negate = entry.charAt(0) === '!';\n    const test = negate ? entry.slice(1) : entry;\n\n    if (negate) {\n      negated++;\n\n      if (value === test) {\n        return false;\n      }\n    } else {\n      match = match || value === test;\n    }\n  }\n\n  return match || negated === list.length;\n};\n\nmodule.exports = {\n  checkEngine,\n  checkPlatform\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/npm-install-checks/index.js"],"names":["format","require","semver","checkEngine","target","npmVer","nodeVer","force","nodev","eng","engines","opt","includePrerelease","nodeFail","node","satisfies","npmFail","npm","Object","assign","Error","pkgid","_id","current","required","code","checkPlatform","platform","process","arch","osOk","os","checkList","cpuOk","cpu","value","list","length","negated","match","entry","negate","charAt","test","slice","module","exports"],"mappings":"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","sourcesContent":["const {format} = require('util')\nconst semver = require('semver')\n\nconst checkEngine = (target, npmVer, nodeVer, force = false) => {\n  const nodev = force ? null : nodeVer\n  const eng = target.engines\n  const opt = { includePrerelease: true }\n  if (!eng) {\n    return\n  }\n\n  const nodeFail = nodev && eng.node && !semver.satisfies(nodev, eng.node, opt)\n  const npmFail = npmVer && eng.npm && !semver.satisfies(npmVer, eng.npm, opt)\n  if (nodeFail || npmFail) {\n    throw Object.assign(new Error('Unsupported engine'), {\n      pkgid: target._id,\n      current: { node: nodeVer, npm: npmVer },\n      required: eng,\n      code: 'EBADENGINE'\n    })\n  }\n}\n\nconst checkPlatform = (target, force = false) => {\n  if (force) {\n    return\n  }\n\n  const platform = process.platform\n  const arch = process.arch\n  const osOk = target.os ? checkList(platform, target.os) : true\n  const cpuOk = target.cpu ? checkList(arch, target.cpu) : true\n\n  if (!osOk || !cpuOk) {\n    throw Object.assign(new Error('Unsupported platform'), {\n      pkgid: target._id,\n      current: {\n        os: platform,\n        cpu: arch\n      },\n      required: {\n        os: target.os,\n        cpu: target.cpu\n      },\n      code: 'EBADPLATFORM'\n    })\n  }\n}\n\nconst checkList = (value, list) => {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n  if (list.length === 1 && list[0] === 'any') {\n    return true\n  }\n  // match none of the negated values, and at least one of the\n  // non-negated values, if any are present.\n  let negated = 0\n  let match = false\n  for (const entry of list) {\n    const negate = entry.charAt(0) === '!'\n    const test = negate ? entry.slice(1) : entry\n    if (negate) {\n      negated ++\n      if (value === test) {\n        return false\n      }\n    } else {\n      match = match || value === test\n    }\n  }\n  return match || negated === list.length\n}\n\nmodule.exports = {\n  checkEngine,\n  checkPlatform\n}\n"]},"metadata":{},"sourceType":"script"}