{"ast":null,"code":"const libexec = require('libnpmexec');\n\nconst BaseCommand = require('./base-command.js');\n\nconst getLocationMsg = require('./exec/get-workspace-location-msg.js'); // it's like this:\n//\n// npm x pkg@version <-- runs the bin named \"pkg\" or the only bin if only 1\n//\n// { name: 'pkg', bin: { pkg: 'pkg.js', foo: 'foo.js' }} <-- run pkg\n// { name: 'pkg', bin: { foo: 'foo.js' }} <-- run foo?\n//\n// npm x -p pkg@version -- foo\n//\n// npm x -p pkg@version -- foo --registry=/dev/null\n//\n// const pkg = npm.config.get('package') || getPackageFrom(args[0])\n// const cmd = getCommand(pkg, args[0])\n// --> npm x -c 'cmd ...args.slice(1)'\n//\n// we've resolved cmd and args, and escaped them properly, and installed the\n// relevant packages.\n//\n// Add the ${npx install prefix}/node_modules/.bin to PATH\n//\n// pkg = readPackageJson('./package.json')\n// pkg.scripts.___npx = ${the -c arg}\n// runScript({ pkg, event: 'npx', ... })\n// process.env.npm_lifecycle_event = 'npx'\n\n\nclass Exec extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Run a command from a local or remote npm package';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['package', 'call', 'workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'exec';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['-- <pkg>[@<version>] [args...]', '--package=<pkg>[@<version>] -- <cmd> [args...]', '-c \\'<cmd> [args...]\\'', '--package=foo -c \\'<cmd> [args...]\\''];\n  }\n\n  exec(args, cb) {\n    const path = this.npm.localPrefix;\n    const runPath = process.cwd();\n\n    this._exec(args, {\n      path,\n      runPath\n    }).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this._execWorkspaces(args, filters).then(() => cb()).catch(cb);\n  } // When commands go async and we can dump the boilerplate exec methods this\n  // can be named correctly\n\n\n  async _exec(_args, {\n    locationMsg,\n    path,\n    runPath\n  }) {\n    const args = [..._args];\n    const call = this.npm.config.get('call');\n    const {\n      flatOptions,\n      localBin,\n      log,\n      globalBin\n    } = this.npm;\n\n    const output = (...outputArgs) => this.npm.output(...outputArgs);\n\n    const scriptShell = this.npm.config.get('script-shell') || undefined;\n    const packages = this.npm.config.get('package');\n    const yes = this.npm.config.get('yes');\n    if (call && _args.length) throw this.usage;\n    return libexec({ ...flatOptions,\n      args,\n      call,\n      localBin,\n      locationMsg,\n      log,\n      globalBin,\n      output,\n      packages,\n      path,\n      runPath,\n      scriptShell,\n      yes\n    });\n  }\n\n  async _execWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n    const color = this.npm.color;\n\n    for (const path of this.workspacePaths) {\n      const locationMsg = await getLocationMsg({\n        color,\n        path\n      });\n      await this._exec(args, {\n        locationMsg,\n        path,\n        runPath: path\n      });\n    }\n  }\n\n}\n\nmodule.exports = Exec;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/exec.js"],"names":["libexec","require","BaseCommand","getLocationMsg","Exec","description","params","name","usage","exec","args","cb","path","npm","localPrefix","runPath","process","cwd","_exec","then","catch","execWorkspaces","filters","_execWorkspaces","_args","locationMsg","call","config","get","flatOptions","localBin","log","globalBin","output","outputArgs","scriptShell","undefined","packages","yes","length","setWorkspaces","color","workspacePaths","module","exports"],"mappings":"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","sourcesContent":["const libexec = require('libnpmexec')\nconst BaseCommand = require('./base-command.js')\nconst getLocationMsg = require('./exec/get-workspace-location-msg.js')\n\n// it's like this:\n//\n// npm x pkg@version <-- runs the bin named \"pkg\" or the only bin if only 1\n//\n// { name: 'pkg', bin: { pkg: 'pkg.js', foo: 'foo.js' }} <-- run pkg\n// { name: 'pkg', bin: { foo: 'foo.js' }} <-- run foo?\n//\n// npm x -p pkg@version -- foo\n//\n// npm x -p pkg@version -- foo --registry=/dev/null\n//\n// const pkg = npm.config.get('package') || getPackageFrom(args[0])\n// const cmd = getCommand(pkg, args[0])\n// --> npm x -c 'cmd ...args.slice(1)'\n//\n// we've resolved cmd and args, and escaped them properly, and installed the\n// relevant packages.\n//\n// Add the ${npx install prefix}/node_modules/.bin to PATH\n//\n// pkg = readPackageJson('./package.json')\n// pkg.scripts.___npx = ${the -c arg}\n// runScript({ pkg, event: 'npx', ... })\n// process.env.npm_lifecycle_event = 'npx'\n\nclass Exec extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Run a command from a local or remote npm package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['package', 'call', 'workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'exec'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      '-- <pkg>[@<version>] [args...]',\n      '--package=<pkg>[@<version>] -- <cmd> [args...]',\n      '-c \\'<cmd> [args...]\\'',\n      '--package=foo -c \\'<cmd> [args...]\\'',\n    ]\n  }\n\n  exec (args, cb) {\n    const path = this.npm.localPrefix\n    const runPath = process.cwd()\n    this._exec(args, { path, runPath }).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this._execWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  // When commands go async and we can dump the boilerplate exec methods this\n  // can be named correctly\n  async _exec (_args, { locationMsg, path, runPath }) {\n    const args = [..._args]\n    const call = this.npm.config.get('call')\n    const {\n      flatOptions,\n      localBin,\n      log,\n      globalBin,\n    } = this.npm\n    const output = (...outputArgs) => this.npm.output(...outputArgs)\n    const scriptShell = this.npm.config.get('script-shell') || undefined\n    const packages = this.npm.config.get('package')\n    const yes = this.npm.config.get('yes')\n\n    if (call && _args.length)\n      throw this.usage\n\n    return libexec({\n      ...flatOptions,\n      args,\n      call,\n      localBin,\n      locationMsg,\n      log,\n      globalBin,\n      output,\n      packages,\n      path,\n      runPath,\n      scriptShell,\n      yes,\n    })\n  }\n\n  async _execWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n    const color = this.npm.color\n\n    for (const path of this.workspacePaths) {\n      const locationMsg = await getLocationMsg({ color, path })\n      await this._exec(args, {\n        locationMsg,\n        path,\n        runPath: path,\n      })\n    }\n  }\n}\n\nmodule.exports = Exec\n"]},"metadata":{},"sourceType":"script"}