{"ast":null,"code":"/* eslint node/no-deprecated-api: \"off\" */\nconst semver = require('semver');\n\nconst {\n  basename\n} = require('path');\n\nconst {\n  parse\n} = require('url');\n\nmodule.exports = (name, tgz) => {\n  const base = basename(tgz);\n\n  if (!base.endsWith('.tgz')) {\n    return null;\n  }\n\n  const u = parse(tgz);\n\n  if (/^https?:/.test(u.protocol)) {\n    // registry url?  check for most likely pattern.\n    // either /@foo/bar/-/bar-1.2.3.tgz or\n    // /foo/-/foo-1.2.3.tgz, and fall through to\n    // basename checking.  Note that registries can\n    // be mounted below the root url, so /a/b/-/x/y/foo/-/foo-1.2.3.tgz\n    // is a potential option.\n    const tfsplit = u.path.substr(1).split('/-/');\n\n    if (tfsplit.length > 1) {\n      const afterTF = tfsplit.pop();\n\n      if (afterTF === base) {\n        const pre = tfsplit.pop();\n        const preSplit = pre.split(/\\/|%2f/i);\n        const project = preSplit.pop();\n        const scope = preSplit.pop();\n        return versionFromBaseScopeName(base, scope, project);\n      }\n    }\n  }\n\n  const split = name.split(/\\/|%2f/i);\n  const project = split.pop();\n  const scope = split.pop();\n  return versionFromBaseScopeName(base, scope, project);\n};\n\nconst versionFromBaseScopeName = (base, scope, name) => {\n  if (!base.startsWith(name + '-')) {\n    return null;\n  }\n\n  const parsed = semver.parse(base.substring(name.length + 1, base.length - 4));\n  return parsed ? {\n    name: scope && scope.charAt(0) === '@' ? `${scope}/${name}` : name,\n    version: parsed.version\n  } : null;\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/arborist/lib/version-from-tgz.js"],"names":["semver","require","basename","parse","module","exports","name","tgz","base","endsWith","u","test","protocol","tfsplit","path","substr","split","length","afterTF","pop","pre","preSplit","project","scope","versionFromBaseScopeName","startsWith","parsed","substring","charAt","version"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAaD,OAAO,CAAC,MAAD,CAA1B;;AACA,MAAM;AAACE,EAAAA;AAAD,IAAUF,OAAO,CAAC,KAAD,CAAvB;;AACAG,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC9B,QAAMC,IAAI,GAAGN,QAAQ,CAACK,GAAD,CAArB;;AACA,MAAI,CAACC,IAAI,CAACC,QAAL,CAAc,MAAd,CAAL,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,QAAMC,CAAC,GAAGP,KAAK,CAACI,GAAD,CAAf;;AACA,MAAI,WAAWI,IAAX,CAAgBD,CAAC,CAACE,QAAlB,CAAJ,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,OAAO,GAAGH,CAAC,CAACI,IAAF,CAAOC,MAAP,CAAc,CAAd,EAAiBC,KAAjB,CAAuB,KAAvB,CAAhB;;AACA,QAAIH,OAAO,CAACI,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAMC,OAAO,GAAGL,OAAO,CAACM,GAAR,EAAhB;;AACA,UAAID,OAAO,KAAKV,IAAhB,EAAsB;AACpB,cAAMY,GAAG,GAAGP,OAAO,CAACM,GAAR,EAAZ;AACA,cAAME,QAAQ,GAAGD,GAAG,CAACJ,KAAJ,CAAU,SAAV,CAAjB;AACA,cAAMM,OAAO,GAAGD,QAAQ,CAACF,GAAT,EAAhB;AACA,cAAMI,KAAK,GAAGF,QAAQ,CAACF,GAAT,EAAd;AACA,eAAOK,wBAAwB,CAAChB,IAAD,EAAOe,KAAP,EAAcD,OAAd,CAA/B;AACD;AACF;AACF;;AAED,QAAMN,KAAK,GAAGV,IAAI,CAACU,KAAL,CAAW,SAAX,CAAd;AACA,QAAMM,OAAO,GAAGN,KAAK,CAACG,GAAN,EAAhB;AACA,QAAMI,KAAK,GAAGP,KAAK,CAACG,GAAN,EAAd;AACA,SAAOK,wBAAwB,CAAChB,IAAD,EAAOe,KAAP,EAAcD,OAAd,CAA/B;AACD,CA/BD;;AAiCA,MAAME,wBAAwB,GAAG,CAAChB,IAAD,EAAOe,KAAP,EAAcjB,IAAd,KAAuB;AACtD,MAAI,CAACE,IAAI,CAACiB,UAAL,CAAgBnB,IAAI,GAAG,GAAvB,CAAL,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,QAAMoB,MAAM,GAAG1B,MAAM,CAACG,KAAP,CAAaK,IAAI,CAACmB,SAAL,CAAerB,IAAI,CAACW,MAAL,GAAc,CAA7B,EAAgCT,IAAI,CAACS,MAAL,GAAc,CAA9C,CAAb,CAAf;AACA,SAAOS,MAAM,GAAG;AACdpB,IAAAA,IAAI,EAAEiB,KAAK,IAAIA,KAAK,CAACK,MAAN,CAAa,CAAb,MAAoB,GAA7B,GAAoC,GAAEL,KAAM,IAAGjB,IAAK,EAApD,GAAwDA,IADhD;AAEduB,IAAAA,OAAO,EAAEH,MAAM,CAACG;AAFF,GAAH,GAGT,IAHJ;AAID,CAVD","sourcesContent":["/* eslint node/no-deprecated-api: \"off\" */\nconst semver = require('semver')\nconst {basename} = require('path')\nconst {parse} = require('url')\nmodule.exports = (name, tgz) => {\n  const base = basename(tgz)\n  if (!base.endsWith('.tgz')) {\n    return null\n  }\n\n  const u = parse(tgz)\n  if (/^https?:/.test(u.protocol)) {\n    // registry url?  check for most likely pattern.\n    // either /@foo/bar/-/bar-1.2.3.tgz or\n    // /foo/-/foo-1.2.3.tgz, and fall through to\n    // basename checking.  Note that registries can\n    // be mounted below the root url, so /a/b/-/x/y/foo/-/foo-1.2.3.tgz\n    // is a potential option.\n    const tfsplit = u.path.substr(1).split('/-/')\n    if (tfsplit.length > 1) {\n      const afterTF = tfsplit.pop()\n      if (afterTF === base) {\n        const pre = tfsplit.pop()\n        const preSplit = pre.split(/\\/|%2f/i)\n        const project = preSplit.pop()\n        const scope = preSplit.pop()\n        return versionFromBaseScopeName(base, scope, project)\n      }\n    }\n  }\n\n  const split = name.split(/\\/|%2f/i)\n  const project = split.pop()\n  const scope = split.pop()\n  return versionFromBaseScopeName(base, scope, project)\n}\n\nconst versionFromBaseScopeName = (base, scope, name) => {\n  if (!base.startsWith(name + '-')) {\n    return null\n  }\n\n  const parsed = semver.parse(base.substring(name.length + 1, base.length - 4))\n  return parsed ? {\n    name: scope && scope.charAt(0) === '@' ? `${scope}/${name}` : name,\n    version: parsed.version,\n  } : null\n}\n"]},"metadata":{},"sourceType":"script"}