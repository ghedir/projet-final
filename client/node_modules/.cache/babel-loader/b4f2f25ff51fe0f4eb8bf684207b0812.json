{"ast":null,"code":"const isWindows = require('./is-windows.js');\n\nconst binTarget = require('./bin-target.js');\n\nconst {\n  dirname,\n  resolve,\n  relative\n} = require('path');\n\nconst linkBin = isWindows ? require('./shim-bin.js') : require('./link-bin.js');\n\nconst normalize = require('npm-normalize-package-bin');\n\nconst linkBins = ({\n  path,\n  pkg,\n  top,\n  force\n}) => {\n  pkg = normalize(pkg);\n  if (!pkg.bin) return Promise.resolve([]);\n  const promises = [];\n  const target = binTarget({\n    path,\n    top\n  });\n\n  for (const [key, val] of Object.entries(pkg.bin)) {\n    const to = resolve(target, key);\n    const absFrom = resolve(path, val);\n    const from = relative(dirname(to), absFrom);\n    promises.push(linkBin({\n      path,\n      from,\n      to,\n      absFrom,\n      force\n    }));\n  }\n\n  return Promise.all(promises);\n};\n\nmodule.exports = linkBins;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/bin-links/lib/link-bins.js"],"names":["isWindows","require","binTarget","dirname","resolve","relative","linkBin","normalize","linkBins","path","pkg","top","force","bin","Promise","promises","target","key","val","Object","entries","to","absFrom","from","push","all","module","exports"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA;AAApB,IAAiCJ,OAAO,CAAC,MAAD,CAA9C;;AACA,MAAMK,OAAO,GAAGN,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAV,GAA8BA,OAAO,CAAC,eAAD,CAA9D;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,2BAAD,CAAzB;;AAEA,MAAMO,QAAQ,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,GAAP;AAAYC,EAAAA,GAAZ;AAAiBC,EAAAA;AAAjB,CAAD,KAA6B;AAC5CF,EAAAA,GAAG,GAAGH,SAAS,CAACG,GAAD,CAAf;AACA,MAAI,CAACA,GAAG,CAACG,GAAT,EACE,OAAOC,OAAO,CAACV,OAAR,CAAgB,EAAhB,CAAP;AACF,QAAMW,QAAQ,GAAG,EAAjB;AACA,QAAMC,MAAM,GAAGd,SAAS,CAAC;AAACO,IAAAA,IAAD;AAAOE,IAAAA;AAAP,GAAD,CAAxB;;AACA,OAAK,MAAM,CAACM,GAAD,EAAMC,GAAN,CAAX,IAAyBC,MAAM,CAACC,OAAP,CAAeV,GAAG,CAACG,GAAnB,CAAzB,EAAkD;AAChD,UAAMQ,EAAE,GAAGjB,OAAO,CAACY,MAAD,EAASC,GAAT,CAAlB;AACA,UAAMK,OAAO,GAAGlB,OAAO,CAACK,IAAD,EAAOS,GAAP,CAAvB;AACA,UAAMK,IAAI,GAAGlB,QAAQ,CAACF,OAAO,CAACkB,EAAD,CAAR,EAAcC,OAAd,CAArB;AACAP,IAAAA,QAAQ,CAACS,IAAT,CAAclB,OAAO,CAAC;AAACG,MAAAA,IAAD;AAAOc,MAAAA,IAAP;AAAaF,MAAAA,EAAb;AAAiBC,MAAAA,OAAjB;AAA0BV,MAAAA;AAA1B,KAAD,CAArB;AACD;;AACD,SAAOE,OAAO,CAACW,GAAR,CAAYV,QAAZ,CAAP;AACD,CAbD;;AAeAW,MAAM,CAACC,OAAP,GAAiBnB,QAAjB","sourcesContent":["const isWindows = require('./is-windows.js')\nconst binTarget = require('./bin-target.js')\nconst { dirname, resolve, relative } = require('path')\nconst linkBin = isWindows ? require('./shim-bin.js') : require('./link-bin.js')\nconst normalize = require('npm-normalize-package-bin')\n\nconst linkBins = ({path, pkg, top, force}) => {\n  pkg = normalize(pkg)\n  if (!pkg.bin)\n    return Promise.resolve([])\n  const promises = []\n  const target = binTarget({path, top})\n  for (const [key, val] of Object.entries(pkg.bin)) {\n    const to = resolve(target, key)\n    const absFrom = resolve(path, val)\n    const from = relative(dirname(to), absFrom)\n    promises.push(linkBin({path, from, to, absFrom, force}))\n  }\n  return Promise.all(promises)\n}\n\nmodule.exports = linkBins\n"]},"metadata":{},"sourceType":"script"}