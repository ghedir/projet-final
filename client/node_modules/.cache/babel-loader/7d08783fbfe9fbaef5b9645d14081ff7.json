{"ast":null,"code":"module.exports = {\n  diffApply: diffApply,\n  jsonPatchPathConverter: jsonPatchPathConverter\n};\n/*\n  const obj1 = {a: 3, b: 5};\n  diffApply(obj1,\n    [\n      { \"op\": \"remove\", \"path\": ['b'] },\n      { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 },\n      { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n    ]\n  );\n  obj1; // {a: 4, c: 5}\n\n  // using converter to apply jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  const obj2 = {a: 3, b: 5};\n  diffApply(obj2, [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ], jsonPatchPathConverter);\n  obj2; // {a: 4, c: 5}\n\n  // arrays\n  const obj3 = {a: 4, b: [1, 2, 3]};\n  diffApply(obj3, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 9 }\n  ]);\n  obj3; // {a: 3, b: [1, 2, 4, 9]}\n\n  // nested paths\n  const obj4 = {a: 4, b: {c: 3}};\n  diffApply(obj4, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]);\n  obj4; // {a: 5, b: {d: 4}}\n*/\n\nvar REMOVE = 'remove';\nvar REPLACE = 'replace';\nvar ADD = 'add';\n\nfunction diffApply(obj, diff, pathConverter) {\n  if (!obj || typeof obj != 'object') {\n    throw new Error('base object must be an object or an array');\n  }\n\n  if (!Array.isArray(diff)) {\n    throw new Error('diff must be an array');\n  }\n\n  var diffLength = diff.length;\n\n  for (var i = 0; i < diffLength; i++) {\n    var thisDiff = diff[i];\n    var subObject = obj;\n    var thisOp = thisDiff.op;\n    var thisPath = thisDiff.path;\n\n    if (pathConverter) {\n      thisPath = pathConverter(thisPath);\n\n      if (!Array.isArray(thisPath)) {\n        throw new Error('pathConverter must return an array');\n      }\n    } else {\n      if (!Array.isArray(thisPath)) {\n        throw new Error('diff path must be an array, consider supplying a path converter');\n      }\n    }\n\n    var pathCopy = thisPath.slice();\n    var lastProp = pathCopy.pop();\n\n    if (lastProp == null) {\n      return false;\n    }\n\n    var thisProp;\n\n    while ((thisProp = pathCopy.shift()) != null) {\n      if (!(thisProp in subObject)) {\n        subObject[thisProp] = {};\n      }\n\n      subObject = subObject[thisProp];\n    }\n\n    if (thisOp === REMOVE || thisOp === REPLACE) {\n      if (!subObject.hasOwnProperty(lastProp)) {\n        throw new Error(['expected to find property', thisDiff.path, 'in object', obj].join(' '));\n      }\n    }\n\n    if (thisOp === REMOVE) {\n      Array.isArray(subObject) ? subObject.splice(lastProp, 1) : delete subObject[lastProp];\n    }\n\n    if (thisOp === REPLACE || thisOp === ADD) {\n      subObject[lastProp] = thisDiff.value;\n    }\n  }\n\n  return subObject;\n}\n\nfunction jsonPatchPathConverter(stringPath) {\n  return stringPath.split('/').slice(1);\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/just-diff-apply/index.js"],"names":["module","exports","diffApply","jsonPatchPathConverter","REMOVE","REPLACE","ADD","obj","diff","pathConverter","Error","Array","isArray","diffLength","length","i","thisDiff","subObject","thisOp","op","thisPath","path","pathCopy","slice","lastProp","pop","thisProp","shift","hasOwnProperty","join","splice","value","stringPath","split"],"mappings":"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","sourcesContent":["module.exports = {\n  diffApply: diffApply,\n  jsonPatchPathConverter: jsonPatchPathConverter,\n};\n\n/*\n  const obj1 = {a: 3, b: 5};\n  diffApply(obj1,\n    [\n      { \"op\": \"remove\", \"path\": ['b'] },\n      { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 },\n      { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n    ]\n  );\n  obj1; // {a: 4, c: 5}\n\n  // using converter to apply jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  const obj2 = {a: 3, b: 5};\n  diffApply(obj2, [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ], jsonPatchPathConverter);\n  obj2; // {a: 4, c: 5}\n\n  // arrays\n  const obj3 = {a: 4, b: [1, 2, 3]};\n  diffApply(obj3, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 9 }\n  ]);\n  obj3; // {a: 3, b: [1, 2, 4, 9]}\n\n  // nested paths\n  const obj4 = {a: 4, b: {c: 3}};\n  diffApply(obj4, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]);\n  obj4; // {a: 5, b: {d: 4}}\n*/\n\nvar REMOVE = 'remove';\nvar REPLACE = 'replace';\nvar ADD = 'add';\n\nfunction diffApply(obj, diff, pathConverter) {\n  if (!obj || typeof obj != 'object') {\n    throw new Error('base object must be an object or an array');\n  }\n\n  if (!Array.isArray(diff)) {\n    throw new Error('diff must be an array');\n  }\n\n  var diffLength = diff.length;\n  for (var i = 0; i < diffLength; i++) {\n    var thisDiff = diff[i];\n    var subObject = obj;\n    var thisOp = thisDiff.op;\n    var thisPath = thisDiff.path;\n    if (pathConverter) {\n      thisPath = pathConverter(thisPath);\n      if (!Array.isArray(thisPath)) {\n        throw new Error('pathConverter must return an array');\n      }\n    } else {\n      if (!Array.isArray(thisPath)) {\n        throw new Error('diff path must be an array, consider supplying a path converter');\n      }\n    }\n    var pathCopy = thisPath.slice();\n    var lastProp = pathCopy.pop();\n    if (lastProp == null) {\n      return false;\n    }\n    var thisProp;\n    while (((thisProp = pathCopy.shift())) != null) {\n      if (!(thisProp in subObject)) {\n        subObject[thisProp] = {};\n      }\n      subObject = subObject[thisProp];\n    }\n    if (thisOp === REMOVE || thisOp === REPLACE) {\n      if (!subObject.hasOwnProperty(lastProp)) {\n        throw new Error(['expected to find property', thisDiff.path, 'in object', obj].join(' '));\n      }\n    }\n    if (thisOp === REMOVE) {\n      Array.isArray(subObject) ? subObject.splice(lastProp, 1) : delete subObject[lastProp];\n    }\n    if (thisOp === REPLACE || thisOp === ADD) {\n      subObject[lastProp] = thisDiff.value;\n    }\n  }\n  return subObject;\n}\n\nfunction jsonPatchPathConverter(stringPath) {\n  return stringPath.split('/').slice(1);\n}\n"]},"metadata":{},"sourceType":"script"}