{"ast":null,"code":"// Get the actual nodes corresponding to a root node's child workspaces,\n// given a list of workspace names.\nconst relpath = require('./relpath.js');\n\nconst getWorkspaceNodes = (tree, workspaces, log) => {\n  const wsMap = tree.workspaces;\n\n  if (!wsMap) {\n    log.warn('workspaces', 'filter set, but no workspaces present');\n    return [];\n  }\n\n  const nodes = [];\n\n  for (const name of workspaces) {\n    const path = wsMap.get(name);\n\n    if (!path) {\n      log.warn('workspaces', `${name} in filter set, but not in workspaces`);\n      continue;\n    }\n\n    const loc = relpath(tree.realpath, path);\n    const node = tree.inventory.get(loc);\n\n    if (!node) {\n      log.warn('workspaces', `${name} in filter set, but no workspace folder present`);\n      continue;\n    }\n\n    nodes.push(node);\n  }\n\n  return nodes;\n};\n\nmodule.exports = getWorkspaceNodes;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/arborist/lib/get-workspace-nodes.js"],"names":["relpath","require","getWorkspaceNodes","tree","workspaces","log","wsMap","warn","nodes","name","path","get","loc","realpath","node","inventory","push","module","exports"],"mappings":"AAAA;AACA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,GAAnB,KAA2B;AACnD,QAAMC,KAAK,GAAGH,IAAI,CAACC,UAAnB;;AACA,MAAI,CAACE,KAAL,EAAY;AACVD,IAAAA,GAAG,CAACE,IAAJ,CAAS,YAAT,EAAuB,uCAAvB;AACA,WAAO,EAAP;AACD;;AAED,QAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMC,IAAX,IAAmBL,UAAnB,EAA+B;AAC7B,UAAMM,IAAI,GAAGJ,KAAK,CAACK,GAAN,CAAUF,IAAV,CAAb;;AACA,QAAI,CAACC,IAAL,EAAW;AACTL,MAAAA,GAAG,CAACE,IAAJ,CAAS,YAAT,EAAwB,GAAEE,IAAK,uCAA/B;AACA;AACD;;AAED,UAAMG,GAAG,GAAGZ,OAAO,CAACG,IAAI,CAACU,QAAN,EAAgBH,IAAhB,CAAnB;AACA,UAAMI,IAAI,GAAGX,IAAI,CAACY,SAAL,CAAeJ,GAAf,CAAmBC,GAAnB,CAAb;;AAEA,QAAI,CAACE,IAAL,EAAW;AACTT,MAAAA,GAAG,CAACE,IAAJ,CAAS,YAAT,EAAwB,GAAEE,IAAK,iDAA/B;AACA;AACD;;AAEDD,IAAAA,KAAK,CAACQ,IAAN,CAAWF,IAAX;AACD;;AAED,SAAON,KAAP;AACD,CA3BD;;AA6BAS,MAAM,CAACC,OAAP,GAAiBhB,iBAAjB","sourcesContent":["// Get the actual nodes corresponding to a root node's child workspaces,\n// given a list of workspace names.\nconst relpath = require('./relpath.js')\nconst getWorkspaceNodes = (tree, workspaces, log) => {\n  const wsMap = tree.workspaces\n  if (!wsMap) {\n    log.warn('workspaces', 'filter set, but no workspaces present')\n    return []\n  }\n\n  const nodes = []\n  for (const name of workspaces) {\n    const path = wsMap.get(name)\n    if (!path) {\n      log.warn('workspaces', `${name} in filter set, but not in workspaces`)\n      continue\n    }\n\n    const loc = relpath(tree.realpath, path)\n    const node = tree.inventory.get(loc)\n\n    if (!node) {\n      log.warn('workspaces', `${name} in filter set, but no workspace folder present`)\n      continue\n    }\n\n    nodes.push(node)\n  }\n\n  return nodes\n}\n\nmodule.exports = getWorkspaceNodes\n"]},"metadata":{},"sourceType":"script"}