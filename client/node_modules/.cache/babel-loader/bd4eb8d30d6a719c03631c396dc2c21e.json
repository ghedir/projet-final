{"ast":null,"code":"const ansi = require('ansi-styles');\n\nconst colors = {\n  removed: ansi.red,\n  added: ansi.green,\n  header: ansi.yellow,\n  section: ansi.magenta\n};\n\nfunction colorize(str, opts) {\n  let headerLength = (opts || {}).headerLength;\n\n  if (typeof headerLength !== 'number' || Number.isNaN(headerLength)) {\n    headerLength = 2;\n  }\n\n  const color = (str, colorId) => {\n    const {\n      open,\n      close\n    } = colors[colorId]; // avoid highlighting the \"\\n\" (would highlight till the end of the line)\n\n    return str.replace(/[^\\n\\r]+/g, open + '$&' + close);\n  }; // this RegExp will include all the `\\n` chars into the lines, easier to join\n\n\n  const lines = (typeof str === 'string' && str || '').split(/^/m);\n  const start = color(lines.slice(0, headerLength).join(''), 'header');\n  const end = lines.slice(headerLength).join('').replace(/^-.*/gm, color('$&', 'removed')).replace(/^\\+.*/gm, color('$&', 'added')).replace(/^@@.+@@/gm, color('$&', 'section'));\n  return start + end;\n}\n\nmodule.exports = colorize;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/disparity-colors/index.js"],"names":["ansi","require","colors","removed","red","added","green","header","yellow","section","magenta","colorize","str","opts","headerLength","Number","isNaN","color","colorId","open","close","replace","lines","split","start","slice","join","end","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAEH,IAAI,CAACI,GADD;AAEbC,EAAAA,KAAK,EAAEL,IAAI,CAACM,KAFC;AAGbC,EAAAA,MAAM,EAAEP,IAAI,CAACQ,MAHA;AAIbC,EAAAA,OAAO,EAAET,IAAI,CAACU;AAJD,CAAf;;AAOA,SAASC,QAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC5B,MAAIC,YAAY,GAAG,CAACD,IAAI,IAAI,EAAT,EAAaC,YAAhC;;AACA,MAAI,OAAOA,YAAP,KAAwB,QAAxB,IAAoCC,MAAM,CAACC,KAAP,CAAaF,YAAb,CAAxC,EAAoE;AAClEA,IAAAA,YAAY,GAAG,CAAf;AACD;;AAED,QAAMG,KAAK,GAAG,CAACL,GAAD,EAAMM,OAAN,KAAkB;AAC9B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBlB,MAAM,CAACgB,OAAD,CAA9B,CAD8B,CAE9B;;AACA,WAAON,GAAG,CAACS,OAAJ,CAAY,WAAZ,EAAyBF,IAAI,GAAG,IAAP,GAAcC,KAAvC,CAAP;AACD,GAJD,CAN4B,CAY5B;;;AACA,QAAME,KAAK,GAAG,CAAE,OAAOV,GAAP,KAAe,QAAf,IAA2BA,GAA5B,IAAoC,EAArC,EAAyCW,KAAzC,CAA+C,IAA/C,CAAd;AAEA,QAAMC,KAAK,GAAGP,KAAK,CAACK,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeX,YAAf,EAA6BY,IAA7B,CAAkC,EAAlC,CAAD,EAAwC,QAAxC,CAAnB;AACA,QAAMC,GAAG,GAAGL,KAAK,CAACG,KAAN,CAAYX,YAAZ,EAA0BY,IAA1B,CAA+B,EAA/B,EACTL,OADS,CACD,QADC,EACSJ,KAAK,CAAC,IAAD,EAAO,SAAP,CADd,EAETI,OAFS,CAED,SAFC,EAEUJ,KAAK,CAAC,IAAD,EAAO,OAAP,CAFf,EAGTI,OAHS,CAGD,WAHC,EAGYJ,KAAK,CAAC,IAAD,EAAO,SAAP,CAHjB,CAAZ;AAKA,SAAOO,KAAK,GAAGG,GAAf;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBlB,QAAjB","sourcesContent":["const ansi = require('ansi-styles')\n\nconst colors = {\n  removed: ansi.red,\n  added: ansi.green,\n  header: ansi.yellow,\n  section: ansi.magenta\n}\n\nfunction colorize (str, opts) {\n  let headerLength = (opts || {}).headerLength\n  if (typeof headerLength !== 'number' || Number.isNaN(headerLength)) {\n    headerLength = 2\n  }\n\n  const color = (str, colorId) => {\n    const { open, close } = colors[colorId]\n    // avoid highlighting the \"\\n\" (would highlight till the end of the line)\n    return str.replace(/[^\\n\\r]+/g, open + '$&' + close)\n  }\n\n  // this RegExp will include all the `\\n` chars into the lines, easier to join\n  const lines = ((typeof str === 'string' && str) || '').split(/^/m)\n\n  const start = color(lines.slice(0, headerLength).join(''), 'header')\n  const end = lines.slice(headerLength).join('')\n    .replace(/^-.*/gm, color('$&', 'removed'))\n    .replace(/^\\+.*/gm, color('$&', 'added'))\n    .replace(/^@@.+@@/gm, color('$&', 'section'))\n\n  return start + end\n}\n\nmodule.exports = colorize\n"]},"metadata":{},"sourceType":"script"}