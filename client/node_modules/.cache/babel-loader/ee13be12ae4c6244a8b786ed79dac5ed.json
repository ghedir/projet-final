{"ast":null,"code":"const {\n  distance\n} = require('fastest-levenshtein');\n\nconst readJson = require('read-package-json-fast');\n\nconst {\n  cmdList\n} = require('./cmd-list.js');\n\nconst didYouMean = async (npm, path, scmd) => {\n  let best = cmdList.filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 && scmd !== cmd).map(str => `    npm ${str} # ${npm.commands[str].description}`); // We would already be suggesting this in `npm x` so omit them here\n\n  const runScripts = ['stop', 'start', 'test', 'restart'];\n\n  try {\n    const {\n      bin,\n      scripts\n    } = await readJson(`${path}/package.json`);\n    best = best.concat(Object.keys(scripts || {}).filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 && !runScripts.includes(cmd)).map(str => `    npm run ${str} # run the \"${str}\" package script`), Object.keys(bin || {}).filter(cmd => distance(scmd, cmd) < scmd.length * 0.4).map(str => `    npm exec ${str} # run the \"${str}\" command from either this or a remote npm package`));\n  } catch (_) {// gracefully ignore not being in a folder w/ a package.json\n  }\n\n  if (best.length === 0) return '';\n  const suggestion = best.length === 1 ? `\\n\\nDid you mean this?\\n${best[0]}` : `\\n\\nDid you mean one of these?\\n${best.slice(0, 3).join('\\n')}`;\n  return suggestion;\n};\n\nmodule.exports = didYouMean;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/did-you-mean.js"],"names":["distance","require","readJson","cmdList","didYouMean","npm","path","scmd","best","filter","cmd","length","map","str","commands","description","runScripts","bin","scripts","concat","Object","keys","includes","_","suggestion","slice","join","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,qBAAD,CAA5B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAxB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAcF,OAAO,CAAC,eAAD,CAA3B;;AAEA,MAAMG,UAAU,GAAG,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,KAA2B;AAC5C,MAAIC,IAAI,GAAGL,OAAO,CACfM,MADQ,CACDC,GAAG,IAAIV,QAAQ,CAACO,IAAD,EAAOG,GAAP,CAAR,GAAsBH,IAAI,CAACI,MAAL,GAAc,GAApC,IAA2CJ,IAAI,KAAKG,GAD1D,EAERE,GAFQ,CAEJC,GAAG,IAAK,WAAUA,GAAI,MAAKR,GAAG,CAACS,QAAJ,CAAaD,GAAb,EAAkBE,WAAY,EAFrD,CAAX,CAD4C,CAK5C;;AACA,QAAMC,UAAU,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,SAA1B,CAAnB;;AACA,MAAI;AACF,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAmB,MAAMhB,QAAQ,CAAE,GAAEI,IAAK,eAAT,CAAvC;AACAE,IAAAA,IAAI,GAAGA,IAAI,CAACW,MAAL,CACLC,MAAM,CAACC,IAAP,CAAYH,OAAO,IAAI,EAAvB,EACGT,MADH,CACUC,GAAG,IAAIV,QAAQ,CAACO,IAAD,EAAOG,GAAP,CAAR,GAAsBH,IAAI,CAACI,MAAL,GAAc,GAApC,IACb,CAACK,UAAU,CAACM,QAAX,CAAoBZ,GAApB,CAFL,EAGGE,GAHH,CAGOC,GAAG,IAAK,eAAcA,GAAI,eAAcA,GAAI,kBAHnD,CADK,EAKLO,MAAM,CAACC,IAAP,CAAYJ,GAAG,IAAI,EAAnB,EACGR,MADH,CACUC,GAAG,IAAIV,QAAQ,CAACO,IAAD,EAAOG,GAAP,CAAR,GAAsBH,IAAI,CAACI,MAAL,GAAc,GADrD,EAEGC,GAFH,CAEOC,GAAG,IAAK,gBAAeA,GAAI,eAAcA,GAAI,oDAFpD,CALK,CAAP;AASD,GAXD,CAWE,OAAOU,CAAP,EAAU,CACV;AACD;;AAED,MAAIf,IAAI,CAACG,MAAL,KAAgB,CAApB,EACE,OAAO,EAAP;AAEF,QAAMa,UAAU,GAAGhB,IAAI,CAACG,MAAL,KAAgB,CAAhB,GAAqB,2BAA0BH,IAAI,CAAC,CAAD,CAAI,EAAvD,GACd,mCAAkCA,IAAI,CAACiB,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBC,IAAjB,CAAsB,IAAtB,CAA4B,EADnE;AAEA,SAAOF,UAAP;AACD,CA5BD;;AA6BAG,MAAM,CAACC,OAAP,GAAiBxB,UAAjB","sourcesContent":["const { distance } = require('fastest-levenshtein')\nconst readJson = require('read-package-json-fast')\nconst { cmdList } = require('./cmd-list.js')\n\nconst didYouMean = async (npm, path, scmd) => {\n  let best = cmdList\n    .filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 && scmd !== cmd)\n    .map(str => `    npm ${str} # ${npm.commands[str].description}`)\n\n  // We would already be suggesting this in `npm x` so omit them here\n  const runScripts = ['stop', 'start', 'test', 'restart']\n  try {\n    const { bin, scripts } = await readJson(`${path}/package.json`)\n    best = best.concat(\n      Object.keys(scripts || {})\n        .filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 &&\n          !runScripts.includes(cmd))\n        .map(str => `    npm run ${str} # run the \"${str}\" package script`),\n      Object.keys(bin || {})\n        .filter(cmd => distance(scmd, cmd) < scmd.length * 0.4)\n        .map(str => `    npm exec ${str} # run the \"${str}\" command from either this or a remote npm package`)\n    )\n  } catch (_) {\n    // gracefully ignore not being in a folder w/ a package.json\n  }\n\n  if (best.length === 0)\n    return ''\n\n  const suggestion = best.length === 1 ? `\\n\\nDid you mean this?\\n${best[0]}`\n    : `\\n\\nDid you mean one of these?\\n${best.slice(0, 3).join('\\n')}`\n  return suggestion\n}\nmodule.exports = didYouMean\n"]},"metadata":{},"sourceType":"script"}