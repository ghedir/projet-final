{"ast":null,"code":"const fetch = require('npm-registry-fetch');\n\nconst log = require('npmlog');\n\nconst npa = require('npm-package-arg');\n\nconst getIdentity = require('./utils/get-identity');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Star extends BaseCommand {\n  static get description() {\n    return 'Mark your favorite packages';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'star';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<pkg>...]'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['registry', 'unicode'];\n  }\n\n  exec(args, cb) {\n    this.star(args).then(() => cb()).catch(cb);\n  }\n\n  async star(args) {\n    if (!args.length) throw new Error(this.usage); // if we're unstarring, then show an empty star image\n    // otherwise, show the full star image\n\n    const unicode = this.npm.config.get('unicode');\n    const unstar = this.npm.config.get('star.unstar');\n    const full = unicode ? '\\u2605 ' : '(*)';\n    const empty = unicode ? '\\u2606 ' : '( )';\n    const show = unstar ? empty : full;\n    const pkgs = args.map(npa);\n\n    for (const pkg of pkgs) {\n      const [username, fullData] = await Promise.all([getIdentity(this.npm, this.npm.flatOptions), fetch.json(pkg.escapedName, { ...this.npm.flatOptions,\n        spec: pkg,\n        query: {\n          write: true\n        },\n        preferOnline: true\n      })]);\n      if (!username) throw new Error('You need to be logged in!');\n      const body = {\n        _id: fullData._id,\n        _rev: fullData._rev,\n        users: fullData.users || {}\n      };\n\n      if (!unstar) {\n        log.info('star', 'starring', body._id);\n        body.users[username] = true;\n        log.verbose('star', 'starring', body);\n      } else {\n        delete body.users[username];\n        log.info('unstar', 'unstarring', body._id);\n        log.verbose('unstar', 'unstarring', body);\n      }\n\n      const data = await fetch.json(pkg.escapedName, { ...this.npm.flatOptions,\n        spec: pkg,\n        method: 'PUT',\n        body\n      });\n      this.npm.output(show + ' ' + pkg.name);\n      log.verbose('star', data);\n      return data;\n    }\n  }\n\n}\n\nmodule.exports = Star;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/star.js"],"names":["fetch","require","log","npa","getIdentity","BaseCommand","Star","description","name","usage","params","exec","args","cb","star","then","catch","length","Error","unicode","npm","config","get","unstar","full","empty","show","pkgs","map","pkg","username","fullData","Promise","all","flatOptions","json","escapedName","spec","query","write","preferOnline","body","_id","_rev","users","info","verbose","data","method","output","module","exports"],"mappings":"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","sourcesContent":["const fetch = require('npm-registry-fetch')\nconst log = require('npmlog')\nconst npa = require('npm-package-arg')\n\nconst getIdentity = require('./utils/get-identity')\n\nconst BaseCommand = require('./base-command.js')\nclass Star extends BaseCommand {\n  static get description () {\n    return 'Mark your favorite packages'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'star'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<pkg>...]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'registry',\n      'unicode',\n    ]\n  }\n\n  exec (args, cb) {\n    this.star(args).then(() => cb()).catch(cb)\n  }\n\n  async star (args) {\n    if (!args.length)\n      throw new Error(this.usage)\n\n    // if we're unstarring, then show an empty star image\n    // otherwise, show the full star image\n    const unicode = this.npm.config.get('unicode')\n    const unstar = this.npm.config.get('star.unstar')\n    const full = unicode ? '\\u2605 ' : '(*)'\n    const empty = unicode ? '\\u2606 ' : '( )'\n    const show = unstar ? empty : full\n\n    const pkgs = args.map(npa)\n    for (const pkg of pkgs) {\n      const [username, fullData] = await Promise.all([\n        getIdentity(this.npm, this.npm.flatOptions),\n        fetch.json(pkg.escapedName, {\n          ...this.npm.flatOptions,\n          spec: pkg,\n          query: { write: true },\n          preferOnline: true,\n        }),\n      ])\n\n      if (!username)\n        throw new Error('You need to be logged in!')\n\n      const body = {\n        _id: fullData._id,\n        _rev: fullData._rev,\n        users: fullData.users || {},\n      }\n\n      if (!unstar) {\n        log.info('star', 'starring', body._id)\n        body.users[username] = true\n        log.verbose('star', 'starring', body)\n      } else {\n        delete body.users[username]\n        log.info('unstar', 'unstarring', body._id)\n        log.verbose('unstar', 'unstarring', body)\n      }\n\n      const data = await fetch.json(pkg.escapedName, {\n        ...this.npm.flatOptions,\n        spec: pkg,\n        method: 'PUT',\n        body,\n      })\n\n      this.npm.output(show + ' ' + pkg.name)\n      log.verbose('star', data)\n      return data\n    }\n  }\n}\nmodule.exports = Star\n"]},"metadata":{},"sourceType":"script"}