{"ast":null,"code":"const fs = require('fs');\n\nconst {\n  promisify\n} = require('util');\n\nconst {\n  readFileSync\n} = fs;\nconst readFile = promisify(fs.readFile);\n\nconst extractPath = (path, cmdshimContents) => {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents);\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents);\n  } else {\n    return extractPathFromCygwin(cmdshimContents);\n  }\n};\n\nconst extractPathFromPowershell = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/);\n  return matches && matches[1];\n};\n\nconst extractPathFromCmd = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/);\n  return matches && matches[1];\n};\n\nconst extractPathFromCygwin = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/);\n  return matches && matches[1];\n};\n\nconst wrapError = (thrown, newError) => {\n  newError.message = thrown.message;\n  newError.code = thrown.code;\n  newError.path = thrown.path;\n  return newError;\n};\n\nconst notaShim = (path, er) => {\n  if (!er) {\n    er = new Error();\n    Error.captureStackTrace(er, notaShim);\n  }\n\n  er.code = 'ENOTASHIM';\n  er.message = `Can't read shim path from '${path}', ` + `it doesn't appear to be a cmd-shim`;\n  return er;\n};\n\nconst readCmdShim = path => {\n  // create a new error to capture the stack trace from this point,\n  // instead of getting some opaque stack into node's internals\n  const er = new Error();\n  Error.captureStackTrace(er, readCmdShim);\n  return readFile(path).then(contents => {\n    const destination = extractPath(path, contents.toString());\n    if (destination) return destination;\n    return Promise.reject(notaShim(path, er));\n  }, readFileEr => Promise.reject(wrapError(readFileEr, er)));\n};\n\nconst readCmdShimSync = path => {\n  const contents = readFileSync(path);\n  const destination = extractPath(path, contents.toString());\n  if (!destination) throw notaShim(path);\n  return destination;\n};\n\nreadCmdShim.sync = readCmdShimSync;\nmodule.exports = readCmdShim;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/read-cmd-shim/index.js"],"names":["fs","require","promisify","readFileSync","readFile","extractPath","path","cmdshimContents","test","extractPathFromCmd","extractPathFromPowershell","extractPathFromCygwin","matches","match","wrapError","thrown","newError","message","code","notaShim","er","Error","captureStackTrace","readCmdShim","then","contents","destination","toString","Promise","reject","readFileEr","readCmdShimSync","sync","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst {promisify} = require('util')\nconst {readFileSync} = fs\nconst readFile = promisify(fs.readFile)\n\nconst extractPath = (path, cmdshimContents) => {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents)\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents)\n  } else {\n    return extractPathFromCygwin(cmdshimContents)\n  }\n}\n\nconst extractPathFromPowershell = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/)\n  return matches && matches[1]\n}\n\nconst extractPathFromCmd = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/)\n  return matches && matches[1]\n}\n\nconst extractPathFromCygwin = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/)\n  return matches && matches[1]\n}\n\nconst wrapError = (thrown, newError) => {\n  newError.message = thrown.message\n  newError.code = thrown.code\n  newError.path = thrown.path\n  return newError\n}\n\nconst notaShim = (path, er) => {\n  if (!er) {\n    er = new Error()\n    Error.captureStackTrace(er, notaShim)\n  }\n  er.code = 'ENOTASHIM'\n  er.message = `Can't read shim path from '${path}', ` +\n    `it doesn't appear to be a cmd-shim`\n  return er\n}\n\nconst readCmdShim = path => {\n  // create a new error to capture the stack trace from this point,\n  // instead of getting some opaque stack into node's internals\n  const er = new Error()\n  Error.captureStackTrace(er, readCmdShim)\n  return readFile(path).then(contents => {\n    const destination = extractPath(path, contents.toString())\n    if (destination) return destination\n    return Promise.reject(notaShim(path, er))\n  }, readFileEr => Promise.reject(wrapError(readFileEr, er)))\n}\n\nconst readCmdShimSync = path => {\n  const contents = readFileSync(path)\n  const destination = extractPath(path, contents.toString())\n  if (!destination) throw notaShim(path)\n  return destination\n}\n\nreadCmdShim.sync = readCmdShimSync\nmodule.exports = readCmdShim\n"]},"metadata":{},"sourceType":"script"}