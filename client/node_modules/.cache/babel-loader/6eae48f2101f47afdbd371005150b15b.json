{"ast":null,"code":"const Fetcher = require('./fetcher.js');\n\nconst FileFetcher = require('./file.js');\n\nconst cacache = require('cacache');\n\nconst Minipass = require('minipass');\n\nconst {\n  promisify\n} = require('util');\n\nconst readPackageJson = require('read-package-json-fast');\n\nconst tarCreateOptions = require('./util/tar-create-options.js');\n\nconst packlist = require('npm-packlist');\n\nconst tar = require('tar');\n\nconst _prepareDir = Symbol('_prepareDir');\n\nconst {\n  resolve\n} = require('path');\n\nconst runScript = require('@npmcli/run-script');\n\nconst _tarballFromResolved = Symbol.for('pacote.Fetcher._tarballFromResolved');\n\nclass DirFetcher extends Fetcher {\n  constructor(spec, opts) {\n    super(spec, opts); // just the fully resolved filename\n\n    this.resolved = this.spec.fetchSpec;\n  } // exposes tarCreateOptions as public API\n\n\n  static tarCreateOptions(manifest) {\n    return tarCreateOptions(manifest);\n  }\n\n  get types() {\n    return ['directory'];\n  }\n\n  [_prepareDir]() {\n    return this.manifest().then(mani => {\n      if (!mani.scripts || !mani.scripts.prepare) return; // we *only* run prepare.\n      // pre/post-pack is run by the npm CLI for publish and pack,\n      // but this function is *also* run when installing git deps\n\n      const stdio = this.opts.foregroundScripts ? 'inherit' : 'pipe'; // hide the banner if loglevel is silent, or if prepare running\n      // in the background.\n\n      const banner = this.opts.log && this.opts.log.level === 'silent' ? false : stdio === 'inherit';\n      return runScript({\n        pkg: mani,\n        event: 'prepare',\n        path: this.resolved,\n        stdioString: true,\n        stdio,\n        banner,\n        env: {\n          npm_package_resolved: this.resolved,\n          npm_package_integrity: this.integrity,\n          npm_package_json: resolve(this.resolved, 'package.json')\n        }\n      });\n    });\n  }\n\n  [_tarballFromResolved]() {\n    const stream = new Minipass();\n    stream.resolved = this.resolved;\n    stream.integrity = this.integrity; // run the prepare script, get the list of files, and tar it up\n    // pipe to the stream, and proxy errors the chain.\n\n    this[_prepareDir]().then(() => packlist({\n      path: this.resolved\n    })).then(files => tar.c(tarCreateOptions(this.package), files).on('error', er => stream.emit('error', er)).pipe(stream)).catch(er => stream.emit('error', er));\n\n    return stream;\n  }\n\n  manifest() {\n    if (this.package) return Promise.resolve(this.package);\n    return readPackageJson(this.resolved + '/package.json').then(mani => this.package = { ...mani,\n      _integrity: this.integrity && String(this.integrity),\n      _resolved: this.resolved,\n      _from: this.from\n    });\n  }\n\n  packument() {\n    return FileFetcher.prototype.packument.apply(this);\n  }\n\n}\n\nmodule.exports = DirFetcher;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/pacote/lib/dir.js"],"names":["Fetcher","require","FileFetcher","cacache","Minipass","promisify","readPackageJson","tarCreateOptions","packlist","tar","_prepareDir","Symbol","resolve","runScript","_tarballFromResolved","for","DirFetcher","constructor","spec","opts","resolved","fetchSpec","manifest","types","then","mani","scripts","prepare","stdio","foregroundScripts","banner","log","level","pkg","event","path","stdioString","env","npm_package_resolved","npm_package_integrity","integrity","npm_package_json","stream","files","c","package","on","er","emit","pipe","catch","Promise","_integrity","String","_resolved","_from","from","packument","prototype","apply","module","exports"],"mappings":"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","sourcesContent":["const Fetcher = require('./fetcher.js')\nconst FileFetcher = require('./file.js')\nconst cacache = require('cacache')\nconst Minipass = require('minipass')\nconst { promisify } = require('util')\nconst readPackageJson = require('read-package-json-fast')\nconst tarCreateOptions = require('./util/tar-create-options.js')\nconst packlist = require('npm-packlist')\nconst tar = require('tar')\nconst _prepareDir = Symbol('_prepareDir')\nconst { resolve } = require('path')\n\nconst runScript = require('@npmcli/run-script')\n\nconst _tarballFromResolved = Symbol.for('pacote.Fetcher._tarballFromResolved')\nclass DirFetcher extends Fetcher {\n  constructor (spec, opts) {\n    super(spec, opts)\n    // just the fully resolved filename\n    this.resolved = this.spec.fetchSpec\n  }\n\n  // exposes tarCreateOptions as public API\n  static tarCreateOptions (manifest) {\n    return tarCreateOptions(manifest)\n  }\n\n  get types () {\n    return ['directory']\n  }\n\n  [_prepareDir] () {\n    return this.manifest().then(mani => {\n      if (!mani.scripts || !mani.scripts.prepare)\n        return\n\n      // we *only* run prepare.\n      // pre/post-pack is run by the npm CLI for publish and pack,\n      // but this function is *also* run when installing git deps\n      const stdio = this.opts.foregroundScripts ? 'inherit' : 'pipe'\n\n      // hide the banner if loglevel is silent, or if prepare running\n      // in the background.\n      const banner = this.opts.log && this.opts.log.level === 'silent' ? false\n        : stdio === 'inherit'\n\n      return runScript({\n        pkg: mani,\n        event: 'prepare',\n        path: this.resolved,\n        stdioString: true,\n        stdio,\n        banner,\n        env: {\n          npm_package_resolved: this.resolved,\n          npm_package_integrity: this.integrity,\n          npm_package_json: resolve(this.resolved, 'package.json'),\n        },\n      })\n    })\n  }\n\n  [_tarballFromResolved] () {\n    const stream = new Minipass()\n    stream.resolved = this.resolved\n    stream.integrity = this.integrity\n\n    // run the prepare script, get the list of files, and tar it up\n    // pipe to the stream, and proxy errors the chain.\n    this[_prepareDir]()\n      .then(() => packlist({ path: this.resolved }))\n      .then(files => tar.c(tarCreateOptions(this.package), files)\n        .on('error', er => stream.emit('error', er)).pipe(stream))\n      .catch(er => stream.emit('error', er))\n    return stream\n  }\n\n  manifest () {\n    if (this.package)\n      return Promise.resolve(this.package)\n\n    return readPackageJson(this.resolved + '/package.json')\n      .then(mani => this.package = {\n        ...mani,\n        _integrity: this.integrity && String(this.integrity),\n        _resolved: this.resolved,\n        _from: this.from,\n      })\n  }\n\n  packument () {\n    return FileFetcher.prototype.packument.apply(this)\n  }\n}\nmodule.exports = DirFetcher\n"]},"metadata":{},"sourceType":"script"}