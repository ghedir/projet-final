{"ast":null,"code":"module.exports = normalize;\n\nvar fixer = require('./fixer');\n\nnormalize.fixer = fixer;\n\nvar makeWarning = require('./make_warning');\n\nvar fieldsToFix = ['name', 'version', 'description', 'repository', 'modules', 'scripts', 'files', 'bin', 'man', 'bugs', 'keywords', 'readme', 'homepage', 'license'];\nvar otherThingsToFix = ['dependencies', 'people', 'typos'];\nvar thingsToFix = fieldsToFix.map(function (fieldName) {\n  return ucFirst(fieldName) + 'Field';\n}); // two ways to do this in CoffeeScript on only one line, sub-70 chars:\n// thingsToFix = fieldsToFix.map (name) -> ucFirst(name) + \"Field\"\n// thingsToFix = (ucFirst(name) + \"Field\" for name in fieldsToFix)\n\nthingsToFix = thingsToFix.concat(otherThingsToFix);\n\nfunction normalize(data, warn, strict) {\n  if (warn === true) {\n    warn = null;\n    strict = true;\n  }\n\n  if (!strict) {\n    strict = false;\n  }\n\n  if (!warn || data.private) {\n    warn = function (msg) {\n      /* noop */\n    };\n  }\n\n  if (data.scripts && data.scripts.install === 'node-gyp rebuild' && !data.scripts.preinstall) {\n    data.gypfile = true;\n  }\n\n  fixer.warn = function () {\n    warn(makeWarning.apply(null, arguments));\n  };\n\n  thingsToFix.forEach(function (thingName) {\n    fixer['fix' + ucFirst(thingName)](data, strict);\n  });\n  data._id = data.name + '@' + data.version;\n}\n\nfunction ucFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/normalize-package-data/lib/normalize.js"],"names":["module","exports","normalize","fixer","require","makeWarning","fieldsToFix","otherThingsToFix","thingsToFix","map","fieldName","ucFirst","concat","data","warn","strict","private","msg","scripts","install","preinstall","gypfile","apply","arguments","forEach","thingName","_id","name","version","string","charAt","toUpperCase","slice"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACAF,SAAS,CAACC,KAAV,GAAkBA,KAAlB;;AAEA,IAAIE,WAAW,GAAGD,OAAO,CAAC,gBAAD,CAAzB;;AAEA,IAAIE,WAAW,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,aAApB,EAAmC,YAAnC,EAAiD,SAAjD,EAA4D,SAA5D,EAChB,OADgB,EACP,KADO,EACA,KADA,EACO,MADP,EACe,UADf,EAC2B,QAD3B,EACqC,UADrC,EACiD,SADjD,CAAlB;AAEA,IAAIC,gBAAgB,GAAG,CAAC,cAAD,EAAiB,QAAjB,EAA2B,OAA3B,CAAvB;AAEA,IAAIC,WAAW,GAAGF,WAAW,CAACG,GAAZ,CAAgB,UAAUC,SAAV,EAAqB;AACrD,SAAOC,OAAO,CAACD,SAAD,CAAP,GAAqB,OAA5B;AACD,CAFiB,CAAlB,C,CAGA;AACA;AACA;;AACAF,WAAW,GAAGA,WAAW,CAACI,MAAZ,CAAmBL,gBAAnB,CAAd;;AAEA,SAASL,SAAT,CAAoBW,IAApB,EAA0BC,IAA1B,EAAgCC,MAAhC,EAAwC;AACtC,MAAID,IAAI,KAAK,IAAb,EAAmB;AACjBA,IAAAA,IAAI,GAAG,IAAP;AACAC,IAAAA,MAAM,GAAG,IAAT;AACD;;AACD,MAAI,CAACA,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,KAAT;AACD;;AACD,MAAI,CAACD,IAAD,IAASD,IAAI,CAACG,OAAlB,EAA2B;AACzBF,IAAAA,IAAI,GAAG,UAAUG,GAAV,EAAe;AAAE;AAAY,KAApC;AACD;;AAED,MAAIJ,IAAI,CAACK,OAAL,IACAL,IAAI,CAACK,OAAL,CAAaC,OAAb,KAAyB,kBADzB,IAEA,CAACN,IAAI,CAACK,OAAL,CAAaE,UAFlB,EAE8B;AAC5BP,IAAAA,IAAI,CAACQ,OAAL,GAAe,IAAf;AACD;;AACDlB,EAAAA,KAAK,CAACW,IAAN,GAAa,YAAY;AACvBA,IAAAA,IAAI,CAACT,WAAW,CAACiB,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAD,CAAJ;AACD,GAFD;;AAGAf,EAAAA,WAAW,CAACgB,OAAZ,CAAoB,UAAUC,SAAV,EAAqB;AACvCtB,IAAAA,KAAK,CAAC,QAAQQ,OAAO,CAACc,SAAD,CAAhB,CAAL,CAAkCZ,IAAlC,EAAwCE,MAAxC;AACD,GAFD;AAGAF,EAAAA,IAAI,CAACa,GAAL,GAAWb,IAAI,CAACc,IAAL,GAAY,GAAZ,GAAkBd,IAAI,CAACe,OAAlC;AACD;;AAED,SAASjB,OAAT,CAAkBkB,MAAlB,EAA0B;AACxB,SAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACD","sourcesContent":["module.exports = normalize\n\nvar fixer = require('./fixer')\nnormalize.fixer = fixer\n\nvar makeWarning = require('./make_warning')\n\nvar fieldsToFix = ['name', 'version', 'description', 'repository', 'modules', 'scripts',\n  'files', 'bin', 'man', 'bugs', 'keywords', 'readme', 'homepage', 'license']\nvar otherThingsToFix = ['dependencies', 'people', 'typos']\n\nvar thingsToFix = fieldsToFix.map(function (fieldName) {\n  return ucFirst(fieldName) + 'Field'\n})\n// two ways to do this in CoffeeScript on only one line, sub-70 chars:\n// thingsToFix = fieldsToFix.map (name) -> ucFirst(name) + \"Field\"\n// thingsToFix = (ucFirst(name) + \"Field\" for name in fieldsToFix)\nthingsToFix = thingsToFix.concat(otherThingsToFix)\n\nfunction normalize (data, warn, strict) {\n  if (warn === true) {\n    warn = null\n    strict = true\n  }\n  if (!strict) {\n    strict = false\n  }\n  if (!warn || data.private) {\n    warn = function (msg) { /* noop */ }\n  }\n\n  if (data.scripts &&\n      data.scripts.install === 'node-gyp rebuild' &&\n      !data.scripts.preinstall) {\n    data.gypfile = true\n  }\n  fixer.warn = function () {\n    warn(makeWarning.apply(null, arguments))\n  }\n  thingsToFix.forEach(function (thingName) {\n    fixer['fix' + ucFirst(thingName)](data, strict)\n  })\n  data._id = data.name + '@' + data.version\n}\n\nfunction ucFirst (string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n"]},"metadata":{},"sourceType":"script"}