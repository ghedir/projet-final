{"ast":null,"code":"const {\n  resolve\n} = require('path');\n\nconst chalk = require('chalk');\n\nconst runScript = require('@npmcli/run-script');\n\nconst {\n  isServerPackage\n} = runScript;\n\nconst rpj = require('read-package-json-fast');\n\nconst log = require('npmlog');\n\nconst didYouMean = require('./utils/did-you-mean.js');\n\nconst isWindowsShell = require('./utils/is-windows-shell.js');\n\nconst cmdList = ['publish', 'install', 'uninstall', 'test', 'stop', 'start', 'restart', 'version'].reduce((l, p) => l.concat(['pre' + p, p, 'post' + p]), []);\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s,\n  blue: s => s,\n  green: s => s\n};\n\nconst BaseCommand = require('./base-command.js');\n\nclass RunScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Run arbitrary package scripts';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['workspace', 'workspaces', 'if-present', 'ignore-scripts', 'script-shell'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'run-script';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['<command> [-- <args>]'];\n  }\n\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json');\n      const {\n        scripts = {}\n      } = await rpj(json).catch(er => ({}));\n      return Object.keys(scripts);\n    }\n  }\n\n  exec(args, cb) {\n    if (args.length) this.run(args).then(() => cb()).catch(cb);else this.list(args).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    if (args.length) this.runWorkspaces(args, filters).then(() => cb()).catch(cb);else this.listWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async run([event, ...args], {\n    path = this.npm.localPrefix,\n    pkg\n  } = {}) {\n    // this || undefined is because runScript will be unhappy with the default\n    // null value\n    const scriptShell = this.npm.config.get('script-shell') || undefined;\n    pkg = pkg || (await rpj(`${path}/package.json`));\n    const {\n      scripts = {}\n    } = pkg;\n    if (event === 'restart' && !scripts.restart) scripts.restart = 'npm stop --if-present && npm start';else if (event === 'env' && !scripts.env) scripts.env = isWindowsShell ? 'SET' : 'env';\n    pkg.scripts = scripts;\n\n    if (!Object.prototype.hasOwnProperty.call(scripts, event) && !(event === 'start' && (await isServerPackage(path)))) {\n      if (this.npm.config.get('if-present')) return;\n      const suggestions = await didYouMean(this.npm, path, event);\n      throw new Error(`Missing script: \"${event}\"${suggestions}\\n\\nTo see a list of scripts, run:\\n  npm run`);\n    } // positional args only added to the main event, not pre/post\n\n\n    const events = [[event, args]];\n\n    if (!this.npm.config.get('ignore-scripts')) {\n      if (scripts[`pre${event}`]) events.unshift([`pre${event}`, []]);\n      if (scripts[`post${event}`]) events.push([`post${event}`, []]);\n    }\n\n    const opts = {\n      path,\n      args,\n      scriptShell,\n      stdio: 'inherit',\n      stdioString: true,\n      pkg,\n      banner: log.level !== 'silent'\n    };\n\n    for (const [event, args] of events) {\n      await runScript({ ...opts,\n        event,\n        args\n      });\n    }\n  }\n\n  async list(args, path) {\n    path = path || this.npm.localPrefix;\n    const {\n      scripts,\n      name,\n      _id\n    } = await rpj(`${path}/package.json`);\n    const pkgid = _id || name;\n    const color = this.npm.color;\n    if (!scripts) return [];\n    const allScripts = Object.keys(scripts);\n    if (log.level === 'silent') return allScripts;\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(scripts, null, 2));\n      return allScripts;\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const [script, cmd] of Object.entries(scripts)) this.npm.output(`${script}:${cmd}`);\n\n      return allScripts;\n    }\n\n    const indent = '\\n    ';\n    const prefix = '  ';\n    const cmds = [];\n    const runScripts = [];\n\n    for (const script of allScripts) {\n      const list = cmdList.includes(script) ? cmds : runScripts;\n      list.push(script);\n    }\n\n    const colorize = color ? chalk : nocolor;\n\n    if (cmds.length) {\n      this.npm.output(`${colorize.reset(colorize.bold('Lifecycle scripts'))} included in ${colorize.green(pkgid)}:`);\n    }\n\n    for (const script of cmds) this.npm.output(prefix + script + indent + colorize.dim(scripts[script]));\n\n    if (!cmds.length && runScripts.length) {\n      this.npm.output(`${colorize.bold('Scripts')} available in ${colorize.green(pkgid)} via \\`${colorize.blue('npm run-script')}\\`:`);\n    } else if (runScripts.length) this.npm.output(`\\navailable via \\`${colorize.blue('npm run-script')}\\`:`);\n\n    for (const script of runScripts) this.npm.output(prefix + script + indent + colorize.dim(scripts[script]));\n\n    this.npm.output('');\n    return allScripts;\n  }\n\n  async runWorkspaces(args, filters) {\n    const res = [];\n    await this.setWorkspaces(filters);\n\n    for (const workspacePath of this.workspacePaths) {\n      const pkg = await rpj(`${workspacePath}/package.json`);\n      const runResult = await this.run(args, {\n        path: workspacePath,\n        pkg\n      }).catch(err => {\n        log.error(`Lifecycle script \\`${args[0]}\\` failed with error:`);\n        log.error(err);\n        log.error(`  in workspace: ${pkg._id || pkg.name}`);\n        log.error(`  at location: ${workspacePath}`);\n        const scriptMissing = err.message.startsWith('Missing script'); // avoids exiting with error code in case there's scripts missing\n        // in some workspaces since other scripts might have succeeded\n\n        if (!scriptMissing) process.exitCode = 1;\n        return scriptMissing;\n      });\n      res.push(runResult);\n    } // in case **all** tests are missing, then it should exit with error code\n\n\n    if (res.every(Boolean)) throw new Error(`Missing script: ${args[0]}`);\n  }\n\n  async listWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n    if (log.level === 'silent') return;\n\n    if (this.npm.config.get('json')) {\n      const res = {};\n\n      for (const workspacePath of this.workspacePaths) {\n        const {\n          scripts,\n          name\n        } = await rpj(`${workspacePath}/package.json`);\n        res[name] = { ...scripts\n        };\n      }\n\n      this.npm.output(JSON.stringify(res, null, 2));\n      return;\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const workspacePath of this.workspacePaths) {\n        const {\n          scripts,\n          name\n        } = await rpj(`${workspacePath}/package.json`);\n\n        for (const [script, cmd] of Object.entries(scripts || {})) this.npm.output(`${name}:${script}:${cmd}`);\n      }\n\n      return;\n    }\n\n    for (const workspacePath of this.workspacePaths) await this.list(args, workspacePath);\n  }\n\n}\n\nmodule.exports = RunScript;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/run-script.js"],"names":["resolve","require","chalk","runScript","isServerPackage","rpj","log","didYouMean","isWindowsShell","cmdList","reduce","l","p","concat","nocolor","reset","s","bold","dim","blue","green","BaseCommand","RunScript","description","params","name","usage","completion","opts","argv","conf","remain","length","json","npm","localPrefix","scripts","catch","er","Object","keys","exec","args","cb","run","then","list","execWorkspaces","filters","runWorkspaces","listWorkspaces","event","path","pkg","scriptShell","config","get","undefined","restart","env","prototype","hasOwnProperty","call","suggestions","Error","events","unshift","push","stdio","stdioString","banner","level","_id","pkgid","color","allScripts","output","JSON","stringify","script","cmd","entries","indent","prefix","cmds","runScripts","includes","colorize","res","setWorkspaces","workspacePath","workspacePaths","runResult","err","error","scriptMissing","message","startsWith","process","exitCode","every","Boolean","module","exports"],"mappings":"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","sourcesContent":["const { resolve } = require('path')\nconst chalk = require('chalk')\nconst runScript = require('@npmcli/run-script')\nconst { isServerPackage } = runScript\nconst rpj = require('read-package-json-fast')\nconst log = require('npmlog')\nconst didYouMean = require('./utils/did-you-mean.js')\nconst isWindowsShell = require('./utils/is-windows-shell.js')\n\nconst cmdList = [\n  'publish',\n  'install',\n  'uninstall',\n  'test',\n  'stop',\n  'start',\n  'restart',\n  'version',\n].reduce((l, p) => l.concat(['pre' + p, p, 'post' + p]), [])\n\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s,\n  blue: s => s,\n  green: s => s,\n}\n\nconst BaseCommand = require('./base-command.js')\nclass RunScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Run arbitrary package scripts'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'workspace',\n      'workspaces',\n      'if-present',\n      'ignore-scripts',\n      'script-shell',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'run-script'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<command> [-- <args>]']\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json')\n      const { scripts = {} } = await rpj(json).catch(er => ({}))\n      return Object.keys(scripts)\n    }\n  }\n\n  exec (args, cb) {\n    if (args.length)\n      this.run(args).then(() => cb()).catch(cb)\n    else\n      this.list(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    if (args.length)\n      this.runWorkspaces(args, filters).then(() => cb()).catch(cb)\n    else\n      this.listWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async run ([event, ...args], { path = this.npm.localPrefix, pkg } = {}) {\n    // this || undefined is because runScript will be unhappy with the default\n    // null value\n    const scriptShell = this.npm.config.get('script-shell') || undefined\n\n    pkg = pkg || (await rpj(`${path}/package.json`))\n    const { scripts = {} } = pkg\n\n    if (event === 'restart' && !scripts.restart)\n      scripts.restart = 'npm stop --if-present && npm start'\n    else if (event === 'env' && !scripts.env)\n      scripts.env = isWindowsShell ? 'SET' : 'env'\n\n    pkg.scripts = scripts\n\n    if (\n      !Object.prototype.hasOwnProperty.call(scripts, event) &&\n      !(event === 'start' && await isServerPackage(path))\n    ) {\n      if (this.npm.config.get('if-present'))\n        return\n\n      const suggestions = await didYouMean(this.npm, path, event)\n      throw new Error(`Missing script: \"${event}\"${suggestions}\\n\\nTo see a list of scripts, run:\\n  npm run`)\n    }\n\n    // positional args only added to the main event, not pre/post\n    const events = [[event, args]]\n    if (!this.npm.config.get('ignore-scripts')) {\n      if (scripts[`pre${event}`])\n        events.unshift([`pre${event}`, []])\n\n      if (scripts[`post${event}`])\n        events.push([`post${event}`, []])\n    }\n\n    const opts = {\n      path,\n      args,\n      scriptShell,\n      stdio: 'inherit',\n      stdioString: true,\n      pkg,\n      banner: log.level !== 'silent',\n    }\n\n    for (const [event, args] of events) {\n      await runScript({\n        ...opts,\n        event,\n        args,\n      })\n    }\n  }\n\n  async list (args, path) {\n    path = path || this.npm.localPrefix\n    const { scripts, name, _id } = await rpj(`${path}/package.json`)\n    const pkgid = _id || name\n    const color = this.npm.color\n\n    if (!scripts)\n      return []\n\n    const allScripts = Object.keys(scripts)\n    if (log.level === 'silent')\n      return allScripts\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(scripts, null, 2))\n      return allScripts\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const [script, cmd] of Object.entries(scripts))\n        this.npm.output(`${script}:${cmd}`)\n\n      return allScripts\n    }\n\n    const indent = '\\n    '\n    const prefix = '  '\n    const cmds = []\n    const runScripts = []\n    for (const script of allScripts) {\n      const list = cmdList.includes(script) ? cmds : runScripts\n      list.push(script)\n    }\n    const colorize = color ? chalk : nocolor\n\n    if (cmds.length) {\n      this.npm.output(`${\n        colorize.reset(colorize.bold('Lifecycle scripts'))} included in ${\n        colorize.green(pkgid)}:`)\n    }\n\n    for (const script of cmds)\n      this.npm.output(prefix + script + indent + colorize.dim(scripts[script]))\n\n    if (!cmds.length && runScripts.length) {\n      this.npm.output(`${\n        colorize.bold('Scripts')\n      } available in ${colorize.green(pkgid)} via \\`${\n        colorize.blue('npm run-script')}\\`:`)\n    } else if (runScripts.length)\n      this.npm.output(`\\navailable via \\`${colorize.blue('npm run-script')}\\`:`)\n\n    for (const script of runScripts)\n      this.npm.output(prefix + script + indent + colorize.dim(scripts[script]))\n\n    this.npm.output('')\n    return allScripts\n  }\n\n  async runWorkspaces (args, filters) {\n    const res = []\n    await this.setWorkspaces(filters)\n\n    for (const workspacePath of this.workspacePaths) {\n      const pkg = await rpj(`${workspacePath}/package.json`)\n      const runResult = await this.run(args, {\n        path: workspacePath,\n        pkg,\n      }).catch(err => {\n        log.error(`Lifecycle script \\`${args[0]}\\` failed with error:`)\n        log.error(err)\n        log.error(`  in workspace: ${pkg._id || pkg.name}`)\n        log.error(`  at location: ${workspacePath}`)\n\n        const scriptMissing = err.message.startsWith('Missing script')\n\n        // avoids exiting with error code in case there's scripts missing\n        // in some workspaces since other scripts might have succeeded\n        if (!scriptMissing)\n          process.exitCode = 1\n\n        return scriptMissing\n      })\n      res.push(runResult)\n    }\n\n    // in case **all** tests are missing, then it should exit with error code\n    if (res.every(Boolean))\n      throw new Error(`Missing script: ${args[0]}`)\n  }\n\n  async listWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n\n    if (log.level === 'silent')\n      return\n\n    if (this.npm.config.get('json')) {\n      const res = {}\n      for (const workspacePath of this.workspacePaths) {\n        const { scripts, name } = await rpj(`${workspacePath}/package.json`)\n        res[name] = { ...scripts }\n      }\n      this.npm.output(JSON.stringify(res, null, 2))\n      return\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const workspacePath of this.workspacePaths) {\n        const { scripts, name } = await rpj(`${workspacePath}/package.json`)\n        for (const [script, cmd] of Object.entries(scripts || {}))\n          this.npm.output(`${name}:${script}:${cmd}`)\n      }\n      return\n    }\n\n    for (const workspacePath of this.workspacePaths)\n      await this.list(args, workspacePath)\n  }\n}\n\nmodule.exports = RunScript\n"]},"metadata":{},"sourceType":"script"}