{"ast":null,"code":"// this is called when an ERESOLVE error is caught in the exit-handler,\n// or when there's a log.warn('eresolve', msg, explanation), to turn it\n// into a human-intelligible explanation of what's wrong and how to fix.\nconst {\n  writeFileSync\n} = require('fs');\n\nconst {\n  explainEdge,\n  explainNode,\n  printNode\n} = require('./explain-dep.js'); // expl is an explanation object that comes from Arborist.  It looks like:\n// Depth is how far we want to want to descend into the object making a report.\n// The full report (ie, depth=Infinity) is always written to the cache folder\n// at ${cache}/eresolve-report.txt along with full json.\n\n\nconst explain = (expl, color, depth) => {\n  const {\n    edge,\n    dep,\n    current,\n    peerConflict,\n    currentEdge\n  } = expl;\n  const out = [];\n  const whileInstalling = dep && dep.whileInstalling || current && current.whileInstalling || edge && edge.from && edge.from.whileInstalling;\n  if (whileInstalling) out.push('While resolving: ' + printNode(whileInstalling, color)); // it \"should\" be impossible for an ERESOLVE explanation to lack both\n  // current and currentEdge, but better to have a less helpful error\n  // than a crashing failure.\n\n  if (current) out.push('Found: ' + explainNode(current, depth, color));else if (peerConflict && peerConflict.current) out.push('Found: ' + explainNode(peerConflict.current, depth, color));else if (currentEdge) out.push('Found: ' + explainEdge(currentEdge, depth, color));else\n    /* istanbul ignore else - should always have one */\n    if (edge) out.push('Found: ' + explainEdge(edge, depth, color));\n  out.push('\\nCould not resolve dependency:\\n' + explainEdge(edge, depth, color));\n\n  if (peerConflict) {\n    const heading = '\\nConflicting peer dependency:';\n    const pc = explainNode(peerConflict.peer, depth, color);\n    out.push(heading + ' ' + pc);\n  }\n\n  return out.join('\\n');\n}; // generate a full verbose report and tell the user how to fix it\n\n\nconst report = (expl, color, fullReport) => {\n  const orNoStrict = expl.strictPeerDeps ? '--no-strict-peer-deps, ' : '';\n  const fix = `Fix the upstream dependency conflict, or retry\nthis command with ${orNoStrict}--force, or --legacy-peer-deps\nto accept an incorrect (and potentially broken) dependency resolution.`;\n  writeFileSync(fullReport, `# npm resolution error report\n\n${new Date().toISOString()}\n\n${explain(expl, false, Infinity)}\n\n${fix}\n\nRaw JSON explanation object:\n\n${JSON.stringify(expl, null, 2)}\n`, 'utf8');\n  return explain(expl, color, 4) + `\\n\\n${fix}\\n\\nSee ${fullReport} for a full report.`;\n};\n\nmodule.exports = {\n  explain,\n  report\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/explain-eresolve.js"],"names":["writeFileSync","require","explainEdge","explainNode","printNode","explain","expl","color","depth","edge","dep","current","peerConflict","currentEdge","out","whileInstalling","from","push","heading","pc","peer","join","report","fullReport","orNoStrict","strictPeerDeps","fix","Date","toISOString","Infinity","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["// this is called when an ERESOLVE error is caught in the exit-handler,\n// or when there's a log.warn('eresolve', msg, explanation), to turn it\n// into a human-intelligible explanation of what's wrong and how to fix.\nconst { writeFileSync } = require('fs')\nconst { explainEdge, explainNode, printNode } = require('./explain-dep.js')\n\n// expl is an explanation object that comes from Arborist.  It looks like:\n// Depth is how far we want to want to descend into the object making a report.\n// The full report (ie, depth=Infinity) is always written to the cache folder\n// at ${cache}/eresolve-report.txt along with full json.\nconst explain = (expl, color, depth) => {\n  const { edge, dep, current, peerConflict, currentEdge } = expl\n\n  const out = []\n  const whileInstalling = dep && dep.whileInstalling ||\n    current && current.whileInstalling ||\n    edge && edge.from && edge.from.whileInstalling\n  if (whileInstalling)\n    out.push('While resolving: ' + printNode(whileInstalling, color))\n\n  // it \"should\" be impossible for an ERESOLVE explanation to lack both\n  // current and currentEdge, but better to have a less helpful error\n  // than a crashing failure.\n  if (current)\n    out.push('Found: ' + explainNode(current, depth, color))\n  else if (peerConflict && peerConflict.current)\n    out.push('Found: ' + explainNode(peerConflict.current, depth, color))\n  else if (currentEdge)\n    out.push('Found: ' + explainEdge(currentEdge, depth, color))\n  else /* istanbul ignore else - should always have one */ if (edge)\n    out.push('Found: ' + explainEdge(edge, depth, color))\n\n  out.push('\\nCould not resolve dependency:\\n' +\n    explainEdge(edge, depth, color))\n\n  if (peerConflict) {\n    const heading = '\\nConflicting peer dependency:'\n    const pc = explainNode(peerConflict.peer, depth, color)\n    out.push(heading + ' ' + pc)\n  }\n\n  return out.join('\\n')\n}\n\n// generate a full verbose report and tell the user how to fix it\nconst report = (expl, color, fullReport) => {\n  const orNoStrict = expl.strictPeerDeps ? '--no-strict-peer-deps, ' : ''\n  const fix = `Fix the upstream dependency conflict, or retry\nthis command with ${orNoStrict}--force, or --legacy-peer-deps\nto accept an incorrect (and potentially broken) dependency resolution.`\n\n  writeFileSync(fullReport, `# npm resolution error report\n\n${new Date().toISOString()}\n\n${explain(expl, false, Infinity)}\n\n${fix}\n\nRaw JSON explanation object:\n\n${JSON.stringify(expl, null, 2)}\n`, 'utf8')\n\n  return explain(expl, color, 4) +\n    `\\n\\n${fix}\\n\\nSee ${fullReport} for a full report.`\n}\n\nmodule.exports = {\n  explain,\n  report,\n}\n"]},"metadata":{},"sourceType":"script"}