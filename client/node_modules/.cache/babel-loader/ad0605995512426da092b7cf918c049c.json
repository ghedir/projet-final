{"ast":null,"code":"const conditionalHeaders = ['if-modified-since', 'if-none-match', 'if-unmodified-since', 'if-match', 'if-range'];\n\nconst configureOptions = opts => {\n  const {\n    strictSSL,\n    ...options\n  } = { ...opts\n  };\n  options.method = options.method ? options.method.toUpperCase() : 'GET';\n  options.rejectUnauthorized = strictSSL !== false;\n  if (!options.retry) options.retry = {\n    retries: 0\n  };else if (typeof options.retry === 'string') {\n    const retries = parseInt(options.retry, 10);\n    if (isFinite(retries)) options.retry = {\n      retries\n    };else options.retry = {\n      retries: 0\n    };\n  } else if (typeof options.retry === 'number') options.retry = {\n    retries: options.retry\n  };else options.retry = {\n    retries: 0,\n    ...options.retry\n  };\n  options.cache = options.cache || 'default';\n\n  if (options.cache === 'default') {\n    const hasConditionalHeader = Object.keys(options.headers || {}).some(name => {\n      return conditionalHeaders.includes(name.toLowerCase());\n    });\n    if (hasConditionalHeader) options.cache = 'no-store';\n  } // cacheManager is deprecated, but if it's set and\n  // cachePath is not we should copy it to the new field\n\n\n  if (options.cacheManager && !options.cachePath) options.cachePath = options.cacheManager;\n  return options;\n};\n\nmodule.exports = configureOptions;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/make-fetch-happen/lib/options.js"],"names":["conditionalHeaders","configureOptions","opts","strictSSL","options","method","toUpperCase","rejectUnauthorized","retry","retries","parseInt","isFinite","cache","hasConditionalHeader","Object","keys","headers","some","name","includes","toLowerCase","cacheManager","cachePath","module","exports"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,CACzB,mBADyB,EAEzB,eAFyB,EAGzB,qBAHyB,EAIzB,UAJyB,EAKzB,UALyB,CAA3B;;AAQA,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;AACjC,QAAM;AAACC,IAAAA,SAAD;AAAY,OAAGC;AAAf,MAA0B,EAAE,GAAGF;AAAL,GAAhC;AACAE,EAAAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,CAAeC,WAAf,EAAjB,GAAgD,KAAjE;AACAF,EAAAA,OAAO,CAACG,kBAAR,GAA6BJ,SAAS,KAAK,KAA3C;AAEA,MAAI,CAACC,OAAO,CAACI,KAAb,EACEJ,OAAO,CAACI,KAAR,GAAgB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAhB,CADF,KAEK,IAAI,OAAOL,OAAO,CAACI,KAAf,KAAyB,QAA7B,EAAuC;AAC1C,UAAMC,OAAO,GAAGC,QAAQ,CAACN,OAAO,CAACI,KAAT,EAAgB,EAAhB,CAAxB;AACA,QAAIG,QAAQ,CAACF,OAAD,CAAZ,EACEL,OAAO,CAACI,KAAR,GAAgB;AAAEC,MAAAA;AAAF,KAAhB,CADF,KAGEL,OAAO,CAACI,KAAR,GAAgB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAhB;AACH,GANI,MAME,IAAI,OAAOL,OAAO,CAACI,KAAf,KAAyB,QAA7B,EACLJ,OAAO,CAACI,KAAR,GAAgB;AAAEC,IAAAA,OAAO,EAAEL,OAAO,CAACI;AAAnB,GAAhB,CADK,KAGLJ,OAAO,CAACI,KAAR,GAAgB;AAAEC,IAAAA,OAAO,EAAE,CAAX;AAAc,OAAGL,OAAO,CAACI;AAAzB,GAAhB;AAEFJ,EAAAA,OAAO,CAACQ,KAAR,GAAgBR,OAAO,CAACQ,KAAR,IAAiB,SAAjC;;AACA,MAAIR,OAAO,CAACQ,KAAR,KAAkB,SAAtB,EAAiC;AAC/B,UAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAYX,OAAO,CAACY,OAAR,IAAmB,EAA/B,EAAmCC,IAAnC,CAAyCC,IAAD,IAAU;AAC7E,aAAOlB,kBAAkB,CAACmB,QAAnB,CAA4BD,IAAI,CAACE,WAAL,EAA5B,CAAP;AACD,KAF4B,CAA7B;AAGA,QAAIP,oBAAJ,EACET,OAAO,CAACQ,KAAR,GAAgB,UAAhB;AACH,GAzBgC,CA2BjC;AACA;;;AACA,MAAIR,OAAO,CAACiB,YAAR,IAAwB,CAACjB,OAAO,CAACkB,SAArC,EACElB,OAAO,CAACkB,SAAR,GAAoBlB,OAAO,CAACiB,YAA5B;AAEF,SAAOjB,OAAP;AACD,CAjCD;;AAmCAmB,MAAM,CAACC,OAAP,GAAiBvB,gBAAjB","sourcesContent":["const conditionalHeaders = [\n  'if-modified-since',\n  'if-none-match',\n  'if-unmodified-since',\n  'if-match',\n  'if-range',\n]\n\nconst configureOptions = (opts) => {\n  const {strictSSL, ...options} = { ...opts }\n  options.method = options.method ? options.method.toUpperCase() : 'GET'\n  options.rejectUnauthorized = strictSSL !== false\n\n  if (!options.retry)\n    options.retry = { retries: 0 }\n  else if (typeof options.retry === 'string') {\n    const retries = parseInt(options.retry, 10)\n    if (isFinite(retries))\n      options.retry = { retries }\n    else\n      options.retry = { retries: 0 }\n  } else if (typeof options.retry === 'number')\n    options.retry = { retries: options.retry }\n  else\n    options.retry = { retries: 0, ...options.retry }\n\n  options.cache = options.cache || 'default'\n  if (options.cache === 'default') {\n    const hasConditionalHeader = Object.keys(options.headers || {}).some((name) => {\n      return conditionalHeaders.includes(name.toLowerCase())\n    })\n    if (hasConditionalHeader)\n      options.cache = 'no-store'\n  }\n\n  // cacheManager is deprecated, but if it's set and\n  // cachePath is not we should copy it to the new field\n  if (options.cacheManager && !options.cachePath)\n    options.cachePath = options.cacheManager\n\n  return options\n}\n\nmodule.exports = configureOptions\n"]},"metadata":{},"sourceType":"script"}