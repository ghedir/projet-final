{"ast":null,"code":"const inspect = require('util').inspect;\n\nconst {\n  URL\n} = require('url');\n\nconst ansistyles = require('ansistyles');\n\nconst log = require('npmlog');\n\nconst npmProfile = require('npm-profile');\n\nconst qrcodeTerminal = require('qrcode-terminal');\n\nconst Table = require('cli-table3');\n\nconst otplease = require('./utils/otplease.js');\n\nconst pulseTillDone = require('./utils/pulse-till-done.js');\n\nconst readUserInfo = require('./utils/read-user-info.js');\n\nconst qrcode = url => new Promise(resolve => qrcodeTerminal.generate(url, resolve));\n\nconst knownProfileKeys = ['name', 'email', 'two-factor auth', 'fullname', 'homepage', 'freenode', 'twitter', 'github', 'created', 'updated'];\nconst writableProfileKeys = ['email', 'password', 'fullname', 'homepage', 'freenode', 'twitter', 'github'];\n\nconst BaseCommand = require('./base-command.js');\n\nclass Profile extends BaseCommand {\n  static get description() {\n    return 'Change settings on your registry profile';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'profile';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['enable-2fa [auth-only|auth-and-writes]', 'disable-2fa', 'get [<key>]', 'set <key> <value>'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['registry', 'json', 'parseable', 'otp'];\n  }\n\n  async completion(opts) {\n    var argv = opts.conf.argv.remain;\n    if (!argv[2]) return ['enable-2fa', 'disable-2fa', 'get', 'set'];\n\n    switch (argv[2]) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n        return ['auth-and-writes', 'auth-only'];\n\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'get':\n      case 'set':\n        return [];\n\n      default:\n        throw new Error(argv[2] + ' not recognized');\n    }\n  }\n\n  exec(args, cb) {\n    this.profile(args).then(() => cb()).catch(cb);\n  }\n\n  async profile(args) {\n    if (args.length === 0) throw new Error(this.usage);\n    log.gauge.show('profile');\n    const [subcmd, ...opts] = args;\n\n    switch (subcmd) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n      case 'enable2fa':\n      case 'enabletfa':\n        return this.enable2fa(opts);\n\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'disable2fa':\n      case 'disabletfa':\n        return this.disable2fa();\n\n      case 'get':\n        return this.get(opts);\n\n      case 'set':\n        return this.set(opts);\n\n      default:\n        throw new Error('Unknown profile command: ' + subcmd);\n    }\n  }\n\n  async get(args) {\n    const tfa = 'two-factor auth';\n    const info = await pulseTillDone.withPromise(npmProfile.get(this.npm.flatOptions));\n    if (!info.cidr_whitelist) delete info.cidr_whitelist;\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(info, null, 2));\n      return;\n    } // clean up and format key/values for output\n\n\n    const cleaned = {};\n\n    for (const key of knownProfileKeys) cleaned[key] = info[key] || '';\n\n    const unknownProfileKeys = Object.keys(info).filter(k => !(k in cleaned));\n\n    for (const key of unknownProfileKeys) cleaned[key] = info[key] || '';\n\n    delete cleaned.tfa;\n    delete cleaned.email_verified;\n    cleaned.email += info.email_verified ? ' (verified)' : '(unverified)';\n    if (info.tfa && !info.tfa.pending) cleaned[tfa] = info.tfa.mode;else cleaned[tfa] = 'disabled';\n\n    if (args.length) {\n      const values = args // comma or space separated\n      .join(',').split(/,/).filter(arg => arg.trim() !== '').map(arg => cleaned[arg]).join('\\t');\n      this.npm.output(values);\n    } else {\n      if (this.npm.config.get('parseable')) {\n        for (const key of Object.keys(info)) {\n          if (key === 'tfa') this.npm.output(`${key}\\t${cleaned[tfa]}`);else this.npm.output(`${key}\\t${info[key]}`);\n        }\n      } else {\n        const table = new Table();\n\n        for (const key of Object.keys(cleaned)) table.push({\n          [ansistyles.bright(key)]: cleaned[key]\n        });\n\n        this.npm.output(table.toString());\n      }\n    }\n  }\n\n  async set(args) {\n    const conf = this.npm.flatOptions;\n    const prop = (args[0] || '').toLowerCase().trim();\n    let value = args.length > 1 ? args.slice(1).join(' ') : null;\n\n    const readPasswords = async () => {\n      const newpassword = await readUserInfo.password('New password: ');\n      const confirmedpassword = await readUserInfo.password('       Again:     ');\n\n      if (newpassword !== confirmedpassword) {\n        log.warn('profile', 'Passwords do not match, please try again.');\n        return readPasswords();\n      }\n\n      return newpassword;\n    };\n\n    if (prop !== 'password' && value === null) throw new Error('npm profile set <prop> <value>');\n\n    if (prop === 'password' && value !== null) {\n      throw new Error('npm profile set password\\n' + 'Do not include your current or new passwords on the command line.');\n    }\n\n    if (writableProfileKeys.indexOf(prop) === -1) {\n      throw new Error(`\"${prop}\" is not a property we can set. ` + `Valid properties are: ` + writableProfileKeys.join(', '));\n    }\n\n    if (prop === 'password') {\n      const current = await readUserInfo.password('Current password: ');\n      const newpassword = await readPasswords();\n      value = {\n        old: current,\n        new: newpassword\n      };\n    } // FIXME: Work around to not clear everything other than what we're setting\n\n\n    const user = await pulseTillDone.withPromise(npmProfile.get(conf));\n    const newUser = {};\n\n    for (const key of writableProfileKeys) newUser[key] = user[key];\n\n    newUser[prop] = value;\n    const result = await otplease(conf, conf => npmProfile.set(newUser, conf));\n    if (this.npm.config.get('json')) this.npm.output(JSON.stringify({\n      [prop]: result[prop]\n    }, null, 2));else if (this.npm.config.get('parseable')) this.npm.output(prop + '\\t' + result[prop]);else if (result[prop] != null) this.npm.output('Set', prop, 'to', result[prop]);else this.npm.output('Set', prop);\n  }\n\n  async enable2fa(args) {\n    if (args.length > 1) throw new Error('npm profile enable-2fa [auth-and-writes|auth-only]');\n    const mode = args[0] || 'auth-and-writes';\n\n    if (mode !== 'auth-only' && mode !== 'auth-and-writes') {\n      throw new Error(`Invalid two-factor authentication mode \"${mode}\".\\n` + 'Valid modes are:\\n' + '  auth-only - Require two-factor authentication only when logging in\\n' + '  auth-and-writes - Require two-factor authentication when logging in ' + 'AND when publishing');\n    }\n\n    if (this.npm.config.get('json') || this.npm.config.get('parseable')) {\n      throw new Error('Enabling two-factor authentication is an interactive operation and ' + (this.npm.config.get('json') ? 'JSON' : 'parseable') + ' output mode is not available');\n    }\n\n    const info = {\n      tfa: {\n        mode: mode\n      }\n    }; // if they're using legacy auth currently then we have to\n    // update them to a bearer token before continuing.\n\n    const creds = this.npm.config.getCredentialsByURI(this.npm.config.get('registry'));\n    const auth = {};\n    if (creds.token) auth.token = creds.token;else if (creds.username) auth.basic = {\n      username: creds.username,\n      password: creds.password\n    };else if (creds.auth) {\n      const basic = Buffer.from(creds.auth, 'base64').toString().split(':', 2);\n      auth.basic = {\n        username: basic[0],\n        password: basic[1]\n      };\n    }\n\n    if (!auth.basic && !auth.token) {\n      throw new Error('You need to be logged in to registry ' + `${this.npm.config.get('registry')} in order to enable 2fa`);\n    }\n\n    if (auth.basic) {\n      log.info('profile', 'Updating authentication to bearer token');\n      const result = await npmProfile.createToken(auth.basic.password, false, [], this.npm.flatOptions);\n\n      if (!result.token) {\n        throw new Error(`Your registry ${this.npm.config.get('registry')} does not seem to ` + 'support bearer tokens. Bearer tokens are required for ' + 'two-factor authentication');\n      }\n\n      this.npm.config.setCredentialsByURI(this.npm.config.get('registry'), {\n        token: result.token\n      });\n      await this.npm.config.save('user');\n    }\n\n    log.notice('profile', 'Enabling two factor authentication for ' + mode);\n    const password = await readUserInfo.password();\n    info.tfa.password = password;\n    log.info('profile', 'Determine if tfa is pending');\n    const userInfo = await pulseTillDone.withPromise(npmProfile.get(this.npm.flatOptions));\n    const conf = { ...this.npm.flatOptions\n    };\n\n    if (userInfo && userInfo.tfa && userInfo.tfa.pending) {\n      log.info('profile', 'Resetting two-factor authentication');\n      await pulseTillDone.withPromise(npmProfile.set({\n        tfa: {\n          password,\n          mode: 'disable'\n        }\n      }, conf));\n    } else if (userInfo && userInfo.tfa) {\n      if (!conf.otp) {\n        conf.otp = await readUserInfo.otp('Enter one-time password from your authenticator app: ');\n      }\n    }\n\n    log.info('profile', 'Setting two-factor authentication to ' + mode);\n    const challenge = await pulseTillDone.withPromise(npmProfile.set(info, conf));\n\n    if (challenge.tfa === null) {\n      this.npm.output('Two factor authentication mode changed to: ' + mode);\n      return;\n    }\n\n    const badResponse = typeof challenge.tfa !== 'string' || !/^otpauth:[/][/]/.test(challenge.tfa);\n\n    if (badResponse) {\n      throw new Error('Unknown error enabling two-factor authentication. Expected otpauth URL' + ', got: ' + inspect(challenge.tfa));\n    }\n\n    const otpauth = new URL(challenge.tfa);\n    const secret = otpauth.searchParams.get('secret');\n    const code = await qrcode(challenge.tfa);\n    this.npm.output('Scan into your authenticator app:\\n' + code + '\\n Or enter code:', secret);\n    const interactiveOTP = await readUserInfo.otp('And an OTP code from your authenticator: ');\n    log.info('profile', 'Finalizing two-factor authentication');\n    const result = await npmProfile.set({\n      tfa: [interactiveOTP]\n    }, conf);\n    this.npm.output('2FA successfully enabled. Below are your recovery codes, ' + 'please print these out.');\n    this.npm.output('You will need these to recover access to your account ' + 'if you lose your authentication device.');\n\n    for (const tfaCode of result.tfa) this.npm.output('\\t' + tfaCode);\n  }\n\n  async disable2fa(args) {\n    const conf = { ...this.npm.flatOptions\n    };\n    const info = await pulseTillDone.withPromise(npmProfile.get(conf));\n\n    if (!info.tfa || info.tfa.pending) {\n      this.npm.output('Two factor authentication not enabled.');\n      return;\n    }\n\n    const password = await readUserInfo.password();\n\n    if (!conf.otp) {\n      const msg = 'Enter one-time password from your authenticator app: ';\n      conf.otp = await readUserInfo.otp(msg);\n    }\n\n    log.info('profile', 'disabling tfa');\n    await pulseTillDone.withPromise(npmProfile.set({\n      tfa: {\n        password: password,\n        mode: 'disable'\n      }\n    }, conf));\n    if (this.npm.config.get('json')) this.npm.output(JSON.stringify({\n      tfa: false\n    }, null, 2));else if (this.npm.config.get('parseable')) this.npm.output('tfa\\tfalse');else this.npm.output('Two factor authentication disabled.');\n  }\n\n}\n\nmodule.exports = Profile;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/profile.js"],"names":["inspect","require","URL","ansistyles","log","npmProfile","qrcodeTerminal","Table","otplease","pulseTillDone","readUserInfo","qrcode","url","Promise","resolve","generate","knownProfileKeys","writableProfileKeys","BaseCommand","Profile","description","name","usage","params","completion","opts","argv","conf","remain","Error","exec","args","cb","profile","then","catch","length","gauge","show","subcmd","enable2fa","disable2fa","get","set","tfa","info","withPromise","npm","flatOptions","cidr_whitelist","config","output","JSON","stringify","cleaned","key","unknownProfileKeys","Object","keys","filter","k","email_verified","email","pending","mode","values","join","split","arg","trim","map","table","push","bright","toString","prop","toLowerCase","value","slice","readPasswords","newpassword","password","confirmedpassword","warn","indexOf","current","old","new","user","newUser","result","creds","getCredentialsByURI","auth","token","username","basic","Buffer","from","createToken","setCredentialsByURI","save","notice","userInfo","otp","challenge","badResponse","test","otpauth","secret","searchParams","code","interactiveOTP","tfaCode","msg","module","exports"],"mappings":"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","sourcesContent":["const inspect = require('util').inspect\nconst { URL } = require('url')\nconst ansistyles = require('ansistyles')\nconst log = require('npmlog')\nconst npmProfile = require('npm-profile')\nconst qrcodeTerminal = require('qrcode-terminal')\nconst Table = require('cli-table3')\n\nconst otplease = require('./utils/otplease.js')\nconst pulseTillDone = require('./utils/pulse-till-done.js')\nconst readUserInfo = require('./utils/read-user-info.js')\n\nconst qrcode = url =>\n  new Promise((resolve) => qrcodeTerminal.generate(url, resolve))\n\nconst knownProfileKeys = [\n  'name',\n  'email',\n  'two-factor auth',\n  'fullname',\n  'homepage',\n  'freenode',\n  'twitter',\n  'github',\n  'created',\n  'updated',\n]\n\nconst writableProfileKeys = [\n  'email',\n  'password',\n  'fullname',\n  'homepage',\n  'freenode',\n  'twitter',\n  'github',\n]\n\nconst BaseCommand = require('./base-command.js')\nclass Profile extends BaseCommand {\n  static get description () {\n    return 'Change settings on your registry profile'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'profile'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      'enable-2fa [auth-only|auth-and-writes]',\n      'disable-2fa',\n      'get [<key>]',\n      'set <key> <value>',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'registry',\n      'json',\n      'parseable',\n      'otp',\n    ]\n  }\n\n  async completion (opts) {\n    var argv = opts.conf.argv.remain\n\n    if (!argv[2])\n      return ['enable-2fa', 'disable-2fa', 'get', 'set']\n\n    switch (argv[2]) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n        return ['auth-and-writes', 'auth-only']\n\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'get':\n      case 'set':\n        return []\n      default:\n        throw new Error(argv[2] + ' not recognized')\n    }\n  }\n\n  exec (args, cb) {\n    this.profile(args).then(() => cb()).catch(cb)\n  }\n\n  async profile (args) {\n    if (args.length === 0)\n      throw new Error(this.usage)\n\n    log.gauge.show('profile')\n\n    const [subcmd, ...opts] = args\n\n    switch (subcmd) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n      case 'enable2fa':\n      case 'enabletfa':\n        return this.enable2fa(opts)\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'disable2fa':\n      case 'disabletfa':\n        return this.disable2fa()\n      case 'get':\n        return this.get(opts)\n      case 'set':\n        return this.set(opts)\n      default:\n        throw new Error('Unknown profile command: ' + subcmd)\n    }\n  }\n\n  async get (args) {\n    const tfa = 'two-factor auth'\n    const info = await pulseTillDone.withPromise(\n      npmProfile.get(this.npm.flatOptions)\n    )\n\n    if (!info.cidr_whitelist)\n      delete info.cidr_whitelist\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(info, null, 2))\n      return\n    }\n\n    // clean up and format key/values for output\n    const cleaned = {}\n    for (const key of knownProfileKeys)\n      cleaned[key] = info[key] || ''\n\n    const unknownProfileKeys = Object.keys(info).filter((k) => !(k in cleaned))\n    for (const key of unknownProfileKeys)\n      cleaned[key] = info[key] || ''\n\n    delete cleaned.tfa\n    delete cleaned.email_verified\n    cleaned.email += info.email_verified ? ' (verified)' : '(unverified)'\n\n    if (info.tfa && !info.tfa.pending)\n      cleaned[tfa] = info.tfa.mode\n    else\n      cleaned[tfa] = 'disabled'\n\n    if (args.length) {\n      const values = args // comma or space separated\n        .join(',')\n        .split(/,/)\n        .filter((arg) => arg.trim() !== '')\n        .map((arg) => cleaned[arg])\n        .join('\\t')\n      this.npm.output(values)\n    } else {\n      if (this.npm.config.get('parseable')) {\n        for (const key of Object.keys(info)) {\n          if (key === 'tfa')\n            this.npm.output(`${key}\\t${cleaned[tfa]}`)\n          else\n            this.npm.output(`${key}\\t${info[key]}`)\n        }\n      } else {\n        const table = new Table()\n        for (const key of Object.keys(cleaned))\n          table.push({ [ansistyles.bright(key)]: cleaned[key] })\n\n        this.npm.output(table.toString())\n      }\n    }\n  }\n\n  async set (args) {\n    const conf = this.npm.flatOptions\n    const prop = (args[0] || '').toLowerCase().trim()\n\n    let value = args.length > 1 ? args.slice(1).join(' ') : null\n\n    const readPasswords = async () => {\n      const newpassword = await readUserInfo.password('New password: ')\n      const confirmedpassword = await readUserInfo.password('       Again:     ')\n\n      if (newpassword !== confirmedpassword) {\n        log.warn('profile', 'Passwords do not match, please try again.')\n        return readPasswords()\n      }\n\n      return newpassword\n    }\n\n    if (prop !== 'password' && value === null)\n      throw new Error('npm profile set <prop> <value>')\n\n    if (prop === 'password' && value !== null) {\n      throw new Error(\n        'npm profile set password\\n' +\n        'Do not include your current or new passwords on the command line.')\n    }\n\n    if (writableProfileKeys.indexOf(prop) === -1) {\n      throw new Error(`\"${prop}\" is not a property we can set. ` +\n        `Valid properties are: ` + writableProfileKeys.join(', '))\n    }\n\n    if (prop === 'password') {\n      const current = await readUserInfo.password('Current password: ')\n      const newpassword = await readPasswords()\n\n      value = { old: current, new: newpassword }\n    }\n\n    // FIXME: Work around to not clear everything other than what we're setting\n    const user = await pulseTillDone.withPromise(npmProfile.get(conf))\n    const newUser = {}\n\n    for (const key of writableProfileKeys)\n      newUser[key] = user[key]\n\n    newUser[prop] = value\n\n    const result = await otplease(conf, conf => npmProfile.set(newUser, conf))\n\n    if (this.npm.config.get('json'))\n      this.npm.output(JSON.stringify({ [prop]: result[prop] }, null, 2))\n    else if (this.npm.config.get('parseable'))\n      this.npm.output(prop + '\\t' + result[prop])\n    else if (result[prop] != null)\n      this.npm.output('Set', prop, 'to', result[prop])\n    else\n      this.npm.output('Set', prop)\n  }\n\n  async enable2fa (args) {\n    if (args.length > 1)\n      throw new Error('npm profile enable-2fa [auth-and-writes|auth-only]')\n\n    const mode = args[0] || 'auth-and-writes'\n    if (mode !== 'auth-only' && mode !== 'auth-and-writes') {\n      throw new Error(\n        `Invalid two-factor authentication mode \"${mode}\".\\n` +\n        'Valid modes are:\\n' +\n        '  auth-only - Require two-factor authentication only when logging in\\n' +\n        '  auth-and-writes - Require two-factor authentication when logging in ' +\n        'AND when publishing'\n      )\n    }\n\n    if (this.npm.config.get('json') || this.npm.config.get('parseable')) {\n      throw new Error(\n        'Enabling two-factor authentication is an interactive operation and ' +\n        (this.npm.config.get('json') ? 'JSON' : 'parseable') + ' output mode is not available'\n      )\n    }\n\n    const info = {\n      tfa: {\n        mode: mode,\n      },\n    }\n\n    // if they're using legacy auth currently then we have to\n    // update them to a bearer token before continuing.\n    const creds = this.npm.config.getCredentialsByURI(this.npm.config.get('registry'))\n    const auth = {}\n\n    if (creds.token)\n      auth.token = creds.token\n    else if (creds.username)\n      auth.basic = { username: creds.username, password: creds.password }\n    else if (creds.auth) {\n      const basic = Buffer.from(creds.auth, 'base64').toString().split(':', 2)\n      auth.basic = { username: basic[0], password: basic[1] }\n    }\n\n    if (!auth.basic && !auth.token) {\n      throw new Error(\n        'You need to be logged in to registry ' +\n        `${this.npm.config.get('registry')} in order to enable 2fa`\n      )\n    }\n\n    if (auth.basic) {\n      log.info('profile', 'Updating authentication to bearer token')\n      const result = await npmProfile.createToken(\n        auth.basic.password, false, [], this.npm.flatOptions\n      )\n\n      if (!result.token) {\n        throw new Error(\n          `Your registry ${this.npm.config.get('registry')} does not seem to ` +\n          'support bearer tokens. Bearer tokens are required for ' +\n          'two-factor authentication'\n        )\n      }\n\n      this.npm.config.setCredentialsByURI(\n        this.npm.config.get('registry'),\n        { token: result.token }\n      )\n      await this.npm.config.save('user')\n    }\n\n    log.notice('profile', 'Enabling two factor authentication for ' + mode)\n    const password = await readUserInfo.password()\n    info.tfa.password = password\n\n    log.info('profile', 'Determine if tfa is pending')\n    const userInfo = await pulseTillDone.withPromise(\n      npmProfile.get(this.npm.flatOptions)\n    )\n\n    const conf = { ...this.npm.flatOptions }\n    if (userInfo && userInfo.tfa && userInfo.tfa.pending) {\n      log.info('profile', 'Resetting two-factor authentication')\n      await pulseTillDone.withPromise(\n        npmProfile.set({ tfa: { password, mode: 'disable' } }, conf)\n      )\n    } else if (userInfo && userInfo.tfa) {\n      if (!conf.otp) {\n        conf.otp = await readUserInfo.otp(\n          'Enter one-time password from your authenticator app: '\n        )\n      }\n    }\n\n    log.info('profile', 'Setting two-factor authentication to ' + mode)\n    const challenge = await pulseTillDone.withPromise(\n      npmProfile.set(info, conf)\n    )\n\n    if (challenge.tfa === null) {\n      this.npm.output('Two factor authentication mode changed to: ' + mode)\n      return\n    }\n\n    const badResponse = typeof challenge.tfa !== 'string'\n      || !/^otpauth:[/][/]/.test(challenge.tfa)\n    if (badResponse) {\n      throw new Error(\n        'Unknown error enabling two-factor authentication. Expected otpauth URL' +\n        ', got: ' + inspect(challenge.tfa)\n      )\n    }\n\n    const otpauth = new URL(challenge.tfa)\n    const secret = otpauth.searchParams.get('secret')\n    const code = await qrcode(challenge.tfa)\n\n    this.npm.output(\n      'Scan into your authenticator app:\\n' + code + '\\n Or enter code:', secret\n    )\n\n    const interactiveOTP =\n      await readUserInfo.otp('And an OTP code from your authenticator: ')\n\n    log.info('profile', 'Finalizing two-factor authentication')\n\n    const result = await npmProfile.set({ tfa: [interactiveOTP] }, conf)\n\n    this.npm.output(\n      '2FA successfully enabled. Below are your recovery codes, ' +\n      'please print these out.'\n    )\n    this.npm.output(\n      'You will need these to recover access to your account ' +\n      'if you lose your authentication device.'\n    )\n\n    for (const tfaCode of result.tfa)\n      this.npm.output('\\t' + tfaCode)\n  }\n\n  async disable2fa (args) {\n    const conf = { ...this.npm.flatOptions }\n    const info = await pulseTillDone.withPromise(npmProfile.get(conf))\n\n    if (!info.tfa || info.tfa.pending) {\n      this.npm.output('Two factor authentication not enabled.')\n      return\n    }\n\n    const password = await readUserInfo.password()\n\n    if (!conf.otp) {\n      const msg = 'Enter one-time password from your authenticator app: '\n      conf.otp = await readUserInfo.otp(msg)\n    }\n\n    log.info('profile', 'disabling tfa')\n\n    await pulseTillDone.withPromise(npmProfile.set({\n      tfa: { password: password, mode: 'disable' },\n    }, conf))\n\n    if (this.npm.config.get('json'))\n      this.npm.output(JSON.stringify({ tfa: false }, null, 2))\n    else if (this.npm.config.get('parseable'))\n      this.npm.output('tfa\\tfalse')\n    else\n      this.npm.output('Two factor authentication disabled.')\n  }\n}\nmodule.exports = Profile\n"]},"metadata":{},"sourceType":"script"}