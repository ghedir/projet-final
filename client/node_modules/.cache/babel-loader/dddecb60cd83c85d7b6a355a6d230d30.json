{"ast":null,"code":"const allSettled = Promise.allSettled ? promises => Promise.allSettled(promises) : promises => {\n  const reflections = [];\n\n  for (let i = 0; i < promises.length; i++) {\n    reflections[i] = Promise.resolve(promises[i]).then(value => ({\n      status: 'fulfilled',\n      value\n    }), reason => ({\n      status: 'rejected',\n      reason\n    }));\n  }\n\n  return Promise.all(reflections);\n};\n\nmodule.exports = promises => allSettled(promises).then(results => {\n  let er = null;\n  const ret = new Array(results.length);\n  results.forEach((result, i) => {\n    if (result.status === 'rejected') throw result.reason;else ret[i] = result.value;\n  });\n  return ret;\n});","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/promise-all-reject-late/index.js"],"names":["allSettled","Promise","promises","reflections","i","length","resolve","then","value","status","reason","all","module","exports","results","er","ret","Array","forEach","result"],"mappings":"AAAA,MAAMA,UAAU,GACdC,OAAO,CAACD,UAAR,GAAqBE,QAAQ,IAAID,OAAO,CAACD,UAAR,CAAmBE,QAAnB,CAAjC,GACEA,QAAQ,IAAI;AACZ,QAAMC,WAAW,GAAG,EAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCD,IAAAA,WAAW,CAACC,CAAD,CAAX,GAAiBH,OAAO,CAACK,OAAR,CAAgBJ,QAAQ,CAACE,CAAD,CAAxB,EAA6BG,IAA7B,CAAkCC,KAAK,KAAK;AAC3DC,MAAAA,MAAM,EAAE,WADmD;AAE3DD,MAAAA;AAF2D,KAAL,CAAvC,EAGbE,MAAM,KAAK;AACbD,MAAAA,MAAM,EAAE,UADK;AAEbC,MAAAA;AAFa,KAAL,CAHO,CAAjB;AAOD;;AACD,SAAOT,OAAO,CAACU,GAAR,CAAYR,WAAZ,CAAP;AACD,CAdH;;AAgBAS,MAAM,CAACC,OAAP,GAAiBX,QAAQ,IAAIF,UAAU,CAACE,QAAD,CAAV,CAAqBK,IAArB,CAA0BO,OAAO,IAAI;AAChE,MAAIC,EAAE,GAAG,IAAT;AACA,QAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAUH,OAAO,CAACT,MAAlB,CAAZ;AACAS,EAAAA,OAAO,CAACI,OAAR,CAAgB,CAACC,MAAD,EAASf,CAAT,KAAe;AAC7B,QAAIe,MAAM,CAACV,MAAP,KAAkB,UAAtB,EACE,MAAMU,MAAM,CAACT,MAAb,CADF,KAGEM,GAAG,CAACZ,CAAD,CAAH,GAASe,MAAM,CAACX,KAAhB;AACH,GALD;AAMA,SAAOQ,GAAP;AACD,CAV4B,CAA7B","sourcesContent":["const allSettled =\n  Promise.allSettled ? promises => Promise.allSettled(promises)\n  : promises => {\n    const reflections = []\n    for (let i = 0; i < promises.length; i++) {\n      reflections[i] = Promise.resolve(promises[i]).then(value => ({\n        status: 'fulfilled',\n        value,\n      }), reason => ({\n        status: 'rejected',\n        reason,\n      }))\n    }\n    return Promise.all(reflections)\n  }\n\nmodule.exports = promises => allSettled(promises).then(results => {\n  let er = null\n  const ret = new Array(results.length)\n  results.forEach((result, i) => {\n    if (result.status === 'rejected')\n      throw result.reason\n    else\n      ret[i] = result.value\n  })\n  return ret\n})\n"]},"metadata":{},"sourceType":"script"}