{"ast":null,"code":"const npmFetch = require('npm-registry-fetch');\n\nconst needsAuthError = msg => Object.assign(new Error(msg), {\n  code: 'ENEEDAUTH'\n});\n\nmodule.exports = async (npm, opts = {}) => {\n  const {\n    registry\n  } = opts;\n  if (!registry) throw Object.assign(new Error('No registry specified.'), {\n    code: 'ENOREGISTRY'\n  }); // First, check if we have a user/pass-based auth\n\n  const creds = npm.config.getCredentialsByURI(registry);\n  const {\n    username: usernameFromURI,\n    token\n  } = creds;\n\n  if (usernameFromURI) {\n    // Found username; return it\n    return usernameFromURI;\n  } else if (token) {\n    // No username, but we have a token; fetch the username from registry\n    const registryData = await npmFetch.json('/-/whoami', { ...opts\n    });\n    const {\n      username: usernameFromRegistry\n    } = registryData; // Retrieved username from registry; return it\n\n    if (usernameFromRegistry) return usernameFromRegistry;else {\n      // Didn't get username from registry; bad token\n      throw needsAuthError('Your auth token is no longer valid. Please login again.');\n    }\n  } else {\n    // At this point, if they have a credentials object, it doesn't have a\n    // token or auth in it. Probably just the default registry.\n    throw needsAuthError('This command requires you to be logged in.');\n  }\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/get-identity.js"],"names":["npmFetch","require","needsAuthError","msg","Object","assign","Error","code","module","exports","npm","opts","registry","creds","config","getCredentialsByURI","username","usernameFromURI","token","registryData","json","usernameFromRegistry"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AAEA,MAAMC,cAAc,GAAIC,GAAD,IACrBC,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAUH,GAAV,CAAd,EAA8B;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAA9B,CADF;;AAGAC,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,IAAI,GAAG,EAAnB,KAA0B;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAeD,IAArB;AACA,MAAI,CAACC,QAAL,EACE,MAAMR,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAU,wBAAV,CAAd,EAAmD;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAnD,CAAN,CAHuC,CAKzC;;AACA,QAAMM,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAWC,mBAAX,CAA+BH,QAA/B,CAAd;AACA,QAAM;AAAEI,IAAAA,QAAQ,EAAEC,eAAZ;AAA6BC,IAAAA;AAA7B,MAAuCL,KAA7C;;AAEA,MAAII,eAAJ,EAAqB;AACnB;AACA,WAAOA,eAAP;AACD,GAHD,MAGO,IAAIC,KAAJ,EAAW;AAChB;AACA,UAAMC,YAAY,GAAG,MAAMnB,QAAQ,CAACoB,IAAT,CAAc,WAAd,EAA2B,EACpD,GAAGT;AADiD,KAA3B,CAA3B;AAGA,UAAM;AAAEK,MAAAA,QAAQ,EAAEK;AAAZ,QAAqCF,YAA3C,CALgB,CAMhB;;AACA,QAAIE,oBAAJ,EACE,OAAOA,oBAAP,CADF,KAEK;AACH;AACA,YAAMnB,cAAc,CAClB,yDADkB,CAApB;AAGD;AACF,GAfM,MAeA;AACL;AACA;AACA,UAAMA,cAAc,CAAC,4CAAD,CAApB;AACD;AACF,CAhCD","sourcesContent":["const npmFetch = require('npm-registry-fetch')\n\nconst needsAuthError = (msg) =>\n  Object.assign(new Error(msg), { code: 'ENEEDAUTH' })\n\nmodule.exports = async (npm, opts = {}) => {\n  const { registry } = opts\n  if (!registry)\n    throw Object.assign(new Error('No registry specified.'), { code: 'ENOREGISTRY' })\n\n  // First, check if we have a user/pass-based auth\n  const creds = npm.config.getCredentialsByURI(registry)\n  const { username: usernameFromURI, token } = creds\n\n  if (usernameFromURI) {\n    // Found username; return it\n    return usernameFromURI\n  } else if (token) {\n    // No username, but we have a token; fetch the username from registry\n    const registryData = await npmFetch.json('/-/whoami', {\n      ...opts,\n    })\n    const { username: usernameFromRegistry } = registryData\n    // Retrieved username from registry; return it\n    if (usernameFromRegistry)\n      return usernameFromRegistry\n    else {\n      // Didn't get username from registry; bad token\n      throw needsAuthError(\n        'Your auth token is no longer valid. Please login again.'\n      )\n    }\n  } else {\n    // At this point, if they have a credentials object, it doesn't have a\n    // token or auth in it. Probably just the default registry.\n    throw needsAuthError('This command requires you to be logged in.')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}