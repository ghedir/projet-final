{"ast":null,"code":"const chalk = require('chalk');\n\nconst nocolor = {\n  bold: s => s,\n  dim: s => s,\n  red: s => s,\n  yellow: s => s,\n  cyan: s => s,\n  magenta: s => s,\n  blue: s => s,\n  green: s => s\n};\n\nconst {\n  relative\n} = require('path');\n\nconst explainNode = (node, depth, color) => printNode(node, color) + explainDependents(node, depth, color) + explainLinksIn(node, depth, color);\n\nconst colorType = (type, color) => {\n  const {\n    red,\n    yellow,\n    cyan,\n    magenta,\n    blue,\n    green\n  } = color ? chalk : nocolor;\n  const style = type === 'extraneous' ? red : type === 'dev' ? yellow : type === 'optional' ? cyan : type === 'peer' ? magenta : type === 'bundled' ? blue : type === 'workspace' ? green :\n  /* istanbul ignore next */\n  s => s;\n  return style(type);\n};\n\nconst printNode = (node, color) => {\n  const {\n    name,\n    version,\n    location,\n    extraneous,\n    dev,\n    optional,\n    peer,\n    bundled,\n    isWorkspace\n  } = node;\n  const {\n    bold,\n    dim,\n    green\n  } = color ? chalk : nocolor;\n  const extra = [];\n  if (extraneous) extra.push(' ' + bold(colorType('extraneous', color)));\n  if (dev) extra.push(' ' + bold(colorType('dev', color)));\n  if (optional) extra.push(' ' + bold(colorType('optional', color)));\n  if (peer) extra.push(' ' + bold(colorType('peer', color)));\n  if (bundled) extra.push(' ' + bold(colorType('bundled', color)));\n  const pkgid = isWorkspace ? green(`${name}@${version}`) : `${bold(name)}@${bold(version)}`;\n  return `${pkgid}${extra.join('')}` + (location ? dim(`\\n${location}`) : '');\n};\n\nconst explainLinksIn = ({\n  linksIn\n}, depth, color) => {\n  if (!linksIn || !linksIn.length || depth <= 0) return '';\n  const messages = linksIn.map(link => explainNode(link, depth - 1, color));\n  const str = '\\n' + messages.join('\\n');\n  return str.split('\\n').join('\\n  ');\n};\n\nconst explainDependents = ({\n  name,\n  dependents\n}, depth, color) => {\n  if (!dependents || !dependents.length || depth <= 0) return '';\n  const max = Math.ceil(depth / 2);\n  const messages = dependents.slice(0, max).map(edge => explainEdge(edge, depth, color)); // show just the names of the first 5 deps that overflowed the list\n\n  if (dependents.length > max) {\n    let len = 0;\n    const maxLen = 50;\n    const showNames = [];\n\n    for (let i = max; i < dependents.length; i++) {\n      const {\n        from: {\n          name = 'the root project'\n        }\n      } = dependents[i];\n      len += name.length;\n\n      if (len >= maxLen && i < dependents.length - 1) {\n        showNames.push('...');\n        break;\n      }\n\n      showNames.push(name);\n    }\n\n    const show = `(${showNames.join(', ')})`;\n    messages.push(`${dependents.length - max} more ${show}`);\n  }\n\n  const str = '\\n' + messages.join('\\n');\n  return str.split('\\n').join('\\n  ');\n};\n\nconst explainEdge = ({\n  name,\n  type,\n  bundled,\n  from,\n  spec\n}, depth, color) => {\n  const {\n    bold\n  } = color ? chalk : nocolor;\n  const dep = type === 'workspace' ? bold(relative(from.location, spec.slice('file:'.length))) : `${bold(name)}@\"${bold(spec)}\"`;\n  const fromMsg = ` from ${explainFrom(from, depth, color)}`;\n  return (type === 'prod' ? '' : `${colorType(type, color)} `) + (bundled ? `${colorType('bundled', color)} ` : '') + `${dep}${fromMsg}`;\n};\n\nconst explainFrom = (from, depth, color) => {\n  if (!from.name && !from.version) return 'the root project';\n  return printNode(from, color) + explainDependents(from, depth - 1, color) + explainLinksIn(from, depth - 1, color);\n};\n\nmodule.exports = {\n  explainNode,\n  printNode,\n  explainEdge\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/explain-dep.js"],"names":["chalk","require","nocolor","bold","s","dim","red","yellow","cyan","magenta","blue","green","relative","explainNode","node","depth","color","printNode","explainDependents","explainLinksIn","colorType","type","style","name","version","location","extraneous","dev","optional","peer","bundled","isWorkspace","extra","push","pkgid","join","linksIn","length","messages","map","link","str","split","dependents","max","Math","ceil","slice","edge","explainEdge","len","maxLen","showNames","i","from","show","spec","dep","fromMsg","explainFrom","module","exports"],"mappings":"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","sourcesContent":["const chalk = require('chalk')\nconst nocolor = {\n  bold: s => s,\n  dim: s => s,\n  red: s => s,\n  yellow: s => s,\n  cyan: s => s,\n  magenta: s => s,\n  blue: s => s,\n  green: s => s,\n}\n\nconst { relative } = require('path')\n\nconst explainNode = (node, depth, color) =>\n  printNode(node, color) +\n  explainDependents(node, depth, color) +\n  explainLinksIn(node, depth, color)\n\nconst colorType = (type, color) => {\n  const { red, yellow, cyan, magenta, blue, green } = color ? chalk : nocolor\n  const style = type === 'extraneous' ? red\n    : type === 'dev' ? yellow\n    : type === 'optional' ? cyan\n    : type === 'peer' ? magenta\n    : type === 'bundled' ? blue\n    : type === 'workspace' ? green\n    : /* istanbul ignore next */ s => s\n  return style(type)\n}\n\nconst printNode = (node, color) => {\n  const {\n    name,\n    version,\n    location,\n    extraneous,\n    dev,\n    optional,\n    peer,\n    bundled,\n    isWorkspace,\n  } = node\n  const { bold, dim, green } = color ? chalk : nocolor\n  const extra = []\n  if (extraneous)\n    extra.push(' ' + bold(colorType('extraneous', color)))\n\n  if (dev)\n    extra.push(' ' + bold(colorType('dev', color)))\n\n  if (optional)\n    extra.push(' ' + bold(colorType('optional', color)))\n\n  if (peer)\n    extra.push(' ' + bold(colorType('peer', color)))\n\n  if (bundled)\n    extra.push(' ' + bold(colorType('bundled', color)))\n\n  const pkgid = isWorkspace\n    ? green(`${name}@${version}`)\n    : `${bold(name)}@${bold(version)}`\n\n  return `${pkgid}${extra.join('')}` +\n    (location ? dim(`\\n${location}`) : '')\n}\n\nconst explainLinksIn = ({ linksIn }, depth, color) => {\n  if (!linksIn || !linksIn.length || depth <= 0)\n    return ''\n\n  const messages = linksIn.map(link => explainNode(link, depth - 1, color))\n  const str = '\\n' + messages.join('\\n')\n  return str.split('\\n').join('\\n  ')\n}\n\nconst explainDependents = ({ name, dependents }, depth, color) => {\n  if (!dependents || !dependents.length || depth <= 0)\n    return ''\n\n  const max = Math.ceil(depth / 2)\n  const messages = dependents.slice(0, max)\n    .map(edge => explainEdge(edge, depth, color))\n\n  // show just the names of the first 5 deps that overflowed the list\n  if (dependents.length > max) {\n    let len = 0\n    const maxLen = 50\n    const showNames = []\n    for (let i = max; i < dependents.length; i++) {\n      const { from: { name = 'the root project' } } = dependents[i]\n      len += name.length\n      if (len >= maxLen && i < dependents.length - 1) {\n        showNames.push('...')\n        break\n      }\n      showNames.push(name)\n    }\n    const show = `(${showNames.join(', ')})`\n    messages.push(`${dependents.length - max} more ${show}`)\n  }\n\n  const str = '\\n' + messages.join('\\n')\n  return str.split('\\n').join('\\n  ')\n}\n\nconst explainEdge = ({ name, type, bundled, from, spec }, depth, color) => {\n  const { bold } = color ? chalk : nocolor\n  const dep = type === 'workspace'\n    ? bold(relative(from.location, spec.slice('file:'.length)))\n    : `${bold(name)}@\"${bold(spec)}\"`\n  const fromMsg = ` from ${explainFrom(from, depth, color)}`\n\n  return (type === 'prod' ? '' : `${colorType(type, color)} `) +\n    (bundled ? `${colorType('bundled', color)} ` : '') +\n    `${dep}${fromMsg}`\n}\n\nconst explainFrom = (from, depth, color) => {\n  if (!from.name && !from.version)\n    return 'the root project'\n\n  return printNode(from, color) +\n    explainDependents(from, depth - 1, color) +\n    explainLinksIn(from, depth - 1, color)\n}\n\nmodule.exports = { explainNode, printNode, explainEdge }\n"]},"metadata":{},"sourceType":"script"}