{"ast":null,"code":"const git = require('@npmcli/git'); // returns true if it's cool to do git stuff\n// throws if it's unclean, and not forced.\n\n\nmodule.exports = async opts => {\n  const {\n    force,\n    log\n  } = opts;\n  let hadError = false;\n  const clean = await git.isClean(opts).catch(er => {\n    if (er.code === 'ENOGIT') {\n      log.warn('version', 'This is a Git checkout, but the git command was not found.', 'npm could not create a Git tag for this release!');\n      hadError = true; // how can merges be real if our git isn't real?\n\n      return true;\n    } else {\n      throw er;\n    }\n  });\n\n  if (!clean) {\n    if (!force) {\n      throw new Error('Git working directory not clean.');\n    }\n\n    log.warn('version', 'Git working directory not clean, proceeding forcefully.');\n  }\n\n  return !hadError;\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/libnpmversion/lib/enforce-clean.js"],"names":["git","require","module","exports","opts","force","log","hadError","clean","isClean","catch","er","code","warn","Error"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,aAAD,CAAnB,C,CAEA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,IAAN,IAAc;AAC7B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAiBF,IAAvB;AACA,MAAIG,QAAQ,GAAG,KAAf;AACA,QAAMC,KAAK,GAAG,MAAMR,GAAG,CAACS,OAAJ,CAAYL,IAAZ,EAAkBM,KAAlB,CAAwBC,EAAE,IAAI;AAChD,QAAIA,EAAE,CAACC,IAAH,KAAY,QAAhB,EAA0B;AACxBN,MAAAA,GAAG,CAACO,IAAJ,CACE,SADF,EAEE,4DAFF,EAGE,kDAHF;AAKAN,MAAAA,QAAQ,GAAG,IAAX,CANwB,CAOxB;;AACA,aAAO,IAAP;AACD,KATD,MASO;AACL,YAAMI,EAAN;AACD;AACF,GAbmB,CAApB;;AAeA,MAAI,CAACH,KAAL,EAAY;AACV,QAAI,CAACH,KAAL,EAAY;AACV,YAAM,IAAIS,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACDR,IAAAA,GAAG,CAACO,IAAJ,CAAS,SAAT,EAAoB,yDAApB;AACD;;AAED,SAAO,CAACN,QAAR;AACD,CA1BD","sourcesContent":["const git = require('@npmcli/git')\n\n// returns true if it's cool to do git stuff\n// throws if it's unclean, and not forced.\nmodule.exports = async opts => {\n  const { force, log } = opts\n  let hadError = false\n  const clean = await git.isClean(opts).catch(er => {\n    if (er.code === 'ENOGIT') {\n      log.warn(\n        'version',\n        'This is a Git checkout, but the git command was not found.',\n        'npm could not create a Git tag for this release!'\n      )\n      hadError = true\n      // how can merges be real if our git isn't real?\n      return true\n    } else {\n      throw er\n    }\n  })\n\n  if (!clean) {\n    if (!force) {\n      throw new Error('Git working directory not clean.')\n    }\n    log.warn('version', 'Git working directory not clean, proceeding forcefully.')\n  }\n\n  return !hadError\n}\n"]},"metadata":{},"sourceType":"script"}