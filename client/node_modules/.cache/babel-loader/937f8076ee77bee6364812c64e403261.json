{"ast":null,"code":"const log = require('npmlog');\n\nconst getAuth = require('npm-registry-fetch/auth.js');\n\nconst npmFetch = require('npm-registry-fetch');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Logout extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Log out of the registry';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'logout';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['registry', 'scope'];\n  }\n\n  exec(args, cb) {\n    this.logout(args).then(() => cb()).catch(cb);\n  }\n\n  async logout(args) {\n    const registry = this.npm.config.get('registry');\n    const scope = this.npm.config.get('scope');\n    const regRef = scope ? `${scope}:registry` : 'registry';\n    const reg = this.npm.config.get(regRef) || registry;\n    const auth = getAuth(reg, this.npm.flatOptions);\n\n    if (auth.token) {\n      log.verbose('logout', `clearing token for ${reg}`);\n      await npmFetch(`/-/user/token/${encodeURIComponent(auth.token)}`, { ...this.npm.flatOptions,\n        method: 'DELETE',\n        ignoreBody: true\n      });\n    } else if (auth.isBasicAuth) log.verbose('logout', `clearing user credentials for ${reg}`);else {\n      const msg = `not logged in to ${reg}, so can't log out!`;\n      throw Object.assign(new Error(msg), {\n        code: 'ENEEDAUTH'\n      });\n    }\n\n    if (scope) this.npm.config.delete(regRef, 'user');\n    this.npm.config.clearCredentialsByURI(reg);\n    await this.npm.config.save('user');\n  }\n\n}\n\nmodule.exports = Logout;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/logout.js"],"names":["log","require","getAuth","npmFetch","BaseCommand","Logout","description","name","params","exec","args","cb","logout","then","catch","registry","npm","config","get","scope","regRef","reg","auth","flatOptions","token","verbose","encodeURIComponent","method","ignoreBody","isBasicAuth","msg","Object","assign","Error","code","delete","clearCredentialsByURI","save","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,4BAAD,CAAvB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,mBAAD,CAA3B;;AAEA,MAAMI,MAAN,SAAqBD,WAArB,CAAiC;AAC/B;AACsB,aAAXE,WAAW,GAAI;AACxB,WAAO,yBAAP;AACD;AAED;;;AACe,aAAJC,IAAI,GAAI;AACjB,WAAO,QAAP;AACD;AAED;;;AACiB,aAANC,MAAM,GAAI;AACnB,WAAO,CACL,UADK,EAEL,OAFK,CAAP;AAID;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,MAAL,CAAYF,IAAZ,EAAkBG,IAAlB,CAAuB,MAAMF,EAAE,EAA/B,EAAmCG,KAAnC,CAAyCH,EAAzC;AACD;;AAEW,QAANC,MAAM,CAAEF,IAAF,EAAQ;AAClB,UAAMK,QAAQ,GAAG,KAAKC,GAAL,CAASC,MAAT,CAAgBC,GAAhB,CAAoB,UAApB,CAAjB;AACA,UAAMC,KAAK,GAAG,KAAKH,GAAL,CAASC,MAAT,CAAgBC,GAAhB,CAAoB,OAApB,CAAd;AACA,UAAME,MAAM,GAAGD,KAAK,GAAI,GAAEA,KAAM,WAAZ,GAAyB,UAA7C;AACA,UAAME,GAAG,GAAG,KAAKL,GAAL,CAASC,MAAT,CAAgBC,GAAhB,CAAoBE,MAApB,KAA+BL,QAA3C;AAEA,UAAMO,IAAI,GAAGpB,OAAO,CAACmB,GAAD,EAAM,KAAKL,GAAL,CAASO,WAAf,CAApB;;AAEA,QAAID,IAAI,CAACE,KAAT,EAAgB;AACdxB,MAAAA,GAAG,CAACyB,OAAJ,CAAY,QAAZ,EAAuB,sBAAqBJ,GAAI,EAAhD;AACA,YAAMlB,QAAQ,CAAE,iBAAgBuB,kBAAkB,CAACJ,IAAI,CAACE,KAAN,CAAa,EAAjD,EAAoD,EAChE,GAAG,KAAKR,GAAL,CAASO,WADoD;AAEhEI,QAAAA,MAAM,EAAE,QAFwD;AAGhEC,QAAAA,UAAU,EAAE;AAHoD,OAApD,CAAd;AAKD,KAPD,MAOO,IAAIN,IAAI,CAACO,WAAT,EACL7B,GAAG,CAACyB,OAAJ,CAAY,QAAZ,EAAuB,iCAAgCJ,GAAI,EAA3D,EADK,KAEF;AACH,YAAMS,GAAG,GAAI,oBAAmBT,GAAI,qBAApC;AACA,YAAMU,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAUH,GAAV,CAAd,EAA8B;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAA9B,CAAN;AACD;;AAED,QAAIf,KAAJ,EACE,KAAKH,GAAL,CAASC,MAAT,CAAgBkB,MAAhB,CAAuBf,MAAvB,EAA+B,MAA/B;AAEF,SAAKJ,GAAL,CAASC,MAAT,CAAgBmB,qBAAhB,CAAsCf,GAAtC;AAEA,UAAM,KAAKL,GAAL,CAASC,MAAT,CAAgBoB,IAAhB,CAAqB,MAArB,CAAN;AACD;;AAnD8B;;AAqDjCC,MAAM,CAACC,OAAP,GAAiBlC,MAAjB","sourcesContent":["const log = require('npmlog')\nconst getAuth = require('npm-registry-fetch/auth.js')\nconst npmFetch = require('npm-registry-fetch')\nconst BaseCommand = require('./base-command.js')\n\nclass Logout extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Log out of the registry'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'logout'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'registry',\n      'scope',\n    ]\n  }\n\n  exec (args, cb) {\n    this.logout(args).then(() => cb()).catch(cb)\n  }\n\n  async logout (args) {\n    const registry = this.npm.config.get('registry')\n    const scope = this.npm.config.get('scope')\n    const regRef = scope ? `${scope}:registry` : 'registry'\n    const reg = this.npm.config.get(regRef) || registry\n\n    const auth = getAuth(reg, this.npm.flatOptions)\n\n    if (auth.token) {\n      log.verbose('logout', `clearing token for ${reg}`)\n      await npmFetch(`/-/user/token/${encodeURIComponent(auth.token)}`, {\n        ...this.npm.flatOptions,\n        method: 'DELETE',\n        ignoreBody: true,\n      })\n    } else if (auth.isBasicAuth)\n      log.verbose('logout', `clearing user credentials for ${reg}`)\n    else {\n      const msg = `not logged in to ${reg}, so can't log out!`\n      throw Object.assign(new Error(msg), { code: 'ENEEDAUTH' })\n    }\n\n    if (scope)\n      this.npm.config.delete(regRef, 'user')\n\n    this.npm.config.clearCredentialsByURI(reg)\n\n    await this.npm.config.save('user')\n  }\n}\nmodule.exports = Logout\n"]},"metadata":{},"sourceType":"script"}