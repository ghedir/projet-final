{"ast":null,"code":"const {\n  resolve\n} = require('path');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst localeCompare = require('@isaacs/string-locale-compare')('en');\n\nconst installedDeep = async npm => {\n  const {\n    depth,\n    global,\n    prefix\n  } = npm.flatOptions;\n\n  const getValues = tree => [...tree.inventory.values()].filter(i => i.location !== '' && !i.isRoot).map(i => {\n    return i;\n  }).filter(i => i.depth - 1 <= depth).sort((a, b) => a.depth - b.depth || localeCompare(a.name, b.name));\n\n  const res = new Set();\n  const gArb = new Arborist({\n    global: true,\n    path: resolve(npm.globalDir, '..')\n  });\n  const gTree = await gArb.loadActual({\n    global: true\n  });\n\n  for (const node of getValues(gTree)) res.add(global ? node.name : [node.name, '-g']);\n\n  if (!global) {\n    const arb = new Arborist({\n      global: false,\n      path: prefix\n    });\n    const tree = await arb.loadActual();\n\n    for (const node of getValues(tree)) res.add(node.name);\n  }\n\n  return [...res];\n};\n\nmodule.exports = installedDeep;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/completion/installed-deep.js"],"names":["resolve","require","Arborist","localeCompare","installedDeep","npm","depth","global","prefix","flatOptions","getValues","tree","inventory","values","filter","i","location","isRoot","map","sort","a","b","name","res","Set","gArb","path","globalDir","gTree","loadActual","node","add","arb","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAC,MAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,+BAAD,CAAP,CAAyC,IAAzC,CAAtB;;AAEA,MAAMG,aAAa,GAAG,MAAOC,GAAP,IAAe;AACnC,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA;AAHI,MAIFH,GAAG,CAACI,WAJR;;AAMA,QAAMC,SAAS,GAAIC,IAAD,IAChB,CAAC,GAAGA,IAAI,CAACC,SAAL,CAAeC,MAAf,EAAJ,EACGC,MADH,CACUC,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAe,EAAf,IAAqB,CAACD,CAAC,CAACE,MADvC,EAEGC,GAFH,CAEOH,CAAC,IAAI;AACR,WAAOA,CAAP;AACD,GAJH,EAKGD,MALH,CAKUC,CAAC,IAAKA,CAAC,CAACT,KAAF,GAAU,CAAX,IAAiBA,KALhC,EAMGa,IANH,CAMQ,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACd,KAAF,GAAUe,CAAC,CAACf,KAAb,IAAuBH,aAAa,CAACiB,CAAC,CAACE,IAAH,EAASD,CAAC,CAACC,IAAX,CANtD,CADF;;AASA,QAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AACA,QAAMC,IAAI,GAAG,IAAIvB,QAAJ,CAAa;AAAEK,IAAAA,MAAM,EAAE,IAAV;AAAgBmB,IAAAA,IAAI,EAAE1B,OAAO,CAACK,GAAG,CAACsB,SAAL,EAAgB,IAAhB;AAA7B,GAAb,CAAb;AACA,QAAMC,KAAK,GAAG,MAAMH,IAAI,CAACI,UAAL,CAAgB;AAAEtB,IAAAA,MAAM,EAAE;AAAV,GAAhB,CAApB;;AAEA,OAAK,MAAMuB,IAAX,IAAmBpB,SAAS,CAACkB,KAAD,CAA5B,EACEL,GAAG,CAACQ,GAAJ,CAAQxB,MAAM,GAAGuB,IAAI,CAACR,IAAR,GAAe,CAACQ,IAAI,CAACR,IAAN,EAAY,IAAZ,CAA7B;;AAEF,MAAI,CAACf,MAAL,EAAa;AACX,UAAMyB,GAAG,GAAG,IAAI9B,QAAJ,CAAa;AAAEK,MAAAA,MAAM,EAAE,KAAV;AAAiBmB,MAAAA,IAAI,EAAElB;AAAvB,KAAb,CAAZ;AACA,UAAMG,IAAI,GAAG,MAAMqB,GAAG,CAACH,UAAJ,EAAnB;;AACA,SAAK,MAAMC,IAAX,IAAmBpB,SAAS,CAACC,IAAD,CAA5B,EACEY,GAAG,CAACQ,GAAJ,CAAQD,IAAI,CAACR,IAAb;AACH;;AAED,SAAO,CAAC,GAAGC,GAAJ,CAAP;AACD,CA/BD;;AAiCAU,MAAM,CAACC,OAAP,GAAiB9B,aAAjB","sourcesContent":["const { resolve } = require('path')\nconst Arborist = require('@npmcli/arborist')\nconst localeCompare = require('@isaacs/string-locale-compare')('en')\n\nconst installedDeep = async (npm) => {\n  const {\n    depth,\n    global,\n    prefix,\n  } = npm.flatOptions\n\n  const getValues = (tree) =>\n    [...tree.inventory.values()]\n      .filter(i => i.location !== '' && !i.isRoot)\n      .map(i => {\n        return i\n      })\n      .filter(i => (i.depth - 1) <= depth)\n      .sort((a, b) => (a.depth - b.depth) || localeCompare(a.name, b.name))\n\n  const res = new Set()\n  const gArb = new Arborist({ global: true, path: resolve(npm.globalDir, '..') })\n  const gTree = await gArb.loadActual({ global: true })\n\n  for (const node of getValues(gTree))\n    res.add(global ? node.name : [node.name, '-g'])\n\n  if (!global) {\n    const arb = new Arborist({ global: false, path: prefix })\n    const tree = await arb.loadActual()\n    for (const node of getValues(tree))\n      res.add(node.name)\n  }\n\n  return [...res]\n}\n\nmodule.exports = installedDeep\n"]},"metadata":{},"sourceType":"script"}