{"ast":null,"code":"'use strict';\n\nconst {\n  HttpErrorAuthOTP\n} = require('./errors.js');\n\nconst checkResponse = require('./check-response.js');\n\nconst getAuth = require('./auth.js');\n\nconst fetch = require('make-fetch-happen');\n\nconst JSONStream = require('minipass-json-stream');\n\nconst npa = require('npm-package-arg');\n\nconst qs = require('querystring');\n\nconst url = require('url');\n\nconst zlib = require('minizlib');\n\nconst Minipass = require('minipass');\n\nconst defaultOpts = require('./default-opts.js'); // WhatWG URL throws if it's not fully resolved\n\n\nconst urlIsValid = u => {\n  try {\n    return !!new url.URL(u);\n  } catch (_) {\n    return false;\n  }\n};\n\nmodule.exports = regFetch;\n\nfunction regFetch(uri,\n/* istanbul ignore next */\nopts_ = {}) {\n  const opts = { ...defaultOpts,\n    ...opts_\n  }; // if we did not get a fully qualified URI, then we look at the registry\n  // config or relevant scope to resolve it.\n\n  const uriValid = urlIsValid(uri);\n  let registry = opts.registry || defaultOpts.registry;\n\n  if (!uriValid) {\n    registry = opts.registry = opts.spec && pickRegistry(opts.spec, opts) || opts.registry || registry;\n    uri = `${registry.trim().replace(/\\/?$/g, '')}/${uri.trim().replace(/^\\//, '')}`; // asserts that this is now valid\n\n    new url.URL(uri);\n  }\n\n  const method = opts.method || 'GET'; // through that takes into account the scope, the prefix of `uri`, etc\n\n  const startTime = Date.now();\n  const auth = getAuth(uri, opts);\n  const headers = getHeaders(uri, auth, opts);\n  let body = opts.body;\n  const bodyIsStream = Minipass.isStream(body);\n  const bodyIsPromise = body && typeof body === 'object' && typeof body.then === 'function';\n\n  if (body && !bodyIsStream && !bodyIsPromise && typeof body !== 'string' && !Buffer.isBuffer(body)) {\n    headers['content-type'] = headers['content-type'] || 'application/json';\n    body = JSON.stringify(body);\n  } else if (body && !headers['content-type']) headers['content-type'] = 'application/octet-stream';\n\n  if (opts.gzip) {\n    headers['content-encoding'] = 'gzip';\n\n    if (bodyIsStream) {\n      const gz = new zlib.Gzip();\n      body.on('error',\n      /* istanbul ignore next: unlikely and hard to test */\n      err => gz.emit('error', err));\n      body = body.pipe(gz);\n    } else if (!bodyIsPromise) body = new zlib.Gzip().end(body).concat();\n  }\n\n  const parsed = new url.URL(uri);\n\n  if (opts.query) {\n    const q = typeof opts.query === 'string' ? qs.parse(opts.query) : opts.query;\n    Object.keys(q).forEach(key => {\n      if (q[key] !== undefined) parsed.searchParams.set(key, q[key]);\n    });\n    uri = url.format(parsed);\n  }\n\n  if (parsed.searchParams.get('write') === 'true' && method === 'GET') {\n    // do not cache, because this GET is fetching a rev that will be\n    // used for a subsequent PUT or DELETE, so we need to conditionally\n    // update cache.\n    opts.offline = false;\n    opts.preferOffline = false;\n    opts.preferOnline = true;\n  }\n\n  const doFetch = async body => {\n    const p = fetch(uri, {\n      agent: opts.agent,\n      algorithms: opts.algorithms,\n      body,\n      cache: getCacheMode(opts),\n      cacheManager: opts.cache,\n      ca: opts.ca,\n      cert: opts.cert,\n      headers,\n      integrity: opts.integrity,\n      key: opts.key,\n      localAddress: opts.localAddress,\n      maxSockets: opts.maxSockets,\n      memoize: opts.memoize,\n      method: method,\n      noProxy: opts.noProxy,\n      proxy: opts.httpsProxy || opts.proxy,\n      retry: opts.retry ? opts.retry : {\n        retries: opts.fetchRetries,\n        factor: opts.fetchRetryFactor,\n        minTimeout: opts.fetchRetryMintimeout,\n        maxTimeout: opts.fetchRetryMaxtimeout\n      },\n      strictSSL: opts.strictSSL,\n      timeout: opts.timeout || 30 * 1000\n    }).then(res => checkResponse({\n      method,\n      uri,\n      res,\n      registry,\n      startTime,\n      auth,\n      opts\n    }));\n\n    if (typeof opts.otpPrompt === 'function') {\n      return p.catch(async er => {\n        if (er instanceof HttpErrorAuthOTP) {\n          // if otp fails to complete, we fail with that failure\n          const otp = await opts.otpPrompt(); // if no otp provided, throw the original HTTP error\n\n          if (!otp) throw er;\n          return regFetch(uri, { ...opts,\n            otp\n          });\n        }\n\n        throw er;\n      });\n    } else return p;\n  };\n\n  return Promise.resolve(body).then(doFetch);\n}\n\nmodule.exports.json = fetchJSON;\n\nfunction fetchJSON(uri, opts) {\n  return regFetch(uri, opts).then(res => res.json());\n}\n\nmodule.exports.json.stream = fetchJSONStream;\n\nfunction fetchJSONStream(uri, jsonPath,\n/* istanbul ignore next */\nopts_ = {}) {\n  const opts = { ...defaultOpts,\n    ...opts_\n  };\n  const parser = JSONStream.parse(jsonPath, opts.mapJSON);\n  regFetch(uri, opts).then(res => res.body.on('error',\n  /* istanbul ignore next: unlikely and difficult to test */\n  er => parser.emit('error', er)).pipe(parser)).catch(er => parser.emit('error', er));\n  return parser;\n}\n\nmodule.exports.pickRegistry = pickRegistry;\n\nfunction pickRegistry(spec, opts = {}) {\n  spec = npa(spec);\n  let registry = spec.scope && opts[spec.scope.replace(/^@?/, '@') + ':registry'];\n  if (!registry && opts.scope) registry = opts[opts.scope.replace(/^@?/, '@') + ':registry'];\n  if (!registry) registry = opts.registry || defaultOpts.registry;\n  return registry;\n}\n\nfunction getCacheMode(opts) {\n  return opts.offline ? 'only-if-cached' : opts.preferOffline ? 'force-cache' : opts.preferOnline ? 'no-cache' : 'default';\n}\n\nfunction getHeaders(uri, auth, opts) {\n  const headers = Object.assign({\n    'user-agent': opts.userAgent\n  }, opts.headers || {});\n  if (opts.projectScope) headers['npm-scope'] = opts.projectScope;\n  if (opts.npmSession) headers['npm-session'] = opts.npmSession;\n  if (opts.npmCommand) headers['npm-command'] = opts.npmCommand; // If a tarball is hosted on a different place than the manifest, only send\n  // credentials on `alwaysAuth`\n\n  if (auth.token) headers.authorization = `Bearer ${auth.token}`;else if (auth.auth) headers.authorization = `Basic ${auth.auth}`;\n  if (opts.otp) headers['npm-otp'] = opts.otp;\n  return headers;\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/npm-registry-fetch/index.js"],"names":["HttpErrorAuthOTP","require","checkResponse","getAuth","fetch","JSONStream","npa","qs","url","zlib","Minipass","defaultOpts","urlIsValid","u","URL","_","module","exports","regFetch","uri","opts_","opts","uriValid","registry","spec","pickRegistry","trim","replace","method","startTime","Date","now","auth","headers","getHeaders","body","bodyIsStream","isStream","bodyIsPromise","then","Buffer","isBuffer","JSON","stringify","gzip","gz","Gzip","on","err","emit","pipe","end","concat","parsed","query","q","parse","Object","keys","forEach","key","undefined","searchParams","set","format","get","offline","preferOffline","preferOnline","doFetch","p","agent","algorithms","cache","getCacheMode","cacheManager","ca","cert","integrity","localAddress","maxSockets","memoize","noProxy","proxy","httpsProxy","retry","retries","fetchRetries","factor","fetchRetryFactor","minTimeout","fetchRetryMintimeout","maxTimeout","fetchRetryMaxtimeout","strictSSL","timeout","res","otpPrompt","catch","er","otp","Promise","resolve","json","fetchJSON","stream","fetchJSONStream","jsonPath","parser","mapJSON","scope","assign","userAgent","projectScope","npmSession","npmCommand","token","authorization"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { HttpErrorAuthOTP } = require('./errors.js')\nconst checkResponse = require('./check-response.js')\nconst getAuth = require('./auth.js')\nconst fetch = require('make-fetch-happen')\nconst JSONStream = require('minipass-json-stream')\nconst npa = require('npm-package-arg')\nconst qs = require('querystring')\nconst url = require('url')\nconst zlib = require('minizlib')\nconst Minipass = require('minipass')\n\nconst defaultOpts = require('./default-opts.js')\n\n// WhatWG URL throws if it's not fully resolved\nconst urlIsValid = u => {\n  try {\n    return !!new url.URL(u)\n  } catch (_) {\n    return false\n  }\n}\n\nmodule.exports = regFetch\nfunction regFetch (uri, /* istanbul ignore next */ opts_ = {}) {\n  const opts = {\n    ...defaultOpts,\n    ...opts_,\n  }\n\n  // if we did not get a fully qualified URI, then we look at the registry\n  // config or relevant scope to resolve it.\n  const uriValid = urlIsValid(uri)\n  let registry = opts.registry || defaultOpts.registry\n  if (!uriValid) {\n    registry = opts.registry = (\n      (opts.spec && pickRegistry(opts.spec, opts)) ||\n      opts.registry ||\n      registry\n    )\n    uri = `${\n      registry.trim().replace(/\\/?$/g, '')\n    }/${\n      uri.trim().replace(/^\\//, '')\n    }`\n    // asserts that this is now valid\n    new url.URL(uri)\n  }\n\n  const method = opts.method || 'GET'\n\n  // through that takes into account the scope, the prefix of `uri`, etc\n  const startTime = Date.now()\n  const auth = getAuth(uri, opts)\n  const headers = getHeaders(uri, auth, opts)\n  let body = opts.body\n  const bodyIsStream = Minipass.isStream(body)\n  const bodyIsPromise = body &&\n    typeof body === 'object' &&\n    typeof body.then === 'function'\n\n  if (body && !bodyIsStream && !bodyIsPromise && typeof body !== 'string' && !Buffer.isBuffer(body)) {\n    headers['content-type'] = headers['content-type'] || 'application/json'\n    body = JSON.stringify(body)\n  } else if (body && !headers['content-type'])\n    headers['content-type'] = 'application/octet-stream'\n\n  if (opts.gzip) {\n    headers['content-encoding'] = 'gzip'\n    if (bodyIsStream) {\n      const gz = new zlib.Gzip()\n      body.on('error', /* istanbul ignore next: unlikely and hard to test */\n        err => gz.emit('error', err))\n      body = body.pipe(gz)\n    } else if (!bodyIsPromise)\n      body = new zlib.Gzip().end(body).concat()\n  }\n\n  const parsed = new url.URL(uri)\n\n  if (opts.query) {\n    const q = typeof opts.query === 'string' ? qs.parse(opts.query)\n      : opts.query\n\n    Object.keys(q).forEach(key => {\n      if (q[key] !== undefined)\n        parsed.searchParams.set(key, q[key])\n    })\n    uri = url.format(parsed)\n  }\n\n  if (parsed.searchParams.get('write') === 'true' && method === 'GET') {\n    // do not cache, because this GET is fetching a rev that will be\n    // used for a subsequent PUT or DELETE, so we need to conditionally\n    // update cache.\n    opts.offline = false\n    opts.preferOffline = false\n    opts.preferOnline = true\n  }\n\n  const doFetch = async body => {\n    const p = fetch(uri, {\n      agent: opts.agent,\n      algorithms: opts.algorithms,\n      body,\n      cache: getCacheMode(opts),\n      cacheManager: opts.cache,\n      ca: opts.ca,\n      cert: opts.cert,\n      headers,\n      integrity: opts.integrity,\n      key: opts.key,\n      localAddress: opts.localAddress,\n      maxSockets: opts.maxSockets,\n      memoize: opts.memoize,\n      method: method,\n      noProxy: opts.noProxy,\n      proxy: opts.httpsProxy || opts.proxy,\n      retry: opts.retry ? opts.retry : {\n        retries: opts.fetchRetries,\n        factor: opts.fetchRetryFactor,\n        minTimeout: opts.fetchRetryMintimeout,\n        maxTimeout: opts.fetchRetryMaxtimeout,\n      },\n      strictSSL: opts.strictSSL,\n      timeout: opts.timeout || 30 * 1000,\n    }).then(res => checkResponse({\n      method,\n      uri,\n      res,\n      registry,\n      startTime,\n      auth,\n      opts,\n    }))\n\n    if (typeof opts.otpPrompt === 'function') {\n      return p.catch(async er => {\n        if (er instanceof HttpErrorAuthOTP) {\n          // if otp fails to complete, we fail with that failure\n          const otp = await opts.otpPrompt()\n          // if no otp provided, throw the original HTTP error\n          if (!otp)\n            throw er\n          return regFetch(uri, { ...opts, otp })\n        }\n        throw er\n      })\n    } else\n      return p\n  }\n\n  return Promise.resolve(body).then(doFetch)\n}\n\nmodule.exports.json = fetchJSON\nfunction fetchJSON (uri, opts) {\n  return regFetch(uri, opts).then(res => res.json())\n}\n\nmodule.exports.json.stream = fetchJSONStream\nfunction fetchJSONStream (uri, jsonPath,\n  /* istanbul ignore next */ opts_ = {}) {\n  const opts = { ...defaultOpts, ...opts_ }\n  const parser = JSONStream.parse(jsonPath, opts.mapJSON)\n  regFetch(uri, opts).then(res =>\n    res.body.on('error',\n      /* istanbul ignore next: unlikely and difficult to test */\n      er => parser.emit('error', er)).pipe(parser)\n  ).catch(er => parser.emit('error', er))\n  return parser\n}\n\nmodule.exports.pickRegistry = pickRegistry\nfunction pickRegistry (spec, opts = {}) {\n  spec = npa(spec)\n  let registry = spec.scope &&\n    opts[spec.scope.replace(/^@?/, '@') + ':registry']\n\n  if (!registry && opts.scope)\n    registry = opts[opts.scope.replace(/^@?/, '@') + ':registry']\n\n  if (!registry)\n    registry = opts.registry || defaultOpts.registry\n\n  return registry\n}\n\nfunction getCacheMode (opts) {\n  return opts.offline ? 'only-if-cached'\n    : opts.preferOffline ? 'force-cache'\n    : opts.preferOnline ? 'no-cache'\n    : 'default'\n}\n\nfunction getHeaders (uri, auth, opts) {\n  const headers = Object.assign({\n    'user-agent': opts.userAgent,\n  }, opts.headers || {})\n\n  if (opts.projectScope)\n    headers['npm-scope'] = opts.projectScope\n\n  if (opts.npmSession)\n    headers['npm-session'] = opts.npmSession\n\n  if (opts.npmCommand)\n    headers['npm-command'] = opts.npmCommand\n\n  // If a tarball is hosted on a different place than the manifest, only send\n  // credentials on `alwaysAuth`\n  if (auth.token)\n    headers.authorization = `Bearer ${auth.token}`\n  else if (auth.auth)\n    headers.authorization = `Basic ${auth.auth}`\n\n  if (opts.otp)\n    headers['npm-otp'] = opts.otp\n\n  return headers\n}\n"]},"metadata":{},"sourceType":"script"}