{"ast":null,"code":"module.exports = {\n  diff: diff,\n  jsonPatchPathConverter: jsonPatchPathConverter\n};\n/*\n  const obj1 = {a: 4, b: 5};\n  const obj2 = {a: 3, b: 5};\n  const obj3 = {a: 4, c: 5};\n\n  diff(obj1, obj2);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n  ]\n\n  diff(obj2, obj3);\n  [\n    { \"op\": \"remove\", \"path\": ['b'] },\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n  ]\n\n  // using converter to generate jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  diff(obj1, obj2, jsonPatchPathConverter);\n  [\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 3 }\n  ]\n\n  diff(obj2, obj3, jsonPatchPathConverter);\n  [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ]\n\n  // arrays\n  const obj4 = {a: 4, b: [1, 2, 3]};\n  const obj5 = {a: 3, b: [1, 2, 4]};\n  const obj6 = {a: 3, b: [1, 2, 4, 5]};\n\n  diff(obj4, obj5);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n  ]\n\n  diff(obj5, obj6);\n  [\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 5 }\n  ]\n\n  // nested paths\n  const obj7 = {a: 4, b: {c: 3}};\n  const obj8 = {a: 4, b: {c: 4}};\n  const obj9 = {a: 5, b: {d: 4}};\n\n  diff(obj7, obj8);\n  [\n    { \"op\": \"replace\", \"path\": ['b', 'c'], \"value\": 4 }\n  ]\n\n  diff(obj8, obj9);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]\n*/\n\nfunction diff(obj1, obj2, pathConverter) {\n  if (!obj1 || typeof obj1 != 'object' || !obj2 || typeof obj2 != 'object') {\n    throw new Error('both arguments must be objects or arrays');\n  }\n\n  pathConverter || (pathConverter = function (arr) {\n    return arr;\n  });\n\n  function getDiff(obj1, obj2, basePath, diffs) {\n    var obj1Keys = Object.keys(obj1);\n    var obj1KeysLength = obj1Keys.length;\n    var obj2Keys = Object.keys(obj2);\n    var obj2KeysLength = obj2Keys.length;\n    var path;\n\n    for (var i = 0; i < obj1KeysLength; i++) {\n      var key = Array.isArray(obj1) ? Number(obj1Keys[i]) : obj1Keys[i];\n\n      if (!(key in obj2)) {\n        path = basePath.concat(key);\n        diffs.remove.push({\n          op: 'remove',\n          path: pathConverter(path)\n        });\n      }\n    }\n\n    for (var i = 0; i < obj2KeysLength; i++) {\n      var key = Array.isArray(obj2) ? Number(obj2Keys[i]) : obj2Keys[i];\n      var obj1AtKey = obj1[key];\n      var obj2AtKey = obj2[key];\n\n      if (!(key in obj1)) {\n        path = basePath.concat(key);\n        var obj2Value = obj2[key];\n        diffs.add.push({\n          op: 'add',\n          path: pathConverter(path),\n          value: obj2Value\n        });\n      } else if (obj1AtKey !== obj2AtKey) {\n        if (Object(obj1AtKey) !== obj1AtKey || Object(obj2AtKey) !== obj2AtKey) {\n          path = pushReplace(path, basePath, key, diffs, pathConverter, obj2);\n        } else {\n          if (!Object.keys(obj1AtKey).length && !Object.keys(obj2AtKey).length && String(obj1AtKey) != String(obj2AtKey)) {\n            path = pushReplace(path, basePath, key, diffs, pathConverter, obj2);\n          } else {\n            getDiff(obj1[key], obj2[key], basePath.concat(key), diffs);\n          }\n        }\n      }\n    }\n\n    return diffs.remove.reverse().concat(diffs.replace).concat(diffs.add);\n  }\n\n  return getDiff(obj1, obj2, [], {\n    remove: [],\n    replace: [],\n    add: []\n  });\n}\n\nfunction pushReplace(path, basePath, key, diffs, pathConverter, obj2) {\n  path = basePath.concat(key);\n  diffs.replace.push({\n    op: 'replace',\n    path: pathConverter(path),\n    value: obj2[key]\n  });\n  return path;\n}\n\nfunction jsonPatchPathConverter(arrayPath) {\n  return [''].concat(arrayPath).join('/');\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/just-diff/index.js"],"names":["module","exports","diff","jsonPatchPathConverter","obj1","obj2","pathConverter","Error","arr","getDiff","basePath","diffs","obj1Keys","Object","keys","obj1KeysLength","length","obj2Keys","obj2KeysLength","path","i","key","Array","isArray","Number","concat","remove","push","op","obj1AtKey","obj2AtKey","obj2Value","add","value","pushReplace","String","reverse","replace","arrayPath","join"],"mappings":"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","sourcesContent":["module.exports = {\n  diff: diff,\n  jsonPatchPathConverter: jsonPatchPathConverter,\n};\n\n/*\n  const obj1 = {a: 4, b: 5};\n  const obj2 = {a: 3, b: 5};\n  const obj3 = {a: 4, c: 5};\n\n  diff(obj1, obj2);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n  ]\n\n  diff(obj2, obj3);\n  [\n    { \"op\": \"remove\", \"path\": ['b'] },\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n  ]\n\n  // using converter to generate jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  diff(obj1, obj2, jsonPatchPathConverter);\n  [\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 3 }\n  ]\n\n  diff(obj2, obj3, jsonPatchPathConverter);\n  [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ]\n\n  // arrays\n  const obj4 = {a: 4, b: [1, 2, 3]};\n  const obj5 = {a: 3, b: [1, 2, 4]};\n  const obj6 = {a: 3, b: [1, 2, 4, 5]};\n\n  diff(obj4, obj5);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n  ]\n\n  diff(obj5, obj6);\n  [\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 5 }\n  ]\n\n  // nested paths\n  const obj7 = {a: 4, b: {c: 3}};\n  const obj8 = {a: 4, b: {c: 4}};\n  const obj9 = {a: 5, b: {d: 4}};\n\n  diff(obj7, obj8);\n  [\n    { \"op\": \"replace\", \"path\": ['b', 'c'], \"value\": 4 }\n  ]\n\n  diff(obj8, obj9);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]\n*/\n\nfunction diff(obj1, obj2, pathConverter) {\n  if (!obj1 || typeof obj1 != 'object' || !obj2 || typeof obj2 != 'object') {\n    throw new Error('both arguments must be objects or arrays');\n  }\n\n  pathConverter ||\n    (pathConverter = function(arr) {\n      return arr;\n    });\n\n  function getDiff(obj1, obj2, basePath, diffs) {\n    var obj1Keys = Object.keys(obj1);\n    var obj1KeysLength = obj1Keys.length;\n    var obj2Keys = Object.keys(obj2);\n    var obj2KeysLength = obj2Keys.length;\n    var path;\n\n    for (var i = 0; i < obj1KeysLength; i++) {\n      var key = Array.isArray(obj1) ? Number(obj1Keys[i]) : obj1Keys[i];\n      if (!(key in obj2)) {\n        path = basePath.concat(key);\n        diffs.remove.push({\n          op: 'remove',\n          path: pathConverter(path),\n        });\n      }\n    }\n\n    for (var i = 0; i < obj2KeysLength; i++) {\n      var key = Array.isArray(obj2) ? Number(obj2Keys[i]) : obj2Keys[i];\n      var obj1AtKey = obj1[key];\n      var obj2AtKey = obj2[key];\n      if (!(key in obj1)) {\n        path = basePath.concat(key);\n        var obj2Value = obj2[key];\n        diffs.add.push({\n          op: 'add',\n          path: pathConverter(path),\n          value: obj2Value,\n        });\n      } else if (obj1AtKey !== obj2AtKey) {\n        if (\n          Object(obj1AtKey) !== obj1AtKey ||\n          Object(obj2AtKey) !== obj2AtKey\n        ) {\n          path = pushReplace(path, basePath, key, diffs, pathConverter, obj2);\n        } else {\n          if (\n            !Object.keys(obj1AtKey).length &&\n            !Object.keys(obj2AtKey).length &&\n            String(obj1AtKey) != String(obj2AtKey)\n          ) {\n            path = pushReplace(path, basePath, key, diffs, pathConverter, obj2);\n          } else {\n            getDiff(obj1[key], obj2[key], basePath.concat(key), diffs);\n          }\n        }\n      }\n    }\n\n    return diffs.remove\n      .reverse()\n      .concat(diffs.replace)\n      .concat(diffs.add);\n  }\n  return getDiff(obj1, obj2, [], {remove: [], replace: [], add: []});\n}\n\nfunction pushReplace(path, basePath, key, diffs, pathConverter, obj2) {\n  path = basePath.concat(key);\n  diffs.replace.push({\n    op: 'replace',\n    path: pathConverter(path),\n    value: obj2[key],\n  });\n  return path;\n}\n\nfunction jsonPatchPathConverter(arrayPath) {\n  return [''].concat(arrayPath).join('/');\n}\n"]},"metadata":{},"sourceType":"script"}