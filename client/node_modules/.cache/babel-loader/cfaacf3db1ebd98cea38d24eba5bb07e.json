{"ast":null,"code":"const defLimit = require('os').cpus().length;\n\nconst callLimit = (queue, limit = defLimit) => new Promise((res, rej) => {\n  let active = 0;\n  let current = 0;\n  const results = [];\n  let rejected = false;\n\n  const reject = er => {\n    if (rejected) return;\n    rejected = true;\n    rej(er);\n  };\n\n  let resolved = false;\n\n  const resolve = () => {\n    if (resolved || active > 0) return;\n    resolved = true;\n    res(results);\n  };\n\n  const run = () => {\n    const c = current++;\n\n    if (c >= queue.length) {\n      return resolve();\n    }\n\n    active++;\n    results[c] = queue[c]().then(result => {\n      active--;\n      results[c] = result;\n      run();\n      return result;\n    }, reject);\n  };\n\n  for (let i = 0; i < limit; i++) {\n    run();\n  }\n});\n\nmodule.exports = callLimit;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/promise-call-limit/index.js"],"names":["defLimit","require","cpus","length","callLimit","queue","limit","Promise","res","rej","active","current","results","rejected","reject","er","resolved","resolve","run","c","then","result","i","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,IAAD,CAAP,CAAcC,IAAd,GAAqBC,MAAtC;;AACA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,KAAK,GAAGN,QAAhB,KAA6B,IAAIO,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvE,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,QAAMC,OAAO,GAAG,EAAhB;AAEA,MAAIC,QAAQ,GAAG,KAAf;;AACA,QAAMC,MAAM,GAAGC,EAAE,IAAI;AACnB,QAAIF,QAAJ,EACE;AACFA,IAAAA,QAAQ,GAAG,IAAX;AACAJ,IAAAA,GAAG,CAACM,EAAD,CAAH;AACD,GALD;;AAOA,MAAIC,QAAQ,GAAG,KAAf;;AACA,QAAMC,OAAO,GAAG,MAAM;AACpB,QAAID,QAAQ,IAAIN,MAAM,GAAG,CAAzB,EACE;AACFM,IAAAA,QAAQ,GAAG,IAAX;AACAR,IAAAA,GAAG,CAACI,OAAD,CAAH;AACD,GALD;;AAOA,QAAMM,GAAG,GAAG,MAAM;AAChB,UAAMC,CAAC,GAAGR,OAAO,EAAjB;;AACA,QAAIQ,CAAC,IAAId,KAAK,CAACF,MAAf,EAAuB;AACrB,aAAOc,OAAO,EAAd;AACD;;AAEDP,IAAAA,MAAM;AACNE,IAAAA,OAAO,CAACO,CAAD,CAAP,GAAad,KAAK,CAACc,CAAD,CAAL,GAAWC,IAAX,CAAgBC,MAAM,IAAI;AACrCX,MAAAA,MAAM;AACNE,MAAAA,OAAO,CAACO,CAAD,CAAP,GAAaE,MAAb;AACAH,MAAAA,GAAG;AACH,aAAOG,MAAP;AACD,KALY,EAKVP,MALU,CAAb;AAMD,GAbD;;AAeA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,KAApB,EAA2BgB,CAAC,EAA5B,EAAgC;AAC9BJ,IAAAA,GAAG;AACJ;AACF,CAvC8C,CAA/C;;AAyCAK,MAAM,CAACC,OAAP,GAAiBpB,SAAjB","sourcesContent":["const defLimit = require('os').cpus().length\nconst callLimit = (queue, limit = defLimit) => new Promise((res, rej) => {\n  let active = 0\n  let current = 0\n  const results = []\n\n  let rejected = false\n  const reject = er => {\n    if (rejected)\n      return\n    rejected = true\n    rej(er)\n  }\n\n  let resolved = false\n  const resolve = () => {\n    if (resolved || active > 0)\n      return\n    resolved = true\n    res(results)\n  }\n\n  const run = () => {\n    const c = current++\n    if (c >= queue.length) {\n      return resolve()\n    }\n\n    active ++\n    results[c] = queue[c]().then(result => {\n      active --\n      results[c] = result\n      run()\n      return result\n    }, reject)\n  }\n\n  for (let i = 0; i < limit; i++) {\n    run()\n  }\n})\n\nmodule.exports = callLimit\n"]},"metadata":{},"sourceType":"script"}