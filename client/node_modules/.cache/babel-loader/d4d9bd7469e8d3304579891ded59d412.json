{"ast":null,"code":"'use strict';\n\nconst LRU = require('lru-cache');\n\nconst url = require('url');\n\nconst isLambda = require('is-lambda');\n\nconst AGENT_CACHE = new LRU({\n  max: 50\n});\n\nconst HttpAgent = require('agentkeepalive');\n\nconst HttpsAgent = HttpAgent.HttpsAgent;\nmodule.exports = getAgent;\n\nconst getAgentTimeout = timeout => typeof timeout !== 'number' || !timeout ? 0 : timeout + 1;\n\nconst getMaxSockets = maxSockets => maxSockets || 15;\n\nfunction getAgent(uri, opts) {\n  const parsedUri = new url.URL(typeof uri === 'string' ? uri : uri.url);\n  const isHttps = parsedUri.protocol === 'https:';\n  const pxuri = getProxyUri(parsedUri.href, opts); // If opts.timeout is zero, set the agentTimeout to zero as well. A timeout\n  // of zero disables the timeout behavior (OS limits still apply). Else, if\n  // opts.timeout is a non-zero value, set it to timeout + 1, to ensure that\n  // the node-fetch-npm timeout will always fire first, giving us more\n  // consistent errors.\n\n  const agentTimeout = getAgentTimeout(opts.timeout);\n  const agentMaxSockets = getMaxSockets(opts.maxSockets);\n  const key = [`https:${isHttps}`, pxuri ? `proxy:${pxuri.protocol}//${pxuri.host}:${pxuri.port}` : '>no-proxy<', `local-address:${opts.localAddress || '>no-local-address<'}`, `strict-ssl:${isHttps ? opts.rejectUnauthorized : '>no-strict-ssl<'}`, `ca:${isHttps && opts.ca || '>no-ca<'}`, `cert:${isHttps && opts.cert || '>no-cert<'}`, `key:${isHttps && opts.key || '>no-key<'}`, `timeout:${agentTimeout}`, `maxSockets:${agentMaxSockets}`].join(':');\n\n  if (opts.agent != null) {\n    // `agent: false` has special behavior!\n    return opts.agent;\n  } // keep alive in AWS lambda makes no sense\n\n\n  const lambdaAgent = !isLambda ? null : isHttps ? require('https').globalAgent : require('http').globalAgent;\n  if (isLambda && !pxuri) return lambdaAgent;\n  if (AGENT_CACHE.peek(key)) return AGENT_CACHE.get(key);\n\n  if (pxuri) {\n    const pxopts = isLambda ? { ...opts,\n      agent: lambdaAgent\n    } : opts;\n    const proxy = getProxy(pxuri, pxopts, isHttps);\n    AGENT_CACHE.set(key, proxy);\n    return proxy;\n  }\n\n  const agent = isHttps ? new HttpsAgent({\n    maxSockets: agentMaxSockets,\n    ca: opts.ca,\n    cert: opts.cert,\n    key: opts.key,\n    localAddress: opts.localAddress,\n    rejectUnauthorized: opts.rejectUnauthorized,\n    timeout: agentTimeout\n  }) : new HttpAgent({\n    maxSockets: agentMaxSockets,\n    localAddress: opts.localAddress,\n    timeout: agentTimeout\n  });\n  AGENT_CACHE.set(key, agent);\n  return agent;\n}\n\nfunction checkNoProxy(uri, opts) {\n  const host = new url.URL(uri).hostname.split('.').reverse();\n  let noproxy = opts.noProxy || getProcessEnv('no_proxy');\n  if (typeof noproxy === 'string') noproxy = noproxy.split(/\\s*,\\s*/g);\n  return noproxy && noproxy.some(no => {\n    const noParts = no.split('.').filter(x => x).reverse();\n    if (!noParts.length) return false;\n\n    for (let i = 0; i < noParts.length; i++) {\n      if (host[i] !== noParts[i]) return false;\n    }\n\n    return true;\n  });\n}\n\nmodule.exports.getProcessEnv = getProcessEnv;\n\nfunction getProcessEnv(env) {\n  if (!env) return;\n  let value;\n\n  if (Array.isArray(env)) {\n    for (const e of env) {\n      value = process.env[e] || process.env[e.toUpperCase()] || process.env[e.toLowerCase()];\n      if (typeof value !== 'undefined') break;\n    }\n  }\n\n  if (typeof env === 'string') {\n    value = process.env[env] || process.env[env.toUpperCase()] || process.env[env.toLowerCase()];\n  }\n\n  return value;\n}\n\nmodule.exports.getProxyUri = getProxyUri;\n\nfunction getProxyUri(uri, opts) {\n  const protocol = new url.URL(uri).protocol;\n  const proxy = opts.proxy || protocol === 'https:' && getProcessEnv('https_proxy') || protocol === 'http:' && getProcessEnv(['https_proxy', 'http_proxy', 'proxy']);\n  if (!proxy) return null;\n  const parsedProxy = typeof proxy === 'string' ? new url.URL(proxy) : proxy;\n  return !checkNoProxy(uri, opts) && parsedProxy;\n}\n\nconst getAuth = u => u.username && u.password ? decodeURIComponent(`${u.username}:${u.password}`) : u.username ? decodeURIComponent(u.username) : null;\n\nconst getPath = u => u.pathname + u.search + u.hash;\n\nconst HttpProxyAgent = require('http-proxy-agent');\n\nconst HttpsProxyAgent = require('https-proxy-agent');\n\nconst SocksProxyAgent = require('socks-proxy-agent');\n\nmodule.exports.getProxy = getProxy;\n\nfunction getProxy(proxyUrl, opts, isHttps) {\n  const popts = {\n    host: proxyUrl.hostname,\n    port: proxyUrl.port,\n    protocol: proxyUrl.protocol,\n    path: getPath(proxyUrl),\n    auth: getAuth(proxyUrl),\n    ca: opts.ca,\n    cert: opts.cert,\n    key: opts.key,\n    timeout: getAgentTimeout(opts.timeout),\n    localAddress: opts.localAddress,\n    maxSockets: getMaxSockets(opts.maxSockets),\n    rejectUnauthorized: opts.rejectUnauthorized\n  };\n\n  if (proxyUrl.protocol === 'http:' || proxyUrl.protocol === 'https:') {\n    if (!isHttps) return new HttpProxyAgent(popts);else return new HttpsProxyAgent(popts);\n  } else if (proxyUrl.protocol.startsWith('socks')) return new SocksProxyAgent(popts);else {\n    throw Object.assign(new Error(`unsupported proxy protocol: '${proxyUrl.protocol}'`), {\n      url: proxyUrl.href\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/make-fetch-happen/lib/agent.js"],"names":["LRU","require","url","isLambda","AGENT_CACHE","max","HttpAgent","HttpsAgent","module","exports","getAgent","getAgentTimeout","timeout","getMaxSockets","maxSockets","uri","opts","parsedUri","URL","isHttps","protocol","pxuri","getProxyUri","href","agentTimeout","agentMaxSockets","key","host","port","localAddress","rejectUnauthorized","ca","cert","join","agent","lambdaAgent","globalAgent","peek","get","pxopts","proxy","getProxy","set","checkNoProxy","hostname","split","reverse","noproxy","noProxy","getProcessEnv","some","no","noParts","filter","x","length","i","env","value","Array","isArray","e","process","toUpperCase","toLowerCase","parsedProxy","getAuth","u","username","password","decodeURIComponent","getPath","pathname","search","hash","HttpProxyAgent","HttpsProxyAgent","SocksProxyAgent","proxyUrl","popts","path","auth","startsWith","Object","assign","Error"],"mappings":"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","sourcesContent":["'use strict'\nconst LRU = require('lru-cache')\nconst url = require('url')\nconst isLambda = require('is-lambda')\n\nconst AGENT_CACHE = new LRU({ max: 50 })\nconst HttpAgent = require('agentkeepalive')\nconst HttpsAgent = HttpAgent.HttpsAgent\n\nmodule.exports = getAgent\n\nconst getAgentTimeout = timeout =>\n  typeof timeout !== 'number' || !timeout ? 0 : timeout + 1\n\nconst getMaxSockets = maxSockets => maxSockets || 15\n\nfunction getAgent (uri, opts) {\n  const parsedUri = new url.URL(typeof uri === 'string' ? uri : uri.url)\n  const isHttps = parsedUri.protocol === 'https:'\n  const pxuri = getProxyUri(parsedUri.href, opts)\n\n  // If opts.timeout is zero, set the agentTimeout to zero as well. A timeout\n  // of zero disables the timeout behavior (OS limits still apply). Else, if\n  // opts.timeout is a non-zero value, set it to timeout + 1, to ensure that\n  // the node-fetch-npm timeout will always fire first, giving us more\n  // consistent errors.\n  const agentTimeout = getAgentTimeout(opts.timeout)\n  const agentMaxSockets = getMaxSockets(opts.maxSockets)\n\n  const key = [\n    `https:${isHttps}`,\n    pxuri\n      ? `proxy:${pxuri.protocol}//${pxuri.host}:${pxuri.port}`\n      : '>no-proxy<',\n    `local-address:${opts.localAddress || '>no-local-address<'}`,\n    `strict-ssl:${isHttps ? opts.rejectUnauthorized : '>no-strict-ssl<'}`,\n    `ca:${(isHttps && opts.ca) || '>no-ca<'}`,\n    `cert:${(isHttps && opts.cert) || '>no-cert<'}`,\n    `key:${(isHttps && opts.key) || '>no-key<'}`,\n    `timeout:${agentTimeout}`,\n    `maxSockets:${agentMaxSockets}`,\n  ].join(':')\n\n  if (opts.agent != null) { // `agent: false` has special behavior!\n    return opts.agent\n  }\n\n  // keep alive in AWS lambda makes no sense\n  const lambdaAgent = !isLambda ? null\n    : isHttps ? require('https').globalAgent\n    : require('http').globalAgent\n\n  if (isLambda && !pxuri)\n    return lambdaAgent\n\n  if (AGENT_CACHE.peek(key))\n    return AGENT_CACHE.get(key)\n\n  if (pxuri) {\n    const pxopts = isLambda ? {\n      ...opts,\n      agent: lambdaAgent,\n    } : opts\n    const proxy = getProxy(pxuri, pxopts, isHttps)\n    AGENT_CACHE.set(key, proxy)\n    return proxy\n  }\n\n  const agent = isHttps ? new HttpsAgent({\n    maxSockets: agentMaxSockets,\n    ca: opts.ca,\n    cert: opts.cert,\n    key: opts.key,\n    localAddress: opts.localAddress,\n    rejectUnauthorized: opts.rejectUnauthorized,\n    timeout: agentTimeout,\n  }) : new HttpAgent({\n    maxSockets: agentMaxSockets,\n    localAddress: opts.localAddress,\n    timeout: agentTimeout,\n  })\n  AGENT_CACHE.set(key, agent)\n  return agent\n}\n\nfunction checkNoProxy (uri, opts) {\n  const host = new url.URL(uri).hostname.split('.').reverse()\n  let noproxy = (opts.noProxy || getProcessEnv('no_proxy'))\n  if (typeof noproxy === 'string')\n    noproxy = noproxy.split(/\\s*,\\s*/g)\n\n  return noproxy && noproxy.some(no => {\n    const noParts = no.split('.').filter(x => x).reverse()\n    if (!noParts.length)\n      return false\n    for (let i = 0; i < noParts.length; i++) {\n      if (host[i] !== noParts[i])\n        return false\n    }\n    return true\n  })\n}\n\nmodule.exports.getProcessEnv = getProcessEnv\n\nfunction getProcessEnv (env) {\n  if (!env)\n    return\n\n  let value\n\n  if (Array.isArray(env)) {\n    for (const e of env) {\n      value = process.env[e] ||\n        process.env[e.toUpperCase()] ||\n        process.env[e.toLowerCase()]\n      if (typeof value !== 'undefined')\n        break\n    }\n  }\n\n  if (typeof env === 'string') {\n    value = process.env[env] ||\n      process.env[env.toUpperCase()] ||\n      process.env[env.toLowerCase()]\n  }\n\n  return value\n}\n\nmodule.exports.getProxyUri = getProxyUri\nfunction getProxyUri (uri, opts) {\n  const protocol = new url.URL(uri).protocol\n\n  const proxy = opts.proxy ||\n    (\n      protocol === 'https:' &&\n      getProcessEnv('https_proxy')\n    ) ||\n    (\n      protocol === 'http:' &&\n      getProcessEnv(['https_proxy', 'http_proxy', 'proxy'])\n    )\n  if (!proxy)\n    return null\n\n  const parsedProxy = (typeof proxy === 'string') ? new url.URL(proxy) : proxy\n\n  return !checkNoProxy(uri, opts) && parsedProxy\n}\n\nconst getAuth = u =>\n  u.username && u.password ? decodeURIComponent(`${u.username}:${u.password}`)\n  : u.username ? decodeURIComponent(u.username)\n  : null\n\nconst getPath = u => u.pathname + u.search + u.hash\n\nconst HttpProxyAgent = require('http-proxy-agent')\nconst HttpsProxyAgent = require('https-proxy-agent')\nconst SocksProxyAgent = require('socks-proxy-agent')\nmodule.exports.getProxy = getProxy\nfunction getProxy (proxyUrl, opts, isHttps) {\n  const popts = {\n    host: proxyUrl.hostname,\n    port: proxyUrl.port,\n    protocol: proxyUrl.protocol,\n    path: getPath(proxyUrl),\n    auth: getAuth(proxyUrl),\n    ca: opts.ca,\n    cert: opts.cert,\n    key: opts.key,\n    timeout: getAgentTimeout(opts.timeout),\n    localAddress: opts.localAddress,\n    maxSockets: getMaxSockets(opts.maxSockets),\n    rejectUnauthorized: opts.rejectUnauthorized,\n  }\n\n  if (proxyUrl.protocol === 'http:' || proxyUrl.protocol === 'https:') {\n    if (!isHttps)\n      return new HttpProxyAgent(popts)\n    else\n      return new HttpsProxyAgent(popts)\n  } else if (proxyUrl.protocol.startsWith('socks'))\n    return new SocksProxyAgent(popts)\n  else {\n    throw Object.assign(\n      new Error(`unsupported proxy protocol: '${proxyUrl.protocol}'`),\n      {\n        url: proxyUrl.href,\n      }\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}