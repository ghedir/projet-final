{"ast":null,"code":"// TODO: set the scope config from package.json or explicit cli config\nconst walkUp = require('walk-up-path');\n\nconst ini = require('ini');\n\nconst nopt = require('nopt');\n\nconst mkdirp = require('mkdirp-infer-owner');\n/* istanbul ignore next */\n\n\nconst myUid = process.getuid && process.getuid();\n/* istanbul ignore next */\n\nconst myGid = process.getgid && process.getgid();\n\nconst {\n  resolve,\n  dirname,\n  join\n} = require('path');\n\nconst {\n  homedir\n} = require('os');\n\nconst {\n  promisify\n} = require('util');\n\nconst fs = require('fs');\n\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst chmod = promisify(fs.chmod);\nconst chown = promisify(fs.chown);\nconst unlink = promisify(fs.unlink);\nconst stat = promisify(fs.stat);\n\nconst hasOwnProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key); // define a custom getter, but turn into a normal prop\n// if we set it.  otherwise it can't be set on child objects\n\n\nconst settableGetter = (obj, key, get) => {\n  Object.defineProperty(obj, key, {\n    get,\n\n    set(value) {\n      Object.defineProperty(obj, key, {\n        value,\n        configurable: true,\n        writable: true,\n        enumerable: true\n      });\n    },\n\n    configurable: true,\n    enumerable: true\n  });\n};\n\nconst typeDefs = require('./type-defs.js');\n\nconst nerfDart = require('./nerf-dart.js');\n\nconst envReplace = require('./env-replace.js');\n\nconst parseField = require('./parse-field.js');\n\nconst typeDescription = require('./type-description.js');\n\nconst setEnvs = require('./set-envs.js'); // types that can be saved back to\n\n\nconst confFileTypes = new Set(['global', 'user', 'project']);\nconst confTypes = new Set(['default', 'builtin', ...confFileTypes, 'env', 'cli']);\n\nconst _loaded = Symbol('loaded');\n\nconst _get = Symbol('get');\n\nconst _find = Symbol('find');\n\nconst _loadObject = Symbol('loadObject');\n\nconst _loadFile = Symbol('loadFile');\n\nconst _checkDeprecated = Symbol('checkDeprecated');\n\nconst _flatten = Symbol('flatten');\n\nconst _flatOptions = Symbol('flatOptions');\n\nclass Config {\n  static get typeDefs() {\n    return typeDefs;\n  }\n\n  constructor({\n    definitions,\n    shorthands,\n    flatten,\n    npmPath,\n    // options just to override in tests, mostly\n    env = process.env,\n    argv = process.argv,\n    log = require('./proc-log.js'),\n    platform = process.platform,\n    execPath = process.execPath,\n    cwd = process.cwd()\n  }) {\n    // turn the definitions into nopt's weirdo syntax\n    this.definitions = definitions;\n    const types = {};\n    const defaults = {};\n    this.deprecated = {};\n\n    for (const [key, def] of Object.entries(definitions)) {\n      defaults[key] = def.default;\n      types[key] = def.type;\n      if (def.deprecated) this.deprecated[key] = def.deprecated.trim().replace(/\\n +/, '\\n');\n    } // populated the first time we flatten the object\n\n\n    this[_flatOptions] = null;\n    this[_flatten] = flatten;\n    this.types = types;\n    this.shorthands = shorthands;\n    this.defaults = defaults;\n    this.npmPath = npmPath;\n    this.log = log;\n    this.argv = argv;\n    this.env = env;\n    this.execPath = execPath;\n    this.platform = platform;\n    this.cwd = cwd; // set when we load configs\n\n    this.globalPrefix = null;\n    this.localPrefix = null; // defaults to env.HOME, but will always be *something*\n\n    this.home = null; // set up the prototype chain of config objects\n\n    const wheres = [...confTypes];\n    this.data = new Map();\n    let parent = null;\n\n    for (const where of wheres) {\n      this.data.set(where, parent = new ConfigData(parent));\n    }\n\n    this.data.set = () => {\n      throw new Error('cannot change internal config data structure');\n    };\n\n    this.data.delete = () => {\n      throw new Error('cannot change internal config data structure');\n    };\n\n    this.sources = new Map([]);\n    this.list = [];\n\n    for (const {\n      data\n    } of this.data.values()) {\n      this.list.unshift(data);\n    }\n\n    Object.freeze(this.list);\n    this[_loaded] = false;\n  }\n\n  get loaded() {\n    return this[_loaded];\n  }\n\n  get prefix() {\n    return this[_get]('global') ? this.globalPrefix : this.localPrefix;\n  } // return the location where key is found.\n\n\n  find(key) {\n    if (!this.loaded) throw new Error('call config.load() before reading values');\n    return this[_find](key);\n  }\n\n  [_find](key) {\n    // have to look in reverse order\n    const entries = [...this.data.entries()];\n\n    for (let i = entries.length - 1; i > -1; i--) {\n      const [where, {\n        data\n      }] = entries[i];\n      if (hasOwnProperty(data, key)) return where;\n    }\n\n    return null;\n  }\n\n  get(key, where) {\n    if (!this.loaded) throw new Error('call config.load() before reading values');\n    return this[_get](key, where);\n  } // we need to get values sometimes, so use this internal one to do so\n  // while in the process of loading.\n\n\n  [_get](key, where = null) {\n    if (where !== null && !confTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where);\n    }\n\n    const {\n      data,\n      source\n    } = this.data.get(where || 'cli');\n    return where === null || hasOwnProperty(data, key) ? data[key] : undefined;\n  }\n\n  set(key, val, where = 'cli') {\n    if (!this.loaded) throw new Error('call config.load() before setting values');\n    if (!confTypes.has(where)) throw new Error('invalid config location param: ' + where);\n\n    this[_checkDeprecated](key);\n\n    const {\n      data\n    } = this.data.get(where);\n    data[key] = val; // this is now dirty, the next call to this.valid will have to check it\n\n    this.data.get(where)[_valid] = null; // the flat options are invalidated, regenerate next time they're needed\n\n    this[_flatOptions] = null;\n  }\n\n  get flat() {\n    if (this[_flatOptions]) return this[_flatOptions]; // create the object for flat options passed to deps\n\n    process.emit('time', 'config:load:flatten');\n    this[_flatOptions] = {}; // walk from least priority to highest\n\n    for (const {\n      data\n    } of this.data.values()) {\n      this[_flatten](data, this[_flatOptions]);\n    }\n\n    process.emit('timeEnd', 'config:load:flatten');\n    return this[_flatOptions];\n  }\n\n  delete(key, where = 'cli') {\n    if (!this.loaded) throw new Error('call config.load() before deleting values');\n    if (!confTypes.has(where)) throw new Error('invalid config location param: ' + where);\n    delete this.data.get(where).data[key];\n  }\n\n  async load() {\n    if (this.loaded) throw new Error('attempting to load npm config multiple times');\n    process.emit('time', 'config:load'); // first load the defaults, which sets the global prefix\n\n    process.emit('time', 'config:load:defaults');\n    this.loadDefaults();\n    process.emit('timeEnd', 'config:load:defaults'); // next load the builtin config, as this sets new effective defaults\n\n    process.emit('time', 'config:load:builtin');\n    await this.loadBuiltinConfig();\n    process.emit('timeEnd', 'config:load:builtin'); // cli and env are not async, and can set the prefix, relevant to project\n\n    process.emit('time', 'config:load:cli');\n    this.loadCLI();\n    process.emit('timeEnd', 'config:load:cli');\n    process.emit('time', 'config:load:env');\n    this.loadEnv();\n    process.emit('timeEnd', 'config:load:env'); // next project config, which can affect userconfig location\n\n    process.emit('time', 'config:load:project');\n    await this.loadProjectConfig();\n    process.emit('timeEnd', 'config:load:project'); // then user config, which can affect globalconfig location\n\n    process.emit('time', 'config:load:user');\n    await this.loadUserConfig();\n    process.emit('timeEnd', 'config:load:user'); // last but not least, global config file\n\n    process.emit('time', 'config:load:global');\n    await this.loadGlobalConfig();\n    process.emit('timeEnd', 'config:load:global'); // warn if anything is not valid\n\n    process.emit('time', 'config:load:validate');\n    this.validate();\n    process.emit('timeEnd', 'config:load:validate'); // set this before calling setEnvs, so that we don't have to share\n    // symbols, as that module also does a bunch of get operations\n\n    this[_loaded] = true;\n    process.emit('time', 'config:load:credentials');\n    const reg = this.get('registry');\n    const creds = this.getCredentialsByURI(reg); // ignore this error because a failed set will strip out anything that\n    // might be a security hazard, which was the intention.\n\n    try {\n      this.setCredentialsByURI(reg, creds);\n    } catch (_) {}\n\n    process.emit('timeEnd', 'config:load:credentials'); // set proper globalPrefix now that everything is loaded\n\n    this.globalPrefix = this.get('prefix');\n    process.emit('time', 'config:load:setEnvs');\n    this.setEnvs();\n    process.emit('timeEnd', 'config:load:setEnvs');\n    process.emit('timeEnd', 'config:load');\n  }\n\n  loadDefaults() {\n    this.loadGlobalPrefix();\n    this.loadHome();\n\n    this[_loadObject]({ ...this.defaults,\n      prefix: this.globalPrefix\n    }, 'default', 'default values');\n\n    const {\n      data\n    } = this.data.get('default'); // the metrics-registry defaults to the current resolved value of\n    // the registry, unless overridden somewhere else.\n\n    settableGetter(data, 'metrics-registry', () => this[_get]('registry')); // if the prefix is set on cli, env, or userconfig, then we need to\n    // default the globalconfig file to that location, instead of the default\n    // global prefix.  It's weird that `npm get globalconfig --prefix=/foo`\n    // returns `/foo/etc/npmrc`, but better to not change it at this point.\n\n    settableGetter(data, 'globalconfig', () => resolve(this[_get]('prefix'), 'etc/npmrc'));\n  }\n\n  loadHome() {\n    if (this.env.HOME) return this.home = this.env.HOME;\n    this.home = homedir();\n  }\n\n  loadGlobalPrefix() {\n    if (this.globalPrefix) throw new Error('cannot load default global prefix more than once');\n\n    if (this.env.PREFIX) {\n      this.globalPrefix = this.env.PREFIX;\n    } else if (this.platform === 'win32') {\n      // c:\\node\\node.exe --> prefix=c:\\node\\\n      this.globalPrefix = dirname(this.execPath);\n    } else {\n      // /usr/local/bin/node --> prefix=/usr/local\n      this.globalPrefix = dirname(dirname(this.execPath)); // destdir only is respected on Unix\n\n      if (this.env.DESTDIR) this.globalPrefix = join(this.env.DESTDIR, this.globalPrefix);\n    }\n  }\n\n  loadEnv() {\n    const prefix = 'npm_config_';\n    const conf = Object.create(null);\n\n    for (const [envKey, envVal] of Object.entries(this.env)) {\n      if (!/^npm_config_/i.test(envKey) || envVal === '') continue;\n      const key = envKey.substr('npm_config_'.length).replace(/(?!^)_/g, '-') // don't replace _ at the start of the key\n      .toLowerCase();\n      conf[key] = envVal;\n    }\n\n    this[_loadObject](conf, 'env', 'environment');\n  }\n\n  loadCLI() {\n    nopt.invalidHandler = (k, val, type) => this.invalidHandler(k, val, type, 'command line options', 'cli');\n\n    const conf = nopt(this.types, this.shorthands, this.argv);\n    nopt.invalidHandler = null;\n    this.parsedArgv = conf.argv;\n    delete conf.argv;\n\n    this[_loadObject](conf, 'cli', 'command line options');\n  }\n\n  get valid() {\n    for (const [where, {\n      valid\n    }] of this.data.entries()) {\n      if (valid === false || valid === null && !this.validate(where)) return false;\n    }\n\n    return true;\n  }\n\n  validate(where) {\n    if (!where) {\n      let valid = true;\n\n      for (const [where, obj] of this.data.entries()) {\n        // no need to validate our defaults, we know they're fine\n        // cli was already validated when parsed the first time\n        if (where === 'default' || where === 'builtin' || where === 'cli') continue;\n        const ret = this.validate(where);\n        valid = valid && ret;\n      }\n\n      return valid;\n    } else {\n      const obj = this.data.get(where);\n      obj[_valid] = true;\n\n      nopt.invalidHandler = (k, val, type) => this.invalidHandler(k, val, type, obj.source, where);\n\n      nopt.clean(obj.data, this.types, this.typeDefs);\n      nopt.invalidHandler = null;\n      return obj[_valid];\n    }\n  }\n\n  invalidHandler(k, val, type, source, where) {\n    this.log.warn('invalid config', k + '=' + JSON.stringify(val), `set in ${source}`);\n    this.data.get(where)[_valid] = false;\n\n    if (Array.isArray(type)) {\n      if (type.includes(typeDefs.url.type)) type = typeDefs.url.type;else {\n        /* istanbul ignore if - no actual configs matching this, but\n         * path types SHOULD be handled this way, like URLs, for the\n         * same reason */\n        if (type.includes(typeDefs.path.type)) type = typeDefs.path.type;\n      }\n    }\n\n    const typeDesc = typeDescription(type);\n    const oneOrMore = typeDesc.indexOf(Array) !== -1;\n    const mustBe = typeDesc.filter(m => m !== undefined && m !== Array);\n    const oneOf = mustBe.length === 1 && oneOrMore ? ' one or more' : mustBe.length > 1 && oneOrMore ? ' one or more of:' : mustBe.length > 1 ? ' one of:' : '';\n    const msg = 'Must be' + oneOf;\n    const desc = mustBe.length === 1 ? mustBe[0] : mustBe.filter(m => m !== Array).map(n => typeof n === 'string' ? n : JSON.stringify(n)).join(', ');\n    this.log.warn('invalid config', msg, desc);\n  }\n\n  [_loadObject](obj, where, source, er = null) {\n    const conf = this.data.get(where);\n\n    if (conf.source) {\n      const m = `double-loading \"${where}\" configs from ${source}, ` + `previously loaded from ${conf.source}`;\n      throw new Error(m);\n    }\n\n    if (this.sources.has(source)) {\n      const m = `double-loading config \"${source}\" as \"${where}\", ` + `previously loaded as \"${this.sources.get(source)}\"`;\n      throw new Error(m);\n    }\n\n    conf.source = source;\n    this.sources.set(source, where);\n\n    if (er) {\n      conf.loadError = er;\n      if (er.code !== 'ENOENT') this.log.verbose('config', `error loading ${where} config`, er);\n    } else {\n      conf.raw = obj;\n\n      for (const [key, value] of Object.entries(obj)) {\n        const k = envReplace(key, this.env);\n        const v = this.parseField(value, k);\n        if (where !== 'default') this[_checkDeprecated](k, where, obj, [key, value]);\n        conf.data[k] = v;\n      }\n    }\n  }\n\n  [_checkDeprecated](key, where, obj, kv) {\n    // XXX a future npm version will make this a warning.\n    // An even more future npm version will make this an error.\n    if (this.deprecated[key]) {\n      this.log.verbose('config', key, this.deprecated[key]);\n    }\n  } // Parse a field, coercing it to the best type available.\n\n\n  parseField(f, key, listElement = false) {\n    return parseField(f, key, this, listElement);\n  }\n\n  async [_loadFile](file, type) {\n    process.emit('time', 'config:load:file:' + file); // only catch the error from readFile, not from the loadObject call\n\n    await readFile(file, 'utf8').then(data => this[_loadObject](ini.parse(data), type, file), er => this[_loadObject](null, type, file, er));\n    process.emit('timeEnd', 'config:load:file:' + file);\n  }\n\n  loadBuiltinConfig() {\n    return this[_loadFile](resolve(this.npmPath, 'npmrc'), 'builtin');\n  }\n\n  async loadProjectConfig() {\n    // the localPrefix can be set by the CLI config, but otherwise is\n    // found by walking up the folder tree\n    await this.loadLocalPrefix();\n    const projectFile = resolve(this.localPrefix, '.npmrc'); // if we're in the ~ directory, and there happens to be a node_modules\n    // folder (which is not TOO uncommon, it turns out), then we can end\n    // up loading the \"project\" config where the \"userconfig\" will be,\n    // which causes some calamaties.  So, we only load project config if\n    // it doesn't match what the userconfig will be.\n\n    if (projectFile !== this[_get]('userconfig')) return this[_loadFile](projectFile, 'project');else {\n      this.data.get('project').source = '(same as \"user\" config, ignored)';\n      this.sources.set(this.data.get('project').source, 'project');\n    }\n  }\n\n  async loadLocalPrefix() {\n    const cliPrefix = this[_get]('prefix', 'cli');\n\n    if (cliPrefix) {\n      this.localPrefix = cliPrefix;\n      return;\n    }\n\n    for (const p of walkUp(this.cwd)) {\n      // walk up until we have a nm dir or a pj file\n      const hasAny = (await Promise.all([stat(resolve(p, 'node_modules')).then(st => st.isDirectory()).catch(() => false), stat(resolve(p, 'package.json')).then(st => st.isFile()).catch(() => false)])).some(is => is);\n\n      if (hasAny) {\n        this.localPrefix = p;\n        return;\n      }\n    }\n\n    this.localPrefix = this.cwd;\n  }\n\n  loadUserConfig() {\n    return this[_loadFile](this[_get]('userconfig'), 'user');\n  }\n\n  loadGlobalConfig() {\n    return this[_loadFile](this[_get]('globalconfig'), 'global');\n  }\n\n  async save(where) {\n    if (!this.loaded) throw new Error('call config.load() before saving');\n    if (!confFileTypes.has(where)) throw new Error('invalid config location param: ' + where);\n    const conf = this.data.get(where);\n    conf[_raw] = { ...conf.data\n    };\n    conf[_loadError] = null; // upgrade auth configs to more secure variants before saving\n\n    if (where === 'user') {\n      const reg = this.get('registry');\n      const creds = this.getCredentialsByURI(reg); // we ignore this error because the failed set already removed\n      // anything that might be a security hazard, and it won't be\n      // saved back to the .npmrc file, so we're good.\n\n      try {\n        this.setCredentialsByURI(reg, creds);\n      } catch (_) {}\n    }\n\n    const iniData = ini.stringify(conf.data).trim() + '\\n';\n\n    if (!iniData.trim()) {\n      // ignore the unlink error (eg, if file doesn't exist)\n      await unlink(conf.source).catch(er => {});\n      return;\n    }\n\n    const dir = dirname(conf.source);\n    await mkdirp(dir);\n    await writeFile(conf.source, iniData, 'utf8'); // don't leave a root-owned config file lying around\n\n    /* istanbul ignore if - this is best-effort and a pita to test */\n\n    if (myUid === 0) {\n      const st = await stat(dir).catch(() => null);\n      if (st && (st.uid !== myUid || st.gid !== myGid)) await chown(conf.source, st.uid, st.gid).catch(() => {});\n    }\n\n    const mode = where === 'user' ? 0o600 : 0o666;\n    await chmod(conf.source, mode);\n  }\n\n  clearCredentialsByURI(uri) {\n    const nerfed = nerfDart(uri);\n    const def = nerfDart(this.get('registry'));\n\n    if (def === nerfed) {\n      // do not delete email, that shouldn't be nerfed any more.\n      // just delete the nerfed copy, if one exists.\n      this.delete(`-authtoken`, 'user');\n      this.delete(`_authToken`, 'user');\n      this.delete(`_authtoken`, 'user');\n      this.delete(`_auth`, 'user');\n      this.delete(`_password`, 'user');\n      this.delete(`username`, 'user');\n    }\n\n    this.delete(`${nerfed}:-authtoken`, 'user');\n    this.delete(`${nerfed}:_authtoken`, 'user');\n    this.delete(`${nerfed}:_authToken`, 'user');\n    this.delete(`${nerfed}:_auth`, 'user');\n    this.delete(`${nerfed}:_password`, 'user');\n    this.delete(`${nerfed}:username`, 'user');\n    this.delete(`${nerfed}:email`, 'user');\n  }\n\n  setCredentialsByURI(uri, {\n    token,\n    username,\n    password,\n    email\n  }) {\n    const nerfed = nerfDart(uri);\n    const def = nerfDart(this.get('registry'));\n\n    if (def === nerfed) {\n      // remove old style auth info not limited to a single registry\n      this.delete('_password', 'user');\n      this.delete('username', 'user');\n      this.delete('_auth', 'user');\n      this.delete('_authtoken', 'user');\n      this.delete('-authtoken', 'user');\n      this.delete('_authToken', 'user');\n    } // email used to be nerfed always.  if we're using the default\n    // registry, de-nerf it.\n\n\n    if (nerfed === def) {\n      email = email || this.get('email', 'user') || this.get(`${nerfed}:email`, 'user');\n      if (email) this.set('email', email, 'user');\n    } // field that hasn't been used as documented for a LONG time,\n    // and as of npm 7.10.0, isn't used at all.  We just always\n    // send auth if we have it, only to the URIs under the nerf dart.\n\n\n    this.delete(`${nerfed}:always-auth`, 'user');\n    this.delete(`${nerfed}:-authtoken`, 'user');\n    this.delete(`${nerfed}:_authtoken`, 'user');\n    this.delete(`${nerfed}:email`, 'user');\n\n    if (token) {\n      this.set(`${nerfed}:_authToken`, token, 'user');\n      this.delete(`${nerfed}:_password`, 'user');\n      this.delete(`${nerfed}:username`, 'user');\n    } else if (username || password) {\n      if (!username) throw new Error('must include username');\n      if (!password) throw new Error('must include password');\n      this.delete(`${nerfed}:_authToken`, 'user');\n      this.set(`${nerfed}:username`, username, 'user'); // note: not encrypted, no idea why we bothered to do this, but oh well\n      // protects against shoulder-hacks if password is memorable, I guess?\n\n      const encoded = Buffer.from(password, 'utf8').toString('base64');\n      this.set(`${nerfed}:_password`, encoded, 'user');\n    } else {\n      throw new Error('No credentials to set.');\n    }\n  } // this has to be a bit more complicated to support legacy data of all forms\n\n\n  getCredentialsByURI(uri) {\n    const nerfed = nerfDart(uri);\n    const creds = {};\n    const email = this.get(`${nerfed}:email`) || this.get('email');\n    if (email) creds.email = email;\n    const tokenReg = this.get(`${nerfed}:_authToken`) || this.get(`${nerfed}:_authtoken`) || this.get(`${nerfed}:-authtoken`) || nerfed === nerfDart(this.get('registry')) && this.get('_authToken');\n\n    if (tokenReg) {\n      creds.token = tokenReg;\n      return creds;\n    }\n\n    const userReg = this.get(`${nerfed}:username`);\n    const passReg = this.get(`${nerfed}:_password`);\n\n    if (userReg && passReg) {\n      creds.username = userReg;\n      creds.password = Buffer.from(passReg, 'base64').toString('utf8');\n      const auth = `${creds.username}:${creds.password}`;\n      creds.auth = Buffer.from(auth, 'utf8').toString('base64');\n      return creds;\n    }\n\n    const authReg = this.get(`${nerfed}:_auth`);\n\n    if (authReg) {\n      const authDecode = Buffer.from(authReg, 'base64').toString('utf8');\n      const authSplit = authDecode.split(':');\n      creds.username = authSplit.shift();\n      creds.password = authSplit.join(':');\n      creds.auth = authReg;\n      return creds;\n    } // at this point, we can only use the values if the URI is the\n    // default registry.\n\n\n    const defaultNerf = nerfDart(this.get('registry'));\n    if (nerfed !== defaultNerf) return creds;\n    const userDef = this.get('username');\n    const passDef = this.get('_password');\n\n    if (userDef && passDef) {\n      creds.username = userDef;\n      creds.password = Buffer.from(passDef, 'base64').toString('utf8');\n      const auth = `${creds.username}:${creds.password}`;\n      creds.auth = Buffer.from(auth, 'utf8').toString('base64');\n      return creds;\n    } // Handle the old-style _auth=<base64> style for the default\n    // registry, if set.\n\n\n    const auth = this.get('_auth');\n    if (!auth) return creds;\n    const authDecode = Buffer.from(auth, 'base64').toString('utf8');\n    const authSplit = authDecode.split(':');\n    creds.username = authSplit.shift();\n    creds.password = authSplit.join(':');\n    creds.auth = auth;\n    return creds;\n  } // set up the environment object we have with npm_config_* environs\n  // for all configs that are different from their default values, and\n  // set EDITOR and HOME.\n\n\n  setEnvs() {\n    setEnvs(this);\n  }\n\n}\n\nconst _data = Symbol('data');\n\nconst _raw = Symbol('raw');\n\nconst _loadError = Symbol('loadError');\n\nconst _source = Symbol('source');\n\nconst _valid = Symbol('valid');\n\nclass ConfigData {\n  constructor(parent) {\n    this[_data] = Object.create(parent && parent.data);\n    this[_source] = null;\n    this[_loadError] = null;\n    this[_raw] = null;\n    this[_valid] = true;\n  }\n\n  get data() {\n    return this[_data];\n  }\n\n  get valid() {\n    return this[_valid];\n  }\n\n  set source(s) {\n    if (this[_source]) throw new Error('cannot set ConfigData source more than once');\n    this[_source] = s;\n  }\n\n  get source() {\n    return this[_source];\n  }\n\n  set loadError(e) {\n    if (this[_loadError] || this[_raw]) throw new Error('cannot set ConfigData loadError after load');\n    this[_loadError] = e;\n  }\n\n  get loadError() {\n    return this[_loadError];\n  }\n\n  set raw(r) {\n    if (this[_raw] || this[_loadError]) throw new Error('cannot set ConfigData raw after load');\n    this[_raw] = r;\n  }\n\n  get raw() {\n    return this[_raw];\n  }\n\n}\n\nmodule.exports = Config;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/config/lib/index.js"],"names":["walkUp","require","ini","nopt","mkdirp","myUid","process","getuid","myGid","getgid","resolve","dirname","join","homedir","promisify","fs","readFile","writeFile","chmod","chown","unlink","stat","hasOwnProperty","obj","key","Object","prototype","call","settableGetter","get","defineProperty","set","value","configurable","writable","enumerable","typeDefs","nerfDart","envReplace","parseField","typeDescription","setEnvs","confFileTypes","Set","confTypes","_loaded","Symbol","_get","_find","_loadObject","_loadFile","_checkDeprecated","_flatten","_flatOptions","Config","constructor","definitions","shorthands","flatten","npmPath","env","argv","log","platform","execPath","cwd","types","defaults","deprecated","def","entries","default","type","trim","replace","globalPrefix","localPrefix","home","wheres","data","Map","parent","where","ConfigData","Error","delete","sources","list","values","unshift","freeze","loaded","prefix","find","i","length","has","source","undefined","val","_valid","flat","emit","load","loadDefaults","loadBuiltinConfig","loadCLI","loadEnv","loadProjectConfig","loadUserConfig","loadGlobalConfig","validate","reg","creds","getCredentialsByURI","setCredentialsByURI","_","loadGlobalPrefix","loadHome","HOME","PREFIX","DESTDIR","conf","create","envKey","envVal","test","substr","toLowerCase","invalidHandler","k","parsedArgv","valid","ret","clean","warn","JSON","stringify","Array","isArray","includes","url","path","typeDesc","oneOrMore","indexOf","mustBe","filter","m","oneOf","msg","desc","map","n","er","loadError","code","verbose","raw","v","kv","f","listElement","file","then","parse","loadLocalPrefix","projectFile","cliPrefix","p","hasAny","Promise","all","st","isDirectory","catch","isFile","some","is","save","_raw","_loadError","iniData","dir","uid","gid","mode","clearCredentialsByURI","uri","nerfed","token","username","password","email","encoded","Buffer","from","toString","tokenReg","userReg","passReg","auth","authReg","authDecode","authSplit","split","shift","defaultNerf","userDef","passDef","_data","_source","s","e","r","module","exports"],"mappings":"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","sourcesContent":["// TODO: set the scope config from package.json or explicit cli config\nconst walkUp = require('walk-up-path')\nconst ini = require('ini')\nconst nopt = require('nopt')\nconst mkdirp = require('mkdirp-infer-owner')\n\n/* istanbul ignore next */\nconst myUid = process.getuid && process.getuid()\n/* istanbul ignore next */\nconst myGid = process.getgid && process.getgid()\n\nconst { resolve, dirname, join } = require('path')\nconst { homedir } = require('os')\nconst { promisify } = require('util')\nconst fs = require('fs')\nconst readFile = promisify(fs.readFile)\nconst writeFile = promisify(fs.writeFile)\nconst chmod = promisify(fs.chmod)\nconst chown = promisify(fs.chown)\nconst unlink = promisify(fs.unlink)\nconst stat = promisify(fs.stat)\n\nconst hasOwnProperty = (obj, key) =>\n  Object.prototype.hasOwnProperty.call(obj, key)\n\n// define a custom getter, but turn into a normal prop\n// if we set it.  otherwise it can't be set on child objects\nconst settableGetter = (obj, key, get) => {\n  Object.defineProperty(obj, key, {\n    get,\n    set (value) {\n      Object.defineProperty(obj, key, {\n        value,\n        configurable: true,\n        writable: true,\n        enumerable: true,\n      })\n    },\n    configurable: true,\n    enumerable: true,\n  })\n}\n\nconst typeDefs = require('./type-defs.js')\nconst nerfDart = require('./nerf-dart.js')\nconst envReplace = require('./env-replace.js')\nconst parseField = require('./parse-field.js')\nconst typeDescription = require('./type-description.js')\nconst setEnvs = require('./set-envs.js')\n\n// types that can be saved back to\nconst confFileTypes = new Set([\n  'global',\n  'user',\n  'project',\n])\n\nconst confTypes = new Set([\n  'default',\n  'builtin',\n  ...confFileTypes,\n  'env',\n  'cli',\n])\n\nconst _loaded = Symbol('loaded')\nconst _get = Symbol('get')\nconst _find = Symbol('find')\nconst _loadObject = Symbol('loadObject')\nconst _loadFile = Symbol('loadFile')\nconst _checkDeprecated = Symbol('checkDeprecated')\nconst _flatten = Symbol('flatten')\nconst _flatOptions = Symbol('flatOptions')\n\nclass Config {\n  static get typeDefs () {\n    return typeDefs\n  }\n\n  constructor ({\n    definitions,\n    shorthands,\n    flatten,\n    npmPath,\n\n    // options just to override in tests, mostly\n    env = process.env,\n    argv = process.argv,\n    log = require('./proc-log.js'),\n    platform = process.platform,\n    execPath = process.execPath,\n    cwd = process.cwd(),\n  }) {\n\n    // turn the definitions into nopt's weirdo syntax\n    this.definitions = definitions\n    const types = {}\n    const defaults = {}\n    this.deprecated = {}\n    for (const [key, def] of Object.entries(definitions)) {\n      defaults[key] = def.default\n      types[key] = def.type\n      if (def.deprecated)\n        this.deprecated[key] = def.deprecated.trim().replace(/\\n +/, '\\n')\n    }\n\n    // populated the first time we flatten the object\n    this[_flatOptions] = null\n    this[_flatten] = flatten\n    this.types = types\n    this.shorthands = shorthands\n    this.defaults = defaults\n\n    this.npmPath = npmPath\n    this.log = log\n    this.argv = argv\n    this.env = env\n    this.execPath = execPath\n    this.platform = platform\n    this.cwd = cwd\n\n    // set when we load configs\n    this.globalPrefix = null\n    this.localPrefix = null\n\n    // defaults to env.HOME, but will always be *something*\n    this.home = null\n\n    // set up the prototype chain of config objects\n    const wheres = [...confTypes]\n    this.data = new Map()\n    let parent = null\n    for (const where of wheres) {\n      this.data.set(where, parent = new ConfigData(parent))\n    }\n\n    this.data.set = () => {\n      throw new Error('cannot change internal config data structure')\n    }\n    this.data.delete = () => {\n      throw new Error('cannot change internal config data structure')\n    }\n\n    this.sources = new Map([])\n\n    this.list = []\n    for (const { data } of this.data.values()) {\n      this.list.unshift(data)\n    }\n    Object.freeze(this.list)\n\n    this[_loaded] = false\n  }\n\n  get loaded () {\n    return this[_loaded]\n  }\n\n  get prefix () {\n    return this[_get]('global') ? this.globalPrefix : this.localPrefix\n  }\n\n  // return the location where key is found.\n  find (key) {\n    if (!this.loaded)\n      throw new Error('call config.load() before reading values')\n    return this[_find](key)\n  }\n  [_find] (key) {\n    // have to look in reverse order\n    const entries = [...this.data.entries()]\n    for (let i = entries.length - 1; i > -1; i--) {\n      const [where, { data }] = entries[i]\n      if (hasOwnProperty(data, key))\n        return where\n    }\n    return null\n  }\n\n  get (key, where) {\n    if (!this.loaded)\n      throw new Error('call config.load() before reading values')\n    return this[_get](key, where)\n  }\n  // we need to get values sometimes, so use this internal one to do so\n  // while in the process of loading.\n  [_get] (key, where = null) {\n    if (where !== null && !confTypes.has(where)) {\n      throw new Error('invalid config location param: ' + where)\n    }\n    const { data, source } = this.data.get(where || 'cli')\n    return where === null || hasOwnProperty(data, key) ? data[key] : undefined\n  }\n\n  set (key, val, where = 'cli') {\n    if (!this.loaded)\n      throw new Error('call config.load() before setting values')\n    if (!confTypes.has(where))\n      throw new Error('invalid config location param: ' + where)\n    this[_checkDeprecated](key)\n    const { data } = this.data.get(where)\n    data[key] = val\n\n    // this is now dirty, the next call to this.valid will have to check it\n    this.data.get(where)[_valid] = null\n\n    // the flat options are invalidated, regenerate next time they're needed\n    this[_flatOptions] = null\n  }\n\n  get flat () {\n    if (this[_flatOptions])\n      return this[_flatOptions]\n\n    // create the object for flat options passed to deps\n    process.emit('time', 'config:load:flatten')\n    this[_flatOptions] = {}\n    // walk from least priority to highest\n    for (const { data } of this.data.values()) {\n      this[_flatten](data, this[_flatOptions])\n    }\n    process.emit('timeEnd', 'config:load:flatten')\n\n    return this[_flatOptions]\n  }\n\n  delete (key, where = 'cli') {\n    if (!this.loaded)\n      throw new Error('call config.load() before deleting values')\n    if (!confTypes.has(where))\n      throw new Error('invalid config location param: ' + where)\n    delete this.data.get(where).data[key]\n  }\n\n  async load () {\n    if (this.loaded)\n      throw new Error('attempting to load npm config multiple times')\n\n    process.emit('time', 'config:load')\n    // first load the defaults, which sets the global prefix\n    process.emit('time', 'config:load:defaults')\n    this.loadDefaults()\n    process.emit('timeEnd', 'config:load:defaults')\n\n    // next load the builtin config, as this sets new effective defaults\n    process.emit('time', 'config:load:builtin')\n    await this.loadBuiltinConfig()\n    process.emit('timeEnd', 'config:load:builtin')\n\n    // cli and env are not async, and can set the prefix, relevant to project\n    process.emit('time', 'config:load:cli')\n    this.loadCLI()\n    process.emit('timeEnd', 'config:load:cli')\n    process.emit('time', 'config:load:env')\n    this.loadEnv()\n    process.emit('timeEnd', 'config:load:env')\n\n    // next project config, which can affect userconfig location\n    process.emit('time', 'config:load:project')\n    await this.loadProjectConfig()\n    process.emit('timeEnd', 'config:load:project')\n    // then user config, which can affect globalconfig location\n    process.emit('time', 'config:load:user')\n    await this.loadUserConfig()\n    process.emit('timeEnd', 'config:load:user')\n    // last but not least, global config file\n    process.emit('time', 'config:load:global')\n    await this.loadGlobalConfig()\n    process.emit('timeEnd', 'config:load:global')\n\n    // warn if anything is not valid\n    process.emit('time', 'config:load:validate')\n    this.validate()\n    process.emit('timeEnd', 'config:load:validate')\n\n    // set this before calling setEnvs, so that we don't have to share\n    // symbols, as that module also does a bunch of get operations\n    this[_loaded] = true\n\n    process.emit('time', 'config:load:credentials')\n    const reg = this.get('registry')\n    const creds = this.getCredentialsByURI(reg)\n    // ignore this error because a failed set will strip out anything that\n    // might be a security hazard, which was the intention.\n    try { this.setCredentialsByURI(reg, creds) } catch (_) {}\n    process.emit('timeEnd', 'config:load:credentials')\n\n    // set proper globalPrefix now that everything is loaded\n    this.globalPrefix = this.get('prefix')\n\n    process.emit('time', 'config:load:setEnvs')\n    this.setEnvs()\n    process.emit('timeEnd', 'config:load:setEnvs')\n\n    process.emit('timeEnd', 'config:load')\n  }\n\n  loadDefaults () {\n    this.loadGlobalPrefix()\n    this.loadHome()\n\n    this[_loadObject]({\n      ...this.defaults,\n      prefix: this.globalPrefix,\n    }, 'default', 'default values')\n\n    const { data } = this.data.get('default')\n\n    // the metrics-registry defaults to the current resolved value of\n    // the registry, unless overridden somewhere else.\n    settableGetter(data, 'metrics-registry', () => this[_get]('registry'))\n\n    // if the prefix is set on cli, env, or userconfig, then we need to\n    // default the globalconfig file to that location, instead of the default\n    // global prefix.  It's weird that `npm get globalconfig --prefix=/foo`\n    // returns `/foo/etc/npmrc`, but better to not change it at this point.\n    settableGetter(data, 'globalconfig', () =>\n      resolve(this[_get]('prefix'), 'etc/npmrc'))\n  }\n\n  loadHome () {\n    if (this.env.HOME)\n      return this.home = this.env.HOME\n    this.home = homedir()\n  }\n\n  loadGlobalPrefix () {\n    if (this.globalPrefix)\n      throw new Error('cannot load default global prefix more than once')\n\n    if (this.env.PREFIX) {\n      this.globalPrefix = this.env.PREFIX\n    } else if (this.platform === 'win32') {\n    // c:\\node\\node.exe --> prefix=c:\\node\\\n      this.globalPrefix = dirname(this.execPath)\n    } else {\n      // /usr/local/bin/node --> prefix=/usr/local\n      this.globalPrefix = dirname(dirname(this.execPath))\n\n      // destdir only is respected on Unix\n      if (this.env.DESTDIR)\n        this.globalPrefix = join(this.env.DESTDIR, this.globalPrefix)\n    }\n  }\n\n  loadEnv () {\n    const prefix = 'npm_config_'\n    const conf = Object.create(null)\n    for (const [envKey, envVal] of Object.entries(this.env)) {\n      if (!/^npm_config_/i.test(envKey) || envVal === '')\n        continue\n      const key = envKey.substr('npm_config_'.length)\n        .replace(/(?!^)_/g, '-') // don't replace _ at the start of the key\n        .toLowerCase()\n      conf[key] = envVal\n    }\n    this[_loadObject](conf, 'env', 'environment')\n  }\n\n  loadCLI () {\n    nopt.invalidHandler = (k, val, type) =>\n      this.invalidHandler(k, val, type, 'command line options', 'cli')\n    const conf = nopt(this.types, this.shorthands, this.argv)\n    nopt.invalidHandler = null\n    this.parsedArgv = conf.argv\n    delete conf.argv\n    this[_loadObject](conf, 'cli', 'command line options')\n  }\n\n  get valid () {\n    for (const [where, {valid}] of this.data.entries()) {\n      if (valid === false || valid === null && !this.validate(where))\n        return false\n    }\n    return true\n  }\n\n  validate (where) {\n    if (!where) {\n      let valid = true\n      for (const [where, obj] of this.data.entries()) {\n        // no need to validate our defaults, we know they're fine\n        // cli was already validated when parsed the first time\n        if (where === 'default' || where === 'builtin' || where === 'cli')\n          continue\n        const ret = this.validate(where)\n        valid = valid && ret\n      }\n      return valid\n    } else {\n      const obj = this.data.get(where)\n      obj[_valid] = true\n\n      nopt.invalidHandler = (k, val, type) =>\n        this.invalidHandler(k, val, type, obj.source, where)\n\n      nopt.clean(obj.data, this.types, this.typeDefs)\n\n      nopt.invalidHandler = null\n      return obj[_valid]\n    }\n  }\n\n  invalidHandler (k, val, type, source, where) {\n    this.log.warn(\n      'invalid config',\n      k + '=' + JSON.stringify(val),\n      `set in ${source}`\n    )\n    this.data.get(where)[_valid] = false\n\n    if (Array.isArray(type)) {\n      if (type.includes(typeDefs.url.type))\n        type = typeDefs.url.type\n      else {\n        /* istanbul ignore if - no actual configs matching this, but\n         * path types SHOULD be handled this way, like URLs, for the\n         * same reason */\n        if (type.includes(typeDefs.path.type))\n          type = typeDefs.path.type\n      }\n    }\n\n    const typeDesc = typeDescription(type)\n    const oneOrMore = typeDesc.indexOf(Array) !== -1\n    const mustBe = typeDesc\n      .filter(m => m !== undefined && m !== Array)\n    const oneOf = mustBe.length === 1 && oneOrMore ? ' one or more'\n      : mustBe.length > 1 && oneOrMore ? ' one or more of:'\n      : mustBe.length > 1 ? ' one of:'\n      : ''\n    const msg = 'Must be' + oneOf\n    const desc = mustBe.length === 1 ? mustBe[0]\n      : mustBe.filter(m => m !== Array)\n        .map(n => typeof n === 'string' ? n : JSON.stringify(n))\n        .join(', ')\n    this.log.warn('invalid config', msg, desc)\n  }\n\n  [_loadObject] (obj, where, source, er = null) {\n    const conf = this.data.get(where)\n    if (conf.source) {\n      const m = `double-loading \"${where}\" configs from ${source}, ` +\n        `previously loaded from ${conf.source}`\n      throw new Error(m)\n    }\n\n    if (this.sources.has(source)) {\n      const m = `double-loading config \"${source}\" as \"${where}\", ` +\n        `previously loaded as \"${this.sources.get(source)}\"`\n      throw new Error(m)\n    }\n\n    conf.source = source\n    this.sources.set(source, where)\n    if (er) {\n      conf.loadError = er\n      if (er.code !== 'ENOENT')\n        this.log.verbose('config', `error loading ${where} config`, er)\n    } else {\n      conf.raw = obj\n      for (const [key, value] of Object.entries(obj)) {\n        const k = envReplace(key, this.env)\n        const v = this.parseField(value, k)\n        if (where !== 'default')\n          this[_checkDeprecated](k, where, obj, [key, value])\n        conf.data[k] = v\n      }\n    }\n  }\n\n  [_checkDeprecated] (key, where, obj, kv) {\n    // XXX a future npm version will make this a warning.\n    // An even more future npm version will make this an error.\n    if (this.deprecated[key]) {\n      this.log.verbose('config', key, this.deprecated[key])\n    }\n  }\n\n  // Parse a field, coercing it to the best type available.\n  parseField (f, key, listElement = false) {\n    return parseField(f, key, this, listElement)\n  }\n\n  async [_loadFile] (file, type) {\n    process.emit('time', 'config:load:file:' + file)\n    // only catch the error from readFile, not from the loadObject call\n    await readFile(file, 'utf8').then(\n      data => this[_loadObject](ini.parse(data), type, file),\n      er => this[_loadObject](null, type, file, er)\n    )\n    process.emit('timeEnd', 'config:load:file:' + file)\n  }\n\n  loadBuiltinConfig () {\n    return this[_loadFile](resolve(this.npmPath, 'npmrc'), 'builtin')\n  }\n\n  async loadProjectConfig () {\n    // the localPrefix can be set by the CLI config, but otherwise is\n    // found by walking up the folder tree\n    await this.loadLocalPrefix()\n    const projectFile = resolve(this.localPrefix, '.npmrc')\n    // if we're in the ~ directory, and there happens to be a node_modules\n    // folder (which is not TOO uncommon, it turns out), then we can end\n    // up loading the \"project\" config where the \"userconfig\" will be,\n    // which causes some calamaties.  So, we only load project config if\n    // it doesn't match what the userconfig will be.\n    if (projectFile !== this[_get]('userconfig'))\n      return this[_loadFile](projectFile, 'project')\n    else {\n      this.data.get('project').source = '(same as \"user\" config, ignored)'\n      this.sources.set(this.data.get('project').source, 'project')\n    }\n  }\n\n  async loadLocalPrefix () {\n    const cliPrefix = this[_get]('prefix', 'cli')\n    if (cliPrefix) {\n      this.localPrefix = cliPrefix\n      return\n    }\n\n    for (const p of walkUp(this.cwd)) {\n      // walk up until we have a nm dir or a pj file\n      const hasAny = (await Promise.all([\n        stat(resolve(p, 'node_modules'))\n          .then(st => st.isDirectory())\n          .catch(() => false),\n        stat(resolve(p, 'package.json'))\n          .then(st => st.isFile())\n          .catch(() => false),\n      ])).some(is => is)\n      if (hasAny) {\n        this.localPrefix = p\n        return\n      }\n    }\n\n    this.localPrefix = this.cwd\n  }\n\n  loadUserConfig () {\n    return this[_loadFile](this[_get]('userconfig'), 'user')\n  }\n\n  loadGlobalConfig () {\n    return this[_loadFile](this[_get]('globalconfig'), 'global')\n  }\n\n  async save (where) {\n    if (!this.loaded)\n      throw new Error('call config.load() before saving')\n    if (!confFileTypes.has(where))\n      throw new Error('invalid config location param: ' + where)\n    const conf = this.data.get(where)\n    conf[_raw] = { ...conf.data }\n    conf[_loadError] = null\n\n    // upgrade auth configs to more secure variants before saving\n    if (where === 'user') {\n      const reg = this.get('registry')\n      const creds = this.getCredentialsByURI(reg)\n      // we ignore this error because the failed set already removed\n      // anything that might be a security hazard, and it won't be\n      // saved back to the .npmrc file, so we're good.\n      try { this.setCredentialsByURI(reg, creds) } catch (_) {}\n    }\n\n    const iniData = ini.stringify(conf.data).trim() + '\\n'\n    if (!iniData.trim()) {\n      // ignore the unlink error (eg, if file doesn't exist)\n      await unlink(conf.source).catch(er => {})\n      return\n    }\n    const dir = dirname(conf.source)\n    await mkdirp(dir)\n    await writeFile(conf.source, iniData, 'utf8')\n    // don't leave a root-owned config file lying around\n    /* istanbul ignore if - this is best-effort and a pita to test */\n    if (myUid === 0) {\n      const st = await stat(dir).catch(() => null)\n      if (st && (st.uid !== myUid || st.gid !== myGid))\n        await chown(conf.source, st.uid, st.gid).catch(() => {})\n    }\n    const mode = where === 'user' ? 0o600 : 0o666\n    await chmod(conf.source, mode)\n  }\n\n  clearCredentialsByURI (uri) {\n    const nerfed = nerfDart(uri)\n    const def = nerfDart(this.get('registry'))\n    if (def === nerfed) {\n      // do not delete email, that shouldn't be nerfed any more.\n      // just delete the nerfed copy, if one exists.\n      this.delete(`-authtoken`, 'user')\n      this.delete(`_authToken`, 'user')\n      this.delete(`_authtoken`, 'user')\n      this.delete(`_auth`, 'user')\n      this.delete(`_password`, 'user')\n      this.delete(`username`, 'user')\n    }\n    this.delete(`${nerfed}:-authtoken`, 'user')\n    this.delete(`${nerfed}:_authtoken`, 'user')\n    this.delete(`${nerfed}:_authToken`, 'user')\n    this.delete(`${nerfed}:_auth`, 'user')\n    this.delete(`${nerfed}:_password`, 'user')\n    this.delete(`${nerfed}:username`, 'user')\n    this.delete(`${nerfed}:email`, 'user')\n  }\n\n  setCredentialsByURI (uri, { token, username, password, email }) {\n    const nerfed = nerfDart(uri)\n    const def = nerfDart(this.get('registry'))\n\n    if (def === nerfed) {\n      // remove old style auth info not limited to a single registry\n      this.delete('_password', 'user')\n      this.delete('username', 'user')\n      this.delete('_auth', 'user')\n      this.delete('_authtoken', 'user')\n      this.delete('-authtoken', 'user')\n      this.delete('_authToken', 'user')\n    }\n\n    // email used to be nerfed always.  if we're using the default\n    // registry, de-nerf it.\n    if (nerfed === def) {\n      email = email ||\n        this.get('email', 'user') ||\n        this.get(`${nerfed}:email`, 'user')\n      if (email)\n        this.set('email', email, 'user')\n    }\n\n    // field that hasn't been used as documented for a LONG time,\n    // and as of npm 7.10.0, isn't used at all.  We just always\n    // send auth if we have it, only to the URIs under the nerf dart.\n    this.delete(`${nerfed}:always-auth`, 'user')\n\n    this.delete(`${nerfed}:-authtoken`, 'user')\n    this.delete(`${nerfed}:_authtoken`, 'user')\n    this.delete(`${nerfed}:email`, 'user')\n    if (token) {\n      this.set(`${nerfed}:_authToken`, token, 'user')\n      this.delete(`${nerfed}:_password`, 'user')\n      this.delete(`${nerfed}:username`, 'user')\n    } else if (username || password) {\n      if (!username)\n        throw new Error('must include username')\n      if (!password)\n        throw new Error('must include password')\n      this.delete(`${nerfed}:_authToken`, 'user')\n      this.set(`${nerfed}:username`, username, 'user')\n      // note: not encrypted, no idea why we bothered to do this, but oh well\n      // protects against shoulder-hacks if password is memorable, I guess?\n      const encoded = Buffer.from(password, 'utf8').toString('base64')\n      this.set(`${nerfed}:_password`, encoded, 'user')\n    } else {\n      throw new Error('No credentials to set.')\n    }\n  }\n\n  // this has to be a bit more complicated to support legacy data of all forms\n  getCredentialsByURI (uri) {\n    const nerfed = nerfDart(uri)\n    const creds = {}\n\n    const email = this.get(`${nerfed}:email`) || this.get('email')\n    if (email)\n      creds.email = email\n\n    const tokenReg = this.get(`${nerfed}:_authToken`) ||\n      this.get(`${nerfed}:_authtoken`) ||\n      this.get(`${nerfed}:-authtoken`) ||\n      nerfed === nerfDart(this.get('registry')) && this.get('_authToken')\n\n    if (tokenReg) {\n      creds.token = tokenReg\n      return creds\n    }\n\n    const userReg = this.get(`${nerfed}:username`)\n    const passReg = this.get(`${nerfed}:_password`)\n    if (userReg && passReg) {\n      creds.username = userReg\n      creds.password = Buffer.from(passReg, 'base64').toString('utf8')\n      const auth = `${creds.username}:${creds.password}`\n      creds.auth = Buffer.from(auth, 'utf8').toString('base64')\n      return creds\n    }\n\n    const authReg = this.get(`${nerfed}:_auth`)\n    if (authReg) {\n      const authDecode = Buffer.from(authReg, 'base64').toString('utf8')\n      const authSplit = authDecode.split(':')\n      creds.username = authSplit.shift()\n      creds.password = authSplit.join(':')\n      creds.auth = authReg\n      return creds\n    }\n\n    // at this point, we can only use the values if the URI is the\n    // default registry.\n    const defaultNerf = nerfDart(this.get('registry'))\n    if (nerfed !== defaultNerf)\n      return creds\n\n    const userDef = this.get('username')\n    const passDef = this.get('_password')\n    if (userDef && passDef) {\n      creds.username = userDef\n      creds.password = Buffer.from(passDef, 'base64').toString('utf8')\n      const auth = `${creds.username}:${creds.password}`\n      creds.auth = Buffer.from(auth, 'utf8').toString('base64')\n      return creds\n    }\n\n    // Handle the old-style _auth=<base64> style for the default\n    // registry, if set.\n    const auth = this.get('_auth')\n    if (!auth)\n      return creds\n\n    const authDecode = Buffer.from(auth, 'base64').toString('utf8')\n    const authSplit = authDecode.split(':')\n    creds.username = authSplit.shift()\n    creds.password = authSplit.join(':')\n    creds.auth = auth\n    return creds\n  }\n\n  // set up the environment object we have with npm_config_* environs\n  // for all configs that are different from their default values, and\n  // set EDITOR and HOME.\n  setEnvs () { setEnvs(this) }\n}\n\nconst _data = Symbol('data')\nconst _raw = Symbol('raw')\nconst _loadError = Symbol('loadError')\nconst _source = Symbol('source')\nconst _valid = Symbol('valid')\nclass ConfigData {\n  constructor (parent) {\n    this[_data] = Object.create(parent && parent.data)\n    this[_source] = null\n    this[_loadError] = null\n    this[_raw] = null\n    this[_valid] = true\n  }\n\n  get data () {\n    return this[_data]\n  }\n\n  get valid () {\n    return this[_valid]\n  }\n\n  set source (s) {\n    if (this[_source])\n      throw new Error('cannot set ConfigData source more than once')\n    this[_source] = s\n  }\n  get source () { return this[_source] }\n\n  set loadError (e) {\n    if (this[_loadError] || this[_raw])\n      throw new Error('cannot set ConfigData loadError after load')\n    this[_loadError] = e\n  }\n  get loadError () { return this[_loadError] }\n\n  set raw (r) {\n    if (this[_raw] || this[_loadError])\n      throw new Error('cannot set ConfigData raw after load')\n    this[_raw] = r\n  }\n  get raw () { return this[_raw] }\n}\n\nmodule.exports = Config\n"]},"metadata":{},"sourceType":"script"}