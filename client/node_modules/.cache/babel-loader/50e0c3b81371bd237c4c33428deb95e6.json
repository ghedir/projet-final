{"ast":null,"code":"const pinflight = require('promise-inflight');\n\nconst spawn = require('./spawn.js');\n\nconst LRU = require('lru-cache');\n\nconst revsCache = new LRU({\n  max: 100,\n  maxAge: 5 * 60 * 1000\n});\n\nconst linesToRevs = require('./lines-to-revs.js');\n\nmodule.exports = async (repo, opts = {}) => {\n  if (!opts.noGitRevCache) {\n    const cached = revsCache.get(repo);\n\n    if (cached) {\n      return cached;\n    }\n  }\n\n  return pinflight(`ls-remote:${repo}`, () => spawn(['ls-remote', repo], opts).then(({\n    stdout\n  }) => linesToRevs(stdout.trim().split('\\n'))).then(revs => {\n    revsCache.set(repo, revs);\n    return revs;\n  }));\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/git/lib/revs.js"],"names":["pinflight","require","spawn","LRU","revsCache","max","maxAge","linesToRevs","module","exports","repo","opts","noGitRevCache","cached","get","then","stdout","trim","split","revs","set"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,WAAD,CAAnB;;AAEA,MAAMG,SAAS,GAAG,IAAID,GAAJ,CAAQ;AACxBE,EAAAA,GAAG,EAAE,GADmB;AAExBC,EAAAA,MAAM,EAAE,IAAI,EAAJ,GAAS;AAFO,CAAR,CAAlB;;AAKA,MAAMC,WAAW,GAAGN,OAAO,CAAC,oBAAD,CAA3B;;AAEAO,MAAM,CAACC,OAAP,GAAiB,OAAOC,IAAP,EAAaC,IAAI,GAAG,EAApB,KAA2B;AAC1C,MAAI,CAACA,IAAI,CAACC,aAAV,EAAyB;AACvB,UAAMC,MAAM,GAAGT,SAAS,CAACU,GAAV,CAAcJ,IAAd,CAAf;;AACA,QAAIG,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD;AACF;;AAED,SAAOb,SAAS,CAAE,aAAYU,IAAK,EAAnB,EAAsB,MACpCR,KAAK,CAAC,CAAC,WAAD,EAAcQ,IAAd,CAAD,EAAsBC,IAAtB,CAAL,CACGI,IADH,CACQ,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgBT,WAAW,CAACS,MAAM,CAACC,IAAP,GAAcC,KAAd,CAAoB,IAApB,CAAD,CADnC,EAEGH,IAFH,CAEQI,IAAI,IAAI;AACZf,IAAAA,SAAS,CAACgB,GAAV,CAAcV,IAAd,EAAoBS,IAApB;AACA,WAAOA,IAAP;AACD,GALH,CADc,CAAhB;AAQD,CAhBD","sourcesContent":["const pinflight = require('promise-inflight')\nconst spawn = require('./spawn.js')\nconst LRU = require('lru-cache')\n\nconst revsCache = new LRU({\n  max: 100,\n  maxAge: 5 * 60 * 1000\n})\n\nconst linesToRevs = require('./lines-to-revs.js')\n\nmodule.exports = async (repo, opts = {}) => {\n  if (!opts.noGitRevCache) {\n    const cached = revsCache.get(repo)\n    if (cached) {\n      return cached\n    }\n  }\n\n  return pinflight(`ls-remote:${repo}`, () =>\n    spawn(['ls-remote', repo], opts)\n      .then(({ stdout }) => linesToRevs(stdout.trim().split('\\n')))\n      .then(revs => {\n        revsCache.set(repo, revs)\n        return revs\n      })\n  )\n}\n"]},"metadata":{},"sourceType":"script"}