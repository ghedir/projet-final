{"ast":null,"code":"// Set environment variables for any non-default configs,\n// so that they're already there when we run lifecycle scripts.\n//\n// See https://github.com/npm/rfcs/pull/90\n// Return the env key if this is a thing that belongs in the env.\n// Ie, if the key isn't a @scope, //nerf.dart, or _private,\n// and the value is a string or array.  Otherwise return false.\nconst envKey = (key, val) => {\n  return !/^[/@_]/.test(key) && typeof envVal(val) === 'string' && `npm_config_${key.replace(/-/g, '_').toLowerCase()}`;\n};\n\nconst envVal = val => Array.isArray(val) ? val.map(v => envVal(v)).join('\\n\\n') : val === null || val === undefined || val === false ? '' : typeof val === 'object' ? null : String(val);\n\nconst sameConfigValue = (def, val) => !Array.isArray(val) || !Array.isArray(def) ? def === val : sameArrayValue(def, val);\n\nconst sameArrayValue = (def, val) => {\n  if (def.length !== val.length) return false;\n\n  for (let i = 0; i < def.length; i++) {\n    /* istanbul ignore next - there are no array configs where the default\n     * is not an empty array, so this loop is a no-op, but it's the correct\n     * thing to do if we ever DO add a config like that. */\n    if (def[i] !== val[i]) return false;\n  }\n\n  return true;\n};\n\nconst setEnv = (env, rawKey, rawVal) => {\n  const val = envVal(rawVal);\n  const key = envKey(rawKey, val);\n  if (key && val !== null) env[key] = val;\n};\n\nconst setEnvs = config => {\n  // This ensures that all npm config values that are not the defaults are\n  // shared appropriately with child processes, without false positives.\n  const {\n    globalPrefix,\n    platform,\n    env,\n    defaults,\n    definitions,\n    list: [cliConf, envConf]\n  } = config;\n  env.INIT_CWD = process.cwd(); // if the key is deprecated, skip it always.\n  // if the key is the default value,\n  //   if the environ is NOT the default value,\n  //     set the environ\n  //   else skip it, it's fine\n  // if the key is NOT the default value,\n  //   if the env is setting it, then leave it (already set)\n  //   otherwise, set the env\n\n  const cliSet = new Set(Object.keys(cliConf));\n  const envSet = new Set(Object.keys(envConf));\n\n  for (const key in cliConf) {\n    const {\n      deprecated,\n      envExport = true\n    } = definitions[key] || {};\n    if (deprecated || envExport === false) continue;\n\n    if (sameConfigValue(defaults[key], cliConf[key])) {\n      // config is the default, if the env thought different, then we\n      // have to set it BACK to the default in the environment.\n      if (!sameConfigValue(envConf[key], cliConf[key])) setEnv(env, key, cliConf[key]);\n    } else {\n      // config is not the default.  if the env wasn't the one to set\n      // it that way, then we have to put it in the env\n      if (!(envSet.has(key) && !cliSet.has(key))) setEnv(env, key, cliConf[key]);\n    }\n  } // also set some other common nice envs that we want to rely on\n\n\n  env.HOME = config.home;\n  env.npm_config_global_prefix = config.globalPrefix;\n  env.npm_config_local_prefix = config.localPrefix;\n  if (cliConf.editor) env.EDITOR = cliConf.editor; // note: this doesn't afect the *current* node process, of course, since\n  // it's already started, but it does affect the options passed to scripts.\n\n  if (cliConf['node-options']) env.NODE_OPTIONS = cliConf['node-options'];\n  if (require.main && require.main.filename) env.npm_execpath = require.main.filename;\n  env.NODE = env.npm_node_execpath = config.execPath;\n};\n\nmodule.exports = setEnvs;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/config/lib/set-envs.js"],"names":["envKey","key","val","test","envVal","replace","toLowerCase","Array","isArray","map","v","join","undefined","String","sameConfigValue","def","sameArrayValue","length","i","setEnv","env","rawKey","rawVal","setEnvs","config","globalPrefix","platform","defaults","definitions","list","cliConf","envConf","INIT_CWD","process","cwd","cliSet","Set","Object","keys","envSet","deprecated","envExport","has","HOME","home","npm_config_global_prefix","npm_config_local_prefix","localPrefix","editor","EDITOR","NODE_OPTIONS","require","main","filename","npm_execpath","NODE","npm_node_execpath","execPath","module","exports"],"mappings":"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","sourcesContent":["// Set environment variables for any non-default configs,\n// so that they're already there when we run lifecycle scripts.\n//\n// See https://github.com/npm/rfcs/pull/90\n\n// Return the env key if this is a thing that belongs in the env.\n// Ie, if the key isn't a @scope, //nerf.dart, or _private,\n// and the value is a string or array.  Otherwise return false.\nconst envKey = (key, val) => {\n  return !/^[/@_]/.test(key) &&\n    (typeof envVal(val) === 'string') &&\n      `npm_config_${key.replace(/-/g, '_').toLowerCase()}`\n}\n\nconst envVal = val => Array.isArray(val) ? val.map(v => envVal(v)).join('\\n\\n')\n  : val === null || val === undefined || val === false ? ''\n  : typeof val === 'object' ? null\n  : String(val)\n\nconst sameConfigValue = (def, val) =>\n  !Array.isArray(val) || !Array.isArray(def) ? def === val\n  : sameArrayValue(def, val)\n\nconst sameArrayValue = (def, val) => {\n  if (def.length !== val.length)\n    return false\n\n  for (let i = 0; i < def.length; i++) {\n    /* istanbul ignore next - there are no array configs where the default\n     * is not an empty array, so this loop is a no-op, but it's the correct\n     * thing to do if we ever DO add a config like that. */\n    if (def[i] !== val[i])\n      return false\n  }\n  return true\n}\n\nconst setEnv = (env, rawKey, rawVal) => {\n  const val = envVal(rawVal)\n  const key = envKey(rawKey, val)\n  if (key && val !== null)\n    env[key] = val\n}\n\nconst setEnvs = (config) => {\n  // This ensures that all npm config values that are not the defaults are\n  // shared appropriately with child processes, without false positives.\n  const {\n    globalPrefix,\n    platform,\n    env,\n    defaults,\n    definitions,\n    list: [cliConf, envConf],\n  } = config\n\n  env.INIT_CWD = process.cwd()\n\n  // if the key is deprecated, skip it always.\n  // if the key is the default value,\n  //   if the environ is NOT the default value,\n  //     set the environ\n  //   else skip it, it's fine\n  // if the key is NOT the default value,\n  //   if the env is setting it, then leave it (already set)\n  //   otherwise, set the env\n  const cliSet = new Set(Object.keys(cliConf))\n  const envSet = new Set(Object.keys(envConf))\n  for (const key in cliConf) {\n    const { deprecated, envExport = true } = definitions[key] || {}\n    if (deprecated || envExport === false)\n      continue\n\n    if (sameConfigValue(defaults[key], cliConf[key])) {\n      // config is the default, if the env thought different, then we\n      // have to set it BACK to the default in the environment.\n      if (!sameConfigValue(envConf[key], cliConf[key]))\n        setEnv(env, key, cliConf[key])\n    } else {\n      // config is not the default.  if the env wasn't the one to set\n      // it that way, then we have to put it in the env\n      if (!(envSet.has(key) && !cliSet.has(key)))\n        setEnv(env, key, cliConf[key])\n    }\n  }\n\n  // also set some other common nice envs that we want to rely on\n  env.HOME = config.home\n  env.npm_config_global_prefix = config.globalPrefix\n  env.npm_config_local_prefix = config.localPrefix\n  if (cliConf.editor)\n    env.EDITOR = cliConf.editor\n\n  // note: this doesn't afect the *current* node process, of course, since\n  // it's already started, but it does affect the options passed to scripts.\n  if (cliConf['node-options'])\n    env.NODE_OPTIONS = cliConf['node-options']\n\n  if (require.main && require.main.filename)\n    env.npm_execpath = require.main.filename\n  env.NODE = env.npm_node_execpath = config.execPath\n}\n\nmodule.exports = setEnvs\n"]},"metadata":{},"sourceType":"script"}