{"ast":null,"code":"const {\n  spawn\n} = require('child_process');\n\nconst path = require('path');\n\nconst openUrl = require('./utils/open-url.js');\n\nconst {\n  promisify\n} = require('util');\n\nconst glob = promisify(require('glob'));\n\nconst localeCompare = require('@isaacs/string-locale-compare')('en');\n\nconst BaseCommand = require('./base-command.js'); // Strips out the number from foo.7 or foo.7. or foo.7.tgz\n// We don't currently compress our man pages but if we ever did this would\n// seemlessly continue supporting it\n\n\nconst manNumberRegex = /\\.(\\d+)(\\.[^/\\\\]*)?$/;\n\nclass Help extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Get help on npm';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'help';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['<term> [<terms..>]'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['viewer'];\n  }\n\n  async completion(opts) {\n    if (opts.conf.argv.remain.length > 2) return [];\n    const g = path.resolve(__dirname, '../man/man[0-9]/*.[0-9]');\n    const files = await glob(g);\n    return Object.keys(files.reduce(function (acc, file) {\n      file = path.basename(file).replace(/\\.[0-9]+$/, '');\n      file = file.replace(/^npm-/, '');\n      acc[file] = true;\n      return acc;\n    }, {\n      help: true\n    }));\n  }\n\n  exec(args, cb) {\n    this.help(args).then(() => cb()).catch(cb);\n  }\n\n  async help(args) {\n    // By default we search all of our man subdirectories, but if the user has\n    // asked for a specific one we limit the search to just there\n    let manSearch = 'man*';\n    if (/^\\d+$/.test(args[0])) manSearch = `man${args.shift()}`;\n    if (!args.length) return this.npm.output(this.npm.usage); // npm help foo bar baz: search topics\n\n    if (args.length > 1) return this.helpSearch(args);\n    let section = this.npm.deref(args[0]) || args[0]; // support `npm help package.json`\n\n    section = section.replace('.json', '-json');\n    const manroot = path.resolve(__dirname, '..', 'man'); // find either section.n or npm-section.n\n\n    const f = `${manroot}/${manSearch}/?(npm-)${section}.[0-9]*`;\n    let mans = await glob(f);\n    mans = mans.sort((a, b) => {\n      // Because of the glob we know the manNumberRegex will pass\n      const aManNumber = a.match(manNumberRegex)[1];\n      const bManNumber = b.match(manNumberRegex)[1]; // man number sort first so that 1 aka commands are preferred\n\n      if (aManNumber !== bManNumber) return aManNumber - bManNumber;\n      return localeCompare(a, b);\n    });\n    const man = mans[0];\n    if (man) await this.viewMan(man);else return this.helpSearch(args);\n  }\n\n  helpSearch(args) {\n    return new Promise((resolve, reject) => {\n      this.npm.commands['help-search'](args, err => {\n        // This would only error if args was empty, which it never is\n\n        /* istanbul ignore next */\n        if (err) return reject(err);\n        resolve();\n      });\n    });\n  }\n\n  async viewMan(man) {\n    const env = {};\n    Object.keys(process.env).forEach(function (i) {\n      env[i] = process.env[i];\n    });\n    const viewer = this.npm.config.get('viewer');\n    const opts = {\n      env,\n      stdio: 'inherit'\n    };\n    let bin = 'man';\n    const args = [];\n\n    switch (viewer) {\n      case 'woman':\n        bin = 'emacsclient';\n        args.push('-e', `(woman-find-file '${man}')`);\n        break;\n\n      case 'browser':\n        await openUrl(this.npm, this.htmlMan(man), 'help available at the following URL');\n        return;\n\n      default:\n        args.push(man);\n        break;\n    }\n\n    const proc = spawn(bin, args, opts);\n    return new Promise((resolve, reject) => {\n      proc.on('exit', code => {\n        if (code) return reject(new Error(`help process exited with code: ${code}`));\n        return resolve();\n      });\n    });\n  } // Returns the path to the html version of the man page\n\n\n  htmlMan(man) {\n    let sect = man.match(manNumberRegex)[1];\n    const f = path.basename(man).replace(manNumberRegex, '');\n\n    switch (sect) {\n      case '1':\n        sect = 'commands';\n        break;\n\n      case '5':\n        sect = 'configuring-npm';\n        break;\n\n      case '7':\n        sect = 'using-npm';\n        break;\n    }\n\n    return 'file://' + path.resolve(__dirname, '..', 'docs', 'output', sect, f + '.html');\n  }\n\n}\n\nmodule.exports = Help;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/help.js"],"names":["spawn","require","path","openUrl","promisify","glob","localeCompare","BaseCommand","manNumberRegex","Help","description","name","usage","params","completion","opts","conf","argv","remain","length","g","resolve","__dirname","files","Object","keys","reduce","acc","file","basename","replace","help","exec","args","cb","then","catch","manSearch","test","shift","npm","output","helpSearch","section","deref","manroot","f","mans","sort","a","b","aManNumber","match","bManNumber","man","viewMan","Promise","reject","commands","err","env","process","forEach","i","viewer","config","get","stdio","bin","push","htmlMan","proc","on","code","Error","sect","module","exports"],"mappings":"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","sourcesContent":["const { spawn } = require('child_process')\nconst path = require('path')\nconst openUrl = require('./utils/open-url.js')\nconst { promisify } = require('util')\nconst glob = promisify(require('glob'))\nconst localeCompare = require('@isaacs/string-locale-compare')('en')\n\nconst BaseCommand = require('./base-command.js')\n\n// Strips out the number from foo.7 or foo.7. or foo.7.tgz\n// We don't currently compress our man pages but if we ever did this would\n// seemlessly continue supporting it\nconst manNumberRegex = /\\.(\\d+)(\\.[^/\\\\]*)?$/\n\nclass Help extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Get help on npm'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'help'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<term> [<terms..>]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['viewer']\n  }\n\n  async completion (opts) {\n    if (opts.conf.argv.remain.length > 2)\n      return []\n    const g = path.resolve(__dirname, '../man/man[0-9]/*.[0-9]')\n    const files = await glob(g)\n\n    return Object.keys(files.reduce(function (acc, file) {\n      file = path.basename(file).replace(/\\.[0-9]+$/, '')\n      file = file.replace(/^npm-/, '')\n      acc[file] = true\n      return acc\n    }, { help: true }))\n  }\n\n  exec (args, cb) {\n    this.help(args).then(() => cb()).catch(cb)\n  }\n\n  async help (args) {\n    // By default we search all of our man subdirectories, but if the user has\n    // asked for a specific one we limit the search to just there\n    let manSearch = 'man*'\n    if (/^\\d+$/.test(args[0]))\n      manSearch = `man${args.shift()}`\n\n    if (!args.length)\n      return this.npm.output(this.npm.usage)\n\n    // npm help foo bar baz: search topics\n    if (args.length > 1)\n      return this.helpSearch(args)\n\n    let section = this.npm.deref(args[0]) || args[0]\n\n    // support `npm help package.json`\n    section = section.replace('.json', '-json')\n\n    const manroot = path.resolve(__dirname, '..', 'man')\n    // find either section.n or npm-section.n\n    const f = `${manroot}/${manSearch}/?(npm-)${section}.[0-9]*`\n    let mans = await glob(f)\n    mans = mans.sort((a, b) => {\n      // Because of the glob we know the manNumberRegex will pass\n      const aManNumber = a.match(manNumberRegex)[1]\n      const bManNumber = b.match(manNumberRegex)[1]\n\n      // man number sort first so that 1 aka commands are preferred\n      if (aManNumber !== bManNumber)\n        return aManNumber - bManNumber\n\n      return localeCompare(a, b)\n    })\n    const man = mans[0]\n\n    if (man)\n      await this.viewMan(man)\n    else\n      return this.helpSearch(args)\n  }\n\n  helpSearch (args) {\n    return new Promise((resolve, reject) => {\n      this.npm.commands['help-search'](args, (err) => {\n        // This would only error if args was empty, which it never is\n        /* istanbul ignore next */\n        if (err)\n          return reject(err)\n\n        resolve()\n      })\n    })\n  }\n\n  async viewMan (man) {\n    const env = {}\n    Object.keys(process.env).forEach(function (i) {\n      env[i] = process.env[i]\n    })\n    const viewer = this.npm.config.get('viewer')\n\n    const opts = {\n      env,\n      stdio: 'inherit',\n    }\n\n    let bin = 'man'\n    const args = []\n    switch (viewer) {\n      case 'woman':\n        bin = 'emacsclient'\n        args.push('-e', `(woman-find-file '${man}')`)\n        break\n\n      case 'browser':\n        await openUrl(this.npm, this.htmlMan(man), 'help available at the following URL')\n        return\n\n      default:\n        args.push(man)\n        break\n    }\n\n    const proc = spawn(bin, args, opts)\n    return new Promise((resolve, reject) => {\n      proc.on('exit', (code) => {\n        if (code)\n          return reject(new Error(`help process exited with code: ${code}`))\n\n        return resolve()\n      })\n    })\n  }\n\n  // Returns the path to the html version of the man page\n  htmlMan (man) {\n    let sect = man.match(manNumberRegex)[1]\n    const f = path.basename(man).replace(manNumberRegex, '')\n    switch (sect) {\n      case '1':\n        sect = 'commands'\n        break\n      case '5':\n        sect = 'configuring-npm'\n        break\n      case '7':\n        sect = 'using-npm'\n        break\n    }\n    return 'file://' + path.resolve(__dirname, '..', 'docs', 'output', sect, f + '.html')\n  }\n}\nmodule.exports = Help\n"]},"metadata":{},"sourceType":"script"}