{"ast":null,"code":"const {\n  resolve\n} = require('path');\n\nconst mapWorkspaces = require('@npmcli/map-workspaces');\n\nconst minimatch = require('minimatch');\n\nconst rpj = require('read-package-json-fast'); // Returns an Map of paths to workspaces indexed by workspace name\n// { foo => '/path/to/foo' }\n\n\nconst getWorkspaces = async (filters, {\n  path\n}) => {\n  // TODO we need a better error to be bubbled up here if this rpj call fails\n  const pkg = await rpj(resolve(path, 'package.json'));\n  const workspaces = await mapWorkspaces({\n    cwd: path,\n    pkg\n  });\n  const res = filters.length ? new Map() : workspaces;\n\n  for (const filterArg of filters) {\n    for (const [workspaceName, workspacePath] of workspaces.entries()) {\n      if (filterArg === workspaceName || resolve(path, filterArg) === workspacePath || minimatch(workspacePath, `${resolve(path, filterArg)}/*`)) res.set(workspaceName, workspacePath);\n    }\n  }\n\n  if (!res.size) {\n    let msg = '!';\n\n    if (filters.length) {\n      msg = `:\\n ${filters.reduce((res, filterArg) => `${res} --workspace=${filterArg}`, '')}`;\n    }\n\n    throw new Error(`No workspaces found${msg}`);\n  }\n\n  return res;\n};\n\nmodule.exports = getWorkspaces;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/workspaces/get-workspaces.js"],"names":["resolve","require","mapWorkspaces","minimatch","rpj","getWorkspaces","filters","path","pkg","workspaces","cwd","res","length","Map","filterArg","workspaceName","workspacePath","entries","set","size","msg","reduce","Error","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAC,MAAD,CAA3B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,wBAAD,CAA7B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,wBAAD,CAAnB,C,CAEA;AACA;;;AACA,MAAMI,aAAa,GAAG,OAAOC,OAAP,EAAgB;AAAEC,EAAAA;AAAF,CAAhB,KAA6B;AACjD;AACA,QAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACJ,OAAO,CAACO,IAAD,EAAO,cAAP,CAAR,CAArB;AACA,QAAME,UAAU,GAAG,MAAMP,aAAa,CAAC;AAAEQ,IAAAA,GAAG,EAAEH,IAAP;AAAaC,IAAAA;AAAb,GAAD,CAAtC;AACA,QAAMG,GAAG,GAAGL,OAAO,CAACM,MAAR,GAAiB,IAAIC,GAAJ,EAAjB,GAA6BJ,UAAzC;;AAEA,OAAK,MAAMK,SAAX,IAAwBR,OAAxB,EAAiC;AAC/B,SAAK,MAAM,CAACS,aAAD,EAAgBC,aAAhB,CAAX,IAA6CP,UAAU,CAACQ,OAAX,EAA7C,EAAmE;AACjE,UAAIH,SAAS,KAAKC,aAAd,IACCf,OAAO,CAACO,IAAD,EAAOO,SAAP,CAAP,KAA6BE,aAD9B,IAECb,SAAS,CAACa,aAAD,EAAiB,GAAEhB,OAAO,CAACO,IAAD,EAAOO,SAAP,CAAkB,IAA5C,CAFd,EAGEH,GAAG,CAACO,GAAJ,CAAQH,aAAR,EAAuBC,aAAvB;AACH;AACF;;AAED,MAAI,CAACL,GAAG,CAACQ,IAAT,EAAe;AACb,QAAIC,GAAG,GAAG,GAAV;;AACA,QAAId,OAAO,CAACM,MAAZ,EAAoB;AAClBQ,MAAAA,GAAG,GAAI,OAAMd,OAAO,CAACe,MAAR,CACX,CAACV,GAAD,EAAMG,SAAN,KAAqB,GAAEH,GAAI,gBAAeG,SAAU,EADzC,EAC4C,EAD5C,CACgD,EAD7D;AAED;;AAED,UAAM,IAAIQ,KAAJ,CAAW,sBAAqBF,GAAI,EAApC,CAAN;AACD;;AAED,SAAOT,GAAP;AACD,CA1BD;;AA4BAY,MAAM,CAACC,OAAP,GAAiBnB,aAAjB","sourcesContent":["const { resolve } = require('path')\nconst mapWorkspaces = require('@npmcli/map-workspaces')\nconst minimatch = require('minimatch')\nconst rpj = require('read-package-json-fast')\n\n// Returns an Map of paths to workspaces indexed by workspace name\n// { foo => '/path/to/foo' }\nconst getWorkspaces = async (filters, { path }) => {\n  // TODO we need a better error to be bubbled up here if this rpj call fails\n  const pkg = await rpj(resolve(path, 'package.json'))\n  const workspaces = await mapWorkspaces({ cwd: path, pkg })\n  const res = filters.length ? new Map() : workspaces\n\n  for (const filterArg of filters) {\n    for (const [workspaceName, workspacePath] of workspaces.entries()) {\n      if (filterArg === workspaceName\n        || resolve(path, filterArg) === workspacePath\n        || minimatch(workspacePath, `${resolve(path, filterArg)}/*`))\n        res.set(workspaceName, workspacePath)\n    }\n  }\n\n  if (!res.size) {\n    let msg = '!'\n    if (filters.length) {\n      msg = `:\\n ${filters.reduce(\n        (res, filterArg) => `${res} --workspace=${filterArg}`, '')}`\n    }\n\n    throw new Error(`No workspaces found${msg}`)\n  }\n\n  return res\n}\n\nmodule.exports = getWorkspaces\n"]},"metadata":{},"sourceType":"script"}