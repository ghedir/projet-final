{"ast":null,"code":"// npm edit <pkg>\n// open the package folder in the $EDITOR\nconst {\n  resolve\n} = require('path');\n\nconst fs = require('graceful-fs');\n\nconst {\n  spawn\n} = require('child_process');\n\nconst splitPackageNames = require('./utils/split-package-names.js');\n\nconst completion = require('./utils/completion/installed-shallow.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Edit extends BaseCommand {\n  static get description() {\n    return 'Edit an installed package';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'edit';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['<pkg>[/<subpkg>...]'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['editor'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n\n  exec(args, cb) {\n    this.edit(args).then(() => cb()).catch(cb);\n  }\n\n  async edit(args) {\n    if (args.length !== 1) throw new Error(this.usage);\n    const path = splitPackageNames(args[0]);\n    const dir = resolve(this.npm.dir, path); // graceful-fs does not promisify\n\n    await new Promise((resolve, reject) => {\n      fs.lstat(dir, err => {\n        if (err) return reject(err);\n        const [bin, ...args] = this.npm.config.get('editor').split(/\\s+/);\n        const editor = spawn(bin, [...args, dir], {\n          stdio: 'inherit'\n        });\n        editor.on('exit', code => {\n          if (code) return reject(new Error(`editor process exited with code: ${code}`));\n          this.npm.commands.rebuild([dir], err => {\n            if (err) return reject(err);\n            resolve();\n          });\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = Edit;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/edit.js"],"names":["resolve","require","fs","spawn","splitPackageNames","completion","BaseCommand","Edit","description","name","usage","params","opts","npm","exec","args","cb","edit","then","catch","length","Error","path","dir","Promise","reject","lstat","err","bin","config","get","split","editor","stdio","on","code","commands","rebuild","module","exports"],"mappings":"AAAA;AACA;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAC,MAAD,CAA3B;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAYF,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAAjC;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,yCAAD,CAA1B;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,mBAAD,CAA3B;;AAEA,MAAMM,IAAN,SAAmBD,WAAnB,CAA+B;AACP,aAAXE,WAAW,GAAI;AACxB,WAAO,2BAAP;AACD;AAED;;;AACe,aAAJC,IAAI,GAAI;AACjB,WAAO,MAAP;AACD;AAED;;;AACgB,aAALC,KAAK,GAAI;AAClB,WAAO,CAAC,qBAAD,CAAP;AACD;AAED;;;AACiB,aAANC,MAAM,GAAI;AACnB,WAAO,CAAC,QAAD,CAAP;AACD;AAED;;;AACgB,QAAVN,UAAU,CAAEO,IAAF,EAAQ;AACtB,WAAOP,UAAU,CAAC,KAAKQ,GAAN,EAAWD,IAAX,CAAjB;AACD;;AAEDE,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,IAAL,CAAUF,IAAV,EAAgBG,IAAhB,CAAqB,MAAMF,EAAE,EAA7B,EAAiCG,KAAjC,CAAuCH,EAAvC;AACD;;AAES,QAAJC,IAAI,CAAEF,IAAF,EAAQ;AAChB,QAAIA,IAAI,CAACK,MAAL,KAAgB,CAApB,EACE,MAAM,IAAIC,KAAJ,CAAU,KAAKX,KAAf,CAAN;AAEF,UAAMY,IAAI,GAAGlB,iBAAiB,CAACW,IAAI,CAAC,CAAD,CAAL,CAA9B;AACA,UAAMQ,GAAG,GAAGvB,OAAO,CAAC,KAAKa,GAAL,CAASU,GAAV,EAAeD,IAAf,CAAnB,CALgB,CAOhB;;AACA,UAAM,IAAIE,OAAJ,CAAY,CAACxB,OAAD,EAAUyB,MAAV,KAAqB;AACrCvB,MAAAA,EAAE,CAACwB,KAAH,CAASH,GAAT,EAAeI,GAAD,IAAS;AACrB,YAAIA,GAAJ,EACE,OAAOF,MAAM,CAACE,GAAD,CAAb;AACF,cAAM,CAACC,GAAD,EAAM,GAAGb,IAAT,IAAiB,KAAKF,GAAL,CAASgB,MAAT,CAAgBC,GAAhB,CAAoB,QAApB,EAA8BC,KAA9B,CAAoC,KAApC,CAAvB;AACA,cAAMC,MAAM,GAAG7B,KAAK,CAACyB,GAAD,EAAM,CAAC,GAAGb,IAAJ,EAAUQ,GAAV,CAAN,EAAsB;AAAEU,UAAAA,KAAK,EAAE;AAAT,SAAtB,CAApB;AACAD,QAAAA,MAAM,CAACE,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAU;AAC1B,cAAIA,IAAJ,EACE,OAAOV,MAAM,CAAC,IAAIJ,KAAJ,CAAW,oCAAmCc,IAAK,EAAnD,CAAD,CAAb;AACF,eAAKtB,GAAL,CAASuB,QAAT,CAAkBC,OAAlB,CAA0B,CAACd,GAAD,CAA1B,EAAkCI,GAAD,IAAS;AACxC,gBAAIA,GAAJ,EACE,OAAOF,MAAM,CAACE,GAAD,CAAb;AAEF3B,YAAAA,OAAO;AACR,WALD;AAMD,SATD;AAUD,OAfD;AAgBD,KAjBK,CAAN;AAkBD;;AAvD4B;;AAyD/BsC,MAAM,CAACC,OAAP,GAAiBhC,IAAjB","sourcesContent":["// npm edit <pkg>\n// open the package folder in the $EDITOR\n\nconst { resolve } = require('path')\nconst fs = require('graceful-fs')\nconst { spawn } = require('child_process')\nconst splitPackageNames = require('./utils/split-package-names.js')\nconst completion = require('./utils/completion/installed-shallow.js')\nconst BaseCommand = require('./base-command.js')\n\nclass Edit extends BaseCommand {\n  static get description () {\n    return 'Edit an installed package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'edit'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<pkg>[/<subpkg>...]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['editor']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  exec (args, cb) {\n    this.edit(args).then(() => cb()).catch(cb)\n  }\n\n  async edit (args) {\n    if (args.length !== 1)\n      throw new Error(this.usage)\n\n    const path = splitPackageNames(args[0])\n    const dir = resolve(this.npm.dir, path)\n\n    // graceful-fs does not promisify\n    await new Promise((resolve, reject) => {\n      fs.lstat(dir, (err) => {\n        if (err)\n          return reject(err)\n        const [bin, ...args] = this.npm.config.get('editor').split(/\\s+/)\n        const editor = spawn(bin, [...args, dir], { stdio: 'inherit' })\n        editor.on('exit', (code) => {\n          if (code)\n            return reject(new Error(`editor process exited with code: ${code}`))\n          this.npm.commands.rebuild([dir], (err) => {\n            if (err)\n              return reject(err)\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n}\nmodule.exports = Edit\n"]},"metadata":{},"sourceType":"script"}