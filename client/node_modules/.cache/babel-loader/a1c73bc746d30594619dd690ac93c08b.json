{"ast":null,"code":"const log = require('npmlog');\n\nconst profile = require('npm-profile');\n\nconst openUrl = require('../utils/open-url.js');\n\nconst read = require('../utils/read-user-info.js');\n\nconst loginPrompter = async creds => {\n  const opts = {\n    log: log\n  };\n  creds.username = await read.username('Username:', creds.username, opts);\n  creds.password = await read.password('Password:', creds.password);\n  creds.email = await read.email('Email: (this IS public) ', creds.email, opts);\n  return creds;\n};\n\nconst login = async (npm, opts) => {\n  let res;\n\n  const requestOTP = async () => {\n    const otp = await read.otp('Enter one-time password from your authenticator app: ');\n    return profile.loginCouch(opts.creds.username, opts.creds.password, { ...opts,\n      otp\n    });\n  };\n\n  const addNewUser = async () => {\n    let newUser;\n\n    try {\n      newUser = await profile.adduserCouch(opts.creds.username, opts.creds.email, opts.creds.password, opts);\n    } catch (err) {\n      if (err.code === 'EOTP') newUser = await requestOTP();else throw err;\n    }\n\n    return newUser;\n  };\n\n  const openerPromise = url => openUrl(npm, url, 'to complete your login please visit');\n\n  try {\n    res = await profile.login(openerPromise, loginPrompter, opts);\n  } catch (err) {\n    const needsMoreInfo = !(opts && opts.creds && opts.creds.username && opts.creds.password && opts.creds.email);\n    if (err.code === 'EOTP') res = await requestOTP();else if (needsMoreInfo) throw err;else {\n      // TODO: maybe this needs to check for err.code === 'E400' instead?\n      res = await addNewUser();\n    }\n  }\n\n  const newCreds = {};\n  if (res && res.token) newCreds.token = res.token;else {\n    newCreds.username = opts.creds.username;\n    newCreds.password = opts.creds.password;\n    newCreds.email = opts.creds.email;\n    newCreds.alwaysAuth = opts.creds.alwaysAuth;\n  }\n  const usermsg = opts.creds.username ? ` user ${opts.creds.username}` : '';\n  const scopeMessage = opts.scope ? ` to scope ${opts.scope}` : '';\n  const userout = opts.creds.username ? ` as ${opts.creds.username}` : '';\n  const message = `Logged in${userout}${scopeMessage} on ${opts.registry}.`;\n  log.info('login', `Authorized${usermsg}`);\n  return {\n    message,\n    newCreds\n  };\n};\n\nmodule.exports = login;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/auth/legacy.js"],"names":["log","require","profile","openUrl","read","loginPrompter","creds","opts","username","password","email","login","npm","res","requestOTP","otp","loginCouch","addNewUser","newUser","adduserCouch","err","code","openerPromise","url","needsMoreInfo","newCreds","token","alwaysAuth","usermsg","scopeMessage","scope","userout","message","registry","info","module","exports"],"mappings":"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","sourcesContent":["const log = require('npmlog')\nconst profile = require('npm-profile')\n\nconst openUrl = require('../utils/open-url.js')\nconst read = require('../utils/read-user-info.js')\n\nconst loginPrompter = async (creds) => {\n  const opts = { log: log }\n\n  creds.username = await read.username('Username:', creds.username, opts)\n  creds.password = await read.password('Password:', creds.password)\n  creds.email = await read.email('Email: (this IS public) ', creds.email, opts)\n\n  return creds\n}\n\nconst login = async (npm, opts) => {\n  let res\n\n  const requestOTP = async () => {\n    const otp = await read.otp(\n      'Enter one-time password from your authenticator app: '\n    )\n\n    return profile.loginCouch(\n      opts.creds.username,\n      opts.creds.password,\n      { ...opts, otp }\n    )\n  }\n\n  const addNewUser = async () => {\n    let newUser\n\n    try {\n      newUser = await profile.adduserCouch(\n        opts.creds.username,\n        opts.creds.email,\n        opts.creds.password,\n        opts\n      )\n    } catch (err) {\n      if (err.code === 'EOTP')\n        newUser = await requestOTP()\n      else\n        throw err\n    }\n\n    return newUser\n  }\n\n  const openerPromise = (url) => openUrl(npm, url, 'to complete your login please visit')\n  try {\n    res = await profile.login(openerPromise, loginPrompter, opts)\n  } catch (err) {\n    const needsMoreInfo = !(opts &&\n      opts.creds &&\n      opts.creds.username &&\n      opts.creds.password &&\n      opts.creds.email)\n    if (err.code === 'EOTP')\n      res = await requestOTP()\n    else if (needsMoreInfo)\n      throw err\n    else {\n      // TODO: maybe this needs to check for err.code === 'E400' instead?\n      res = await addNewUser()\n    }\n  }\n\n  const newCreds = {}\n  if (res && res.token)\n    newCreds.token = res.token\n  else {\n    newCreds.username = opts.creds.username\n    newCreds.password = opts.creds.password\n    newCreds.email = opts.creds.email\n    newCreds.alwaysAuth = opts.creds.alwaysAuth\n  }\n\n  const usermsg = opts.creds.username ? ` user ${opts.creds.username}` : ''\n  const scopeMessage = opts.scope ? ` to scope ${opts.scope}` : ''\n  const userout = opts.creds.username ? ` as ${opts.creds.username}` : ''\n  const message = `Logged in${userout}${scopeMessage} on ${opts.registry}.`\n\n  log.info('login', `Authorized${usermsg}`)\n\n  return {\n    message,\n    newCreds,\n  }\n}\n\nmodule.exports = login\n"]},"metadata":{},"sourceType":"script"}