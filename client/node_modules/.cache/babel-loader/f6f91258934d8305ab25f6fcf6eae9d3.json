{"ast":null,"code":"// mixin implementing the audit method\nconst AuditReport = require('../audit-report.js'); // shared with reify\n\n\nconst _global = Symbol.for('global');\n\nconst _workspaces = Symbol.for('workspaces');\n\nmodule.exports = cls => class Auditor extends cls {\n  async audit(options = {}) {\n    this.addTracker('audit');\n\n    if (this[_global]) {\n      throw Object.assign(new Error('`npm audit` does not support testing globals'), {\n        code: 'EAUDITGLOBAL'\n      });\n    } // allow the user to set options on the ctor as well.\n    // XXX: deprecate separate method options objects.\n\n\n    options = { ...this.options,\n      ...options\n    };\n    process.emit('time', 'audit');\n    const tree = await this.loadVirtual();\n\n    if (this[_workspaces] && this[_workspaces].length) {\n      options.filterSet = this.workspaceDependencySet(tree, this[_workspaces]);\n    }\n\n    this.auditReport = await AuditReport.load(tree, options);\n    const ret = options.fix ? this.reify(options) : this.auditReport;\n    process.emit('timeEnd', 'audit');\n    this.finishTracker('audit');\n    return ret;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/arborist/lib/arborist/audit.js"],"names":["AuditReport","require","_global","Symbol","for","_workspaces","module","exports","cls","Auditor","audit","options","addTracker","Object","assign","Error","code","process","emit","tree","loadVirtual","length","filterSet","workspaceDependencySet","auditReport","load","ret","fix","reify","finishTracker"],"mappings":"AAAA;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B,C,CAEA;;;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,GAAP,CAAW,QAAX,CAAhB;;AACA,MAAMC,WAAW,GAAGF,MAAM,CAACC,GAAP,CAAW,YAAX,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,GAAG,IAAI,MAAMC,OAAN,SAAsBD,GAAtB,CAA0B;AACrC,QAALE,KAAK,CAAEC,OAAO,GAAG,EAAZ,EAAgB;AACzB,SAAKC,UAAL,CAAgB,OAAhB;;AACA,QAAI,KAAKV,OAAL,CAAJ,EAAmB;AACjB,YAAMW,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,CAAU,8CAAV,CADI,EAEJ;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAFI,CAAN;AAID,KAPwB,CASzB;AACA;;;AACAL,IAAAA,OAAO,GAAG,EAAE,GAAG,KAAKA,OAAV;AAAmB,SAAGA;AAAtB,KAAV;AAEAM,IAAAA,OAAO,CAACC,IAAR,CAAa,MAAb,EAAqB,OAArB;AACA,UAAMC,IAAI,GAAG,MAAM,KAAKC,WAAL,EAAnB;;AACA,QAAI,KAAKf,WAAL,KAAqB,KAAKA,WAAL,EAAkBgB,MAA3C,EAAmD;AACjDV,MAAAA,OAAO,CAACW,SAAR,GAAoB,KAAKC,sBAAL,CAA4BJ,IAA5B,EAAkC,KAAKd,WAAL,CAAlC,CAApB;AACD;;AACD,SAAKmB,WAAL,GAAmB,MAAMxB,WAAW,CAACyB,IAAZ,CAAiBN,IAAjB,EAAuBR,OAAvB,CAAzB;AACA,UAAMe,GAAG,GAAGf,OAAO,CAACgB,GAAR,GAAc,KAAKC,KAAL,CAAWjB,OAAX,CAAd,GAAoC,KAAKa,WAArD;AACAP,IAAAA,OAAO,CAACC,IAAR,CAAa,SAAb,EAAwB,OAAxB;AACA,SAAKW,aAAL,CAAmB,OAAnB;AACA,WAAOH,GAAP;AACD;;AAxB+C,CAAlD","sourcesContent":["// mixin implementing the audit method\n\nconst AuditReport = require('../audit-report.js')\n\n// shared with reify\nconst _global = Symbol.for('global')\nconst _workspaces = Symbol.for('workspaces')\n\nmodule.exports = cls => class Auditor extends cls {\n  async audit (options = {}) {\n    this.addTracker('audit')\n    if (this[_global]) {\n      throw Object.assign(\n        new Error('`npm audit` does not support testing globals'),\n        { code: 'EAUDITGLOBAL' }\n      )\n    }\n\n    // allow the user to set options on the ctor as well.\n    // XXX: deprecate separate method options objects.\n    options = { ...this.options, ...options }\n\n    process.emit('time', 'audit')\n    const tree = await this.loadVirtual()\n    if (this[_workspaces] && this[_workspaces].length) {\n      options.filterSet = this.workspaceDependencySet(tree, this[_workspaces])\n    }\n    this.auditReport = await AuditReport.load(tree, options)\n    const ret = options.fix ? this.reify(options) : this.auditReport\n    process.emit('timeEnd', 'audit')\n    this.finishTracker('audit')\n    return ret\n  }\n}\n"]},"metadata":{},"sourceType":"script"}