{"ast":null,"code":"const util = require('util');\n\nconst log = require('npmlog');\n\nconst pacote = require('pacote');\n\nconst libpack = require('libnpmpack');\n\nconst npa = require('npm-package-arg');\n\nconst path = require('path');\n\nconst {\n  getContents,\n  logTar\n} = require('./utils/tar.js');\n\nconst writeFile = util.promisify(require('fs').writeFile);\n\nconst BaseCommand = require('./base-command.js');\n\nclass Pack extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Create a tarball from a package';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'pack';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['dry-run', 'json', 'pack-destination', 'workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[[<@scope>/]<pkg>...]'];\n  }\n\n  exec(args, cb) {\n    this.pack(args).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.packWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async pack(args) {\n    if (args.length === 0) args = ['.'];\n    const unicode = this.npm.config.get('unicode');\n    const dryRun = this.npm.config.get('dry-run');\n    const json = this.npm.config.get('json'); // Get the manifests and filenames first so we can bail early on manifest\n    // errors before making any tarballs\n\n    const manifests = [];\n\n    for (const arg of args) {\n      const spec = npa(arg);\n      const manifest = await pacote.manifest(spec, this.npm.flatOptions);\n      if (!manifest._id) throw new Error('Invalid package, must have name and version');\n      const filename = `${manifest.name}-${manifest.version}.tgz`.replace(/^@/, '').replace(/\\//, '-');\n      manifests.push({\n        arg,\n        filename,\n        manifest\n      });\n    } // Load tarball names up for printing afterward to isolate from the\n    // noise generated during packing\n\n\n    const tarballs = [];\n\n    for (const {\n      arg,\n      filename,\n      manifest\n    } of manifests) {\n      const tarballData = await libpack(arg, this.npm.flatOptions);\n      const pkgContents = await getContents(manifest, tarballData);\n      const tarballFilename = path.resolve(this.npm.config.get('pack-destination'), filename);\n      if (!dryRun) await writeFile(tarballFilename, tarballData);\n      tarballs.push(pkgContents);\n    }\n\n    if (json) {\n      this.npm.output(JSON.stringify(tarballs, null, 2));\n      return;\n    }\n\n    for (const tar of tarballs) {\n      logTar(tar, {\n        log,\n        unicode\n      });\n      this.npm.output(tar.filename.replace(/^@/, '').replace(/\\//, '-'));\n    }\n  }\n\n  async packWorkspaces(args, filters) {\n    // If they either ask for nothing, or explicitly include '.' in the args,\n    // we effectively translate that into each workspace requested\n    const useWorkspaces = args.length === 0 || args.includes('.');\n\n    if (!useWorkspaces) {\n      this.npm.log.warn('Ignoring workspaces for specified package(s)');\n      return this.pack(args);\n    }\n\n    await this.setWorkspaces(filters);\n    return this.pack([...this.workspacePaths, ...args.filter(a => a !== '.')]);\n  }\n\n}\n\nmodule.exports = Pack;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/pack.js"],"names":["util","require","log","pacote","libpack","npa","path","getContents","logTar","writeFile","promisify","BaseCommand","Pack","description","name","params","usage","exec","args","cb","pack","then","catch","execWorkspaces","filters","packWorkspaces","length","unicode","npm","config","get","dryRun","json","manifests","arg","spec","manifest","flatOptions","_id","Error","filename","version","replace","push","tarballs","tarballData","pkgContents","tarballFilename","resolve","output","JSON","stringify","tar","useWorkspaces","includes","warn","setWorkspaces","workspacePaths","filter","a","module","exports"],"mappings":"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","sourcesContent":["const util = require('util')\nconst log = require('npmlog')\nconst pacote = require('pacote')\nconst libpack = require('libnpmpack')\nconst npa = require('npm-package-arg')\nconst path = require('path')\n\nconst { getContents, logTar } = require('./utils/tar.js')\n\nconst writeFile = util.promisify(require('fs').writeFile)\n\nconst BaseCommand = require('./base-command.js')\n\nclass Pack extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Create a tarball from a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'pack'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'dry-run',\n      'json',\n      'pack-destination',\n      'workspace',\n      'workspaces',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[[<@scope>/]<pkg>...]']\n  }\n\n  exec (args, cb) {\n    this.pack(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.packWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async pack (args) {\n    if (args.length === 0)\n      args = ['.']\n\n    const unicode = this.npm.config.get('unicode')\n    const dryRun = this.npm.config.get('dry-run')\n    const json = this.npm.config.get('json')\n\n    // Get the manifests and filenames first so we can bail early on manifest\n    // errors before making any tarballs\n    const manifests = []\n    for (const arg of args) {\n      const spec = npa(arg)\n      const manifest = await pacote.manifest(spec, this.npm.flatOptions)\n      if (!manifest._id)\n        throw new Error('Invalid package, must have name and version')\n\n      const filename = `${manifest.name}-${manifest.version}.tgz`\n        .replace(/^@/, '').replace(/\\//, '-')\n      manifests.push({ arg, filename, manifest })\n    }\n\n    // Load tarball names up for printing afterward to isolate from the\n    // noise generated during packing\n    const tarballs = []\n    for (const { arg, filename, manifest } of manifests) {\n      const tarballData = await libpack(arg, this.npm.flatOptions)\n      const pkgContents = await getContents(manifest, tarballData)\n      const tarballFilename = path.resolve(this.npm.config.get('pack-destination'), filename)\n\n      if (!dryRun)\n        await writeFile(tarballFilename, tarballData)\n\n      tarballs.push(pkgContents)\n    }\n\n    if (json) {\n      this.npm.output(JSON.stringify(tarballs, null, 2))\n      return\n    }\n\n    for (const tar of tarballs) {\n      logTar(tar, { log, unicode })\n      this.npm.output(tar.filename.replace(/^@/, '').replace(/\\//, '-'))\n    }\n  }\n\n  async packWorkspaces (args, filters) {\n    // If they either ask for nothing, or explicitly include '.' in the args,\n    // we effectively translate that into each workspace requested\n\n    const useWorkspaces = args.length === 0 || args.includes('.')\n\n    if (!useWorkspaces) {\n      this.npm.log.warn('Ignoring workspaces for specified package(s)')\n      return this.pack(args)\n    }\n\n    await this.setWorkspaces(filters)\n    return this.pack([...this.workspacePaths, ...args.filter(a => a !== '.')])\n  }\n}\nmodule.exports = Pack\n"]},"metadata":{},"sourceType":"script"}