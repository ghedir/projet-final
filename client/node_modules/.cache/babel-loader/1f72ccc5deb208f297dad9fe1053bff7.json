{"ast":null,"code":"const path = require('path');\n\nconst util = require('util');\n\nconst npa = require('npm-package-arg');\n\nconst libaccess = require('libnpmaccess');\n\nconst npmFetch = require('npm-registry-fetch');\n\nconst libunpub = require('libnpmpublish').unpublish;\n\nconst readJson = util.promisify(require('read-package-json'));\n\nconst otplease = require('./utils/otplease.js');\n\nconst getIdentity = require('./utils/get-identity.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Unpublish extends BaseCommand {\n  static get description() {\n    return 'Remove a package from the registry';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'unpublish';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['dry-run', 'force', 'workspace', 'workspaces'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<@scope>/]<pkg>[@<version>]'];\n  }\n\n  async completion(args) {\n    const {\n      partialWord,\n      conf\n    } = args;\n    if (conf.argv.remain.length >= 3) return [];\n    const opts = this.npm.flatOptions;\n    const username = await getIdentity(this.npm, { ...opts\n    }).catch(() => null);\n    if (!username) return [];\n    const access = await libaccess.lsPackages(username, opts); // do a bit of filtering at this point, so that we don't need\n    // to fetch versions for more than one thing, but also don't\n    // accidentally unpublish a whole project\n\n    let pkgs = Object.keys(access || {});\n    if (!partialWord || !pkgs.length) return pkgs;\n    const pp = npa(partialWord).name;\n    pkgs = pkgs.filter(p => !p.indexOf(pp));\n    if (pkgs.length > 1) return pkgs;\n    const json = await npmFetch.json(npa(pkgs[0]).escapedName, opts);\n    const versions = Object.keys(json.versions);\n    if (!versions.length) return pkgs;else return versions.map(v => `${pkgs[0]}@${v}`);\n  }\n\n  exec(args, cb) {\n    this.unpublish(args).then(() => cb()).catch(cb);\n  }\n\n  execWorkspaces(args, filters, cb) {\n    this.unpublishWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  async unpublish(args) {\n    if (args.length > 1) throw this.usageError();\n    const spec = args.length && npa(args[0]);\n    const force = this.npm.config.get('force');\n    const loglevel = this.npm.config.get('loglevel');\n    const silent = loglevel === 'silent';\n    const dryRun = this.npm.config.get('dry-run');\n    let pkgName;\n    let pkgVersion;\n    this.npm.log.silly('unpublish', 'args[0]', args[0]);\n    this.npm.log.silly('unpublish', 'spec', spec);\n\n    if ((!spec || !spec.rawSpec) && !force) {\n      throw this.usageError('Refusing to delete entire project.\\n' + 'Run with --force to do this.');\n    }\n\n    const opts = this.npm.flatOptions;\n\n    if (!spec || path.resolve(spec.name) === this.npm.localPrefix) {\n      // if there's a package.json in the current folder, then\n      // read the package name and version out of that.\n      const pkgJson = path.join(this.npm.localPrefix, 'package.json');\n      let manifest;\n\n      try {\n        manifest = await readJson(pkgJson);\n      } catch (err) {\n        if (err && err.code !== 'ENOENT' && err.code !== 'ENOTDIR') throw err;else throw this.usageError();\n      }\n\n      this.npm.log.verbose('unpublish', manifest);\n      const {\n        name,\n        version,\n        publishConfig\n      } = manifest;\n      const pkgJsonSpec = npa.resolve(name, version);\n      const optsWithPub = { ...opts,\n        publishConfig\n      };\n      if (!dryRun) await otplease(opts, opts => libunpub(pkgJsonSpec, optsWithPub));\n      pkgName = name;\n      pkgVersion = version ? `@${version}` : '';\n    } else {\n      if (!dryRun) await otplease(opts, opts => libunpub(spec, opts));\n      pkgName = spec.name;\n      pkgVersion = spec.type === 'version' ? `@${spec.rawSpec}` : '';\n    }\n\n    if (!silent) this.npm.output(`- ${pkgName}${pkgVersion}`);\n  }\n\n  async unpublishWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n    const force = this.npm.config.get('force');\n\n    if (!force) {\n      throw this.usageError('Refusing to delete entire project(s).\\n' + 'Run with --force to do this.');\n    }\n\n    for (const name of this.workspaceNames) await this.unpublish([name]);\n  }\n\n}\n\nmodule.exports = Unpublish;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/unpublish.js"],"names":["path","require","util","npa","libaccess","npmFetch","libunpub","unpublish","readJson","promisify","otplease","getIdentity","BaseCommand","Unpublish","description","name","params","usage","completion","args","partialWord","conf","argv","remain","length","opts","npm","flatOptions","username","catch","access","lsPackages","pkgs","Object","keys","pp","filter","p","indexOf","json","escapedName","versions","map","v","exec","cb","then","execWorkspaces","filters","unpublishWorkspaces","usageError","spec","force","config","get","loglevel","silent","dryRun","pkgName","pkgVersion","log","silly","rawSpec","resolve","localPrefix","pkgJson","join","manifest","err","code","verbose","version","publishConfig","pkgJsonSpec","optsWithPub","type","output","setWorkspaces","workspaceNames","module","exports"],"mappings":"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","sourcesContent":["const path = require('path')\nconst util = require('util')\nconst npa = require('npm-package-arg')\nconst libaccess = require('libnpmaccess')\nconst npmFetch = require('npm-registry-fetch')\nconst libunpub = require('libnpmpublish').unpublish\nconst readJson = util.promisify(require('read-package-json'))\n\nconst otplease = require('./utils/otplease.js')\nconst getIdentity = require('./utils/get-identity.js')\n\nconst BaseCommand = require('./base-command.js')\nclass Unpublish extends BaseCommand {\n  static get description () {\n    return 'Remove a package from the registry'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'unpublish'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['dry-run', 'force', 'workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<@scope>/]<pkg>[@<version>]']\n  }\n\n  async completion (args) {\n    const { partialWord, conf } = args\n\n    if (conf.argv.remain.length >= 3)\n      return []\n\n    const opts = this.npm.flatOptions\n    const username = await getIdentity(this.npm, { ...opts }).catch(() => null)\n    if (!username)\n      return []\n\n    const access = await libaccess.lsPackages(username, opts)\n    // do a bit of filtering at this point, so that we don't need\n    // to fetch versions for more than one thing, but also don't\n    // accidentally unpublish a whole project\n    let pkgs = Object.keys(access || {})\n    if (!partialWord || !pkgs.length)\n      return pkgs\n\n    const pp = npa(partialWord).name\n    pkgs = pkgs.filter(p => !p.indexOf(pp))\n    if (pkgs.length > 1)\n      return pkgs\n\n    const json = await npmFetch.json(npa(pkgs[0]).escapedName, opts)\n    const versions = Object.keys(json.versions)\n    if (!versions.length)\n      return pkgs\n    else\n      return versions.map(v => `${pkgs[0]}@${v}`)\n  }\n\n  exec (args, cb) {\n    this.unpublish(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.unpublishWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async unpublish (args) {\n    if (args.length > 1)\n      throw this.usageError()\n\n    const spec = args.length && npa(args[0])\n    const force = this.npm.config.get('force')\n    const loglevel = this.npm.config.get('loglevel')\n    const silent = loglevel === 'silent'\n    const dryRun = this.npm.config.get('dry-run')\n    let pkgName\n    let pkgVersion\n\n    this.npm.log.silly('unpublish', 'args[0]', args[0])\n    this.npm.log.silly('unpublish', 'spec', spec)\n\n    if ((!spec || !spec.rawSpec) && !force) {\n      throw this.usageError(\n        'Refusing to delete entire project.\\n' +\n        'Run with --force to do this.'\n      )\n    }\n\n    const opts = this.npm.flatOptions\n    if (!spec || path.resolve(spec.name) === this.npm.localPrefix) {\n      // if there's a package.json in the current folder, then\n      // read the package name and version out of that.\n      const pkgJson = path.join(this.npm.localPrefix, 'package.json')\n      let manifest\n      try {\n        manifest = await readJson(pkgJson)\n      } catch (err) {\n        if (err && err.code !== 'ENOENT' && err.code !== 'ENOTDIR')\n          throw err\n        else\n          throw this.usageError()\n      }\n\n      this.npm.log.verbose('unpublish', manifest)\n\n      const { name, version, publishConfig } = manifest\n      const pkgJsonSpec = npa.resolve(name, version)\n      const optsWithPub = { ...opts, publishConfig }\n      if (!dryRun)\n        await otplease(opts, opts => libunpub(pkgJsonSpec, optsWithPub))\n      pkgName = name\n      pkgVersion = version ? `@${version}` : ''\n    } else {\n      if (!dryRun)\n        await otplease(opts, opts => libunpub(spec, opts))\n      pkgName = spec.name\n      pkgVersion = spec.type === 'version' ? `@${spec.rawSpec}` : ''\n    }\n\n    if (!silent)\n      this.npm.output(`- ${pkgName}${pkgVersion}`)\n  }\n\n  async unpublishWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n\n    const force = this.npm.config.get('force')\n    if (!force) {\n      throw this.usageError(\n        'Refusing to delete entire project(s).\\n' +\n        'Run with --force to do this.'\n      )\n    }\n\n    for (const name of this.workspaceNames)\n      await this.unpublish([name])\n  }\n}\nmodule.exports = Unpublish\n"]},"metadata":{},"sourceType":"script"}