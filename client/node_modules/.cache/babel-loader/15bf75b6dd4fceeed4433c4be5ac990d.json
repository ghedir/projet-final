{"ast":null,"code":"// Base class for npm.commands[cmd]\nconst usageUtil = require('./utils/usage.js');\n\nconst ConfigDefinitions = require('./utils/config/definitions.js');\n\nconst getWorkspaces = require('./workspaces/get-workspaces.js');\n\nclass BaseCommand {\n  constructor(npm) {\n    this.wrapWidth = 80;\n    this.npm = npm;\n    this.workspaces = null;\n    this.workspacePaths = null;\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n\n  get description() {\n    return this.constructor.description;\n  }\n\n  get usage() {\n    let usage = `npm ${this.constructor.name}\\n\\n`;\n    if (this.constructor.description) usage = `${usage}${this.constructor.description}\\n\\n`;\n    usage = `${usage}Usage:\\n`;\n    if (!this.constructor.usage) usage = `${usage}npm ${this.constructor.name}`;else usage = `${usage}${this.constructor.usage.map(u => `npm ${this.constructor.name} ${u}`).join('\\n')}`;\n    if (this.constructor.params) usage = `${usage}\\n\\nOptions:\\n${this.wrappedParams}`; // Mostly this just appends aliases, this could be more clear\n\n    usage = usageUtil(this.constructor.name, usage);\n    usage = `${usage}\\n\\nRun \"npm help ${this.constructor.name}\" for more info`;\n    return usage;\n  }\n\n  get wrappedParams() {\n    let results = '';\n    let line = '';\n\n    for (const param of this.constructor.params) {\n      const usage = `[${ConfigDefinitions[param].usage}]`;\n\n      if (line.length && line.length + usage.length > this.wrapWidth) {\n        results = [results, line].filter(Boolean).join('\\n');\n        line = '';\n      }\n\n      line = [line, usage].filter(Boolean).join(' ');\n    }\n\n    results = [results, line].filter(Boolean).join('\\n');\n    return results;\n  }\n\n  usageError(msg) {\n    if (!msg) {\n      return Object.assign(new Error(`\\nUsage: ${this.usage}`), {\n        code: 'EUSAGE'\n      });\n    }\n\n    return Object.assign(new Error(`\\nUsage: ${msg}\\n\\n${this.usage}`), {\n      code: 'EUSAGE'\n    });\n  }\n\n  execWorkspaces(args, filters, cb) {\n    throw Object.assign(new Error('This command does not support workspaces.'), {\n      code: 'ENOWORKSPACES'\n    });\n  }\n\n  async setWorkspaces(filters) {\n    const ws = await getWorkspaces(filters, {\n      path: this.npm.localPrefix\n    });\n    this.workspaces = ws;\n    this.workspaceNames = [...ws.keys()];\n    this.workspacePaths = [...ws.values()];\n  }\n\n}\n\nmodule.exports = BaseCommand;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/base-command.js"],"names":["usageUtil","require","ConfigDefinitions","getWorkspaces","BaseCommand","constructor","npm","wrapWidth","workspaces","workspacePaths","name","description","usage","map","u","join","params","wrappedParams","results","line","param","length","filter","Boolean","usageError","msg","Object","assign","Error","code","execWorkspaces","args","filters","cb","setWorkspaces","ws","path","localPrefix","workspaceNames","keys","values","module","exports"],"mappings":"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","sourcesContent":["// Base class for npm.commands[cmd]\nconst usageUtil = require('./utils/usage.js')\nconst ConfigDefinitions = require('./utils/config/definitions.js')\nconst getWorkspaces = require('./workspaces/get-workspaces.js')\n\nclass BaseCommand {\n  constructor (npm) {\n    this.wrapWidth = 80\n    this.npm = npm\n    this.workspaces = null\n    this.workspacePaths = null\n  }\n\n  get name () {\n    return this.constructor.name\n  }\n\n  get description () {\n    return this.constructor.description\n  }\n\n  get usage () {\n    let usage = `npm ${this.constructor.name}\\n\\n`\n    if (this.constructor.description)\n      usage = `${usage}${this.constructor.description}\\n\\n`\n\n    usage = `${usage}Usage:\\n`\n    if (!this.constructor.usage)\n      usage = `${usage}npm ${this.constructor.name}`\n    else\n      usage = `${usage}${this.constructor.usage.map(u => `npm ${this.constructor.name} ${u}`).join('\\n')}`\n\n    if (this.constructor.params)\n      usage = `${usage}\\n\\nOptions:\\n${this.wrappedParams}`\n\n    // Mostly this just appends aliases, this could be more clear\n    usage = usageUtil(this.constructor.name, usage)\n    usage = `${usage}\\n\\nRun \"npm help ${this.constructor.name}\" for more info`\n    return usage\n  }\n\n  get wrappedParams () {\n    let results = ''\n    let line = ''\n\n    for (const param of this.constructor.params) {\n      const usage = `[${ConfigDefinitions[param].usage}]`\n      if (line.length && (line.length + usage.length) > this.wrapWidth) {\n        results = [results, line].filter(Boolean).join('\\n')\n        line = ''\n      }\n      line = [line, usage].filter(Boolean).join(' ')\n    }\n    results = [results, line].filter(Boolean).join('\\n')\n    return results\n  }\n\n  usageError (msg) {\n    if (!msg) {\n      return Object.assign(new Error(`\\nUsage: ${this.usage}`), {\n        code: 'EUSAGE',\n      })\n    }\n\n    return Object.assign(new Error(`\\nUsage: ${msg}\\n\\n${this.usage}`), {\n      code: 'EUSAGE',\n    })\n  }\n\n  execWorkspaces (args, filters, cb) {\n    throw Object.assign(\n      new Error('This command does not support workspaces.'),\n      { code: 'ENOWORKSPACES' }\n    )\n  }\n\n  async setWorkspaces (filters) {\n    const ws = await getWorkspaces(filters, { path: this.npm.localPrefix })\n    this.workspaces = ws\n    this.workspaceNames = [...ws.keys()]\n    this.workspacePaths = [...ws.values()]\n  }\n}\nmodule.exports = BaseCommand\n"]},"metadata":{},"sourceType":"script"}