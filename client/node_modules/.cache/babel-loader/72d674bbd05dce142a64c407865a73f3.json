{"ast":null,"code":"const validateOptions = options => {\n  if (typeof options !== 'object' || !options) throw new TypeError('invalid options object provided to runScript');\n  const {\n    event,\n    path,\n    scriptShell,\n    env = {},\n    stdio = 'pipe',\n    args = [],\n    cmd\n  } = options;\n  if (!event || typeof event !== 'string') throw new TypeError('valid event not provided to runScript');\n  if (!path || typeof path !== 'string') throw new TypeError('valid path not provided to runScript');\n  if (scriptShell !== undefined && typeof scriptShell !== 'string') throw new TypeError('invalid scriptShell option provided to runScript');\n  if (typeof env !== 'object' || !env) throw new TypeError('invalid env option provided to runScript');\n  if (typeof stdio !== 'string' && !Array.isArray(stdio)) throw new TypeError('invalid stdio option provided to runScript');\n  if (!Array.isArray(args) || args.some(a => typeof a !== 'string')) throw new TypeError('invalid args option provided to runScript');\n  if (cmd !== undefined && typeof cmd !== 'string') throw new TypeError('invalid cmd option provided to runScript');\n};\n\nmodule.exports = validateOptions;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/run-script/lib/validate-options.js"],"names":["validateOptions","options","TypeError","event","path","scriptShell","env","stdio","args","cmd","undefined","Array","isArray","some","a","module","exports"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,IAAI;AACjC,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAACA,OAApC,EACE,MAAM,IAAIC,SAAJ,CAAc,8CAAd,CAAN;AAEF,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,GAAG,GAAG,EAJF;AAKJC,IAAAA,KAAK,GAAG,MALJ;AAMJC,IAAAA,IAAI,GAAG,EANH;AAOJC,IAAAA;AAPI,MAQFR,OARJ;AAUA,MAAI,CAACE,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EACE,MAAM,IAAID,SAAJ,CAAc,uCAAd,CAAN;AACF,MAAI,CAACE,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EACE,MAAM,IAAIF,SAAJ,CAAc,sCAAd,CAAN;AACF,MAAIG,WAAW,KAAKK,SAAhB,IAA6B,OAAOL,WAAP,KAAuB,QAAxD,EACE,MAAM,IAAIH,SAAJ,CAAc,kDAAd,CAAN;AACF,MAAI,OAAOI,GAAP,KAAe,QAAf,IAA2B,CAACA,GAAhC,EACE,MAAM,IAAIJ,SAAJ,CAAc,0CAAd,CAAN;AACF,MAAI,OAAOK,KAAP,KAAiB,QAAjB,IAA6B,CAACI,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAlC,EACE,MAAM,IAAIL,SAAJ,CAAc,4CAAd,CAAN;AACF,MAAI,CAACS,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAD,IAAwBA,IAAI,CAACK,IAAL,CAAUC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAA5B,CAA5B,EACE,MAAM,IAAIZ,SAAJ,CAAc,2CAAd,CAAN;AACF,MAAIO,GAAG,KAAKC,SAAR,IAAqB,OAAOD,GAAP,KAAe,QAAxC,EACE,MAAM,IAAIP,SAAJ,CAAc,0CAAd,CAAN;AACH,CA5BD;;AA8BAa,MAAM,CAACC,OAAP,GAAiBhB,eAAjB","sourcesContent":["const validateOptions = options => {\n  if (typeof options !== 'object' || !options)\n    throw new TypeError('invalid options object provided to runScript')\n\n  const {\n    event,\n    path,\n    scriptShell,\n    env = {},\n    stdio = 'pipe',\n    args = [],\n    cmd,\n  } = options\n\n  if (!event || typeof event !== 'string')\n    throw new TypeError('valid event not provided to runScript')\n  if (!path || typeof path !== 'string')\n    throw new TypeError('valid path not provided to runScript')\n  if (scriptShell !== undefined && typeof scriptShell !== 'string')\n    throw new TypeError('invalid scriptShell option provided to runScript')\n  if (typeof env !== 'object' || !env)\n    throw new TypeError('invalid env option provided to runScript')\n  if (typeof stdio !== 'string' && !Array.isArray(stdio))\n    throw new TypeError('invalid stdio option provided to runScript')\n  if (!Array.isArray(args) || args.some(a => typeof a !== 'string'))\n    throw new TypeError('invalid args option provided to runScript')\n  if (cmd !== undefined && typeof cmd !== 'string')\n    throw new TypeError('invalid cmd option provided to runScript')\n}\n\nmodule.exports = validateOptions\n"]},"metadata":{},"sourceType":"script"}