{"ast":null,"code":"const log = require('npmlog');\n\nconst pacote = require('pacote');\n\nconst openUrl = require('./utils/open-url.js');\n\nconst hostedFromMani = require('./utils/hosted-git-info-from-manifest.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Bugs extends BaseCommand {\n  static get description() {\n    return 'Report bugs for a package in a web browser';\n  }\n\n  static get name() {\n    return 'bugs';\n  }\n\n  static get usage() {\n    return ['[<pkgname>]'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['browser', 'registry'];\n  }\n\n  exec(args, cb) {\n    this.bugs(args).then(() => cb()).catch(cb);\n  }\n\n  async bugs(args) {\n    if (!args || !args.length) args = ['.'];\n    await Promise.all(args.map(pkg => this.getBugs(pkg)));\n  }\n\n  async getBugs(pkg) {\n    const opts = { ...this.npm.flatOptions,\n      fullMetadata: true\n    };\n    const mani = await pacote.manifest(pkg, opts);\n    const url = this.getBugsUrl(mani);\n    log.silly('bugs', 'url', url);\n    await openUrl(this.npm, url, `${mani.name} bug list available at the following URL`);\n  }\n\n  getBugsUrl(mani) {\n    if (mani.bugs) {\n      if (typeof mani.bugs === 'string') return mani.bugs;\n      if (typeof mani.bugs === 'object' && mani.bugs.url) return mani.bugs.url;\n      if (typeof mani.bugs === 'object' && mani.bugs.email) return `mailto:${mani.bugs.email}`;\n    } // try to get it from the repo, if possible\n\n\n    const info = hostedFromMani(mani);\n    if (info) return info.bugs(); // just send them to the website, hopefully that has some info!\n\n    return `https://www.npmjs.com/package/${mani.name}`;\n  }\n\n}\n\nmodule.exports = Bugs;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/bugs.js"],"names":["log","require","pacote","openUrl","hostedFromMani","BaseCommand","Bugs","description","name","usage","params","exec","args","cb","bugs","then","catch","length","Promise","all","map","pkg","getBugs","opts","npm","flatOptions","fullMetadata","mani","manifest","url","getBugsUrl","silly","email","info","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,0CAAD,CAA9B;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,mBAAD,CAA3B;;AAEA,MAAMK,IAAN,SAAmBD,WAAnB,CAA+B;AACP,aAAXE,WAAW,GAAI;AACxB,WAAO,4CAAP;AACD;;AAEc,aAAJC,IAAI,GAAI;AACjB,WAAO,MAAP;AACD;;AAEe,aAALC,KAAK,GAAI;AAClB,WAAO,CAAC,aAAD,CAAP;AACD;AAED;;;AACiB,aAANC,MAAM,GAAI;AACnB,WAAO,CAAC,SAAD,EAAY,UAAZ,CAAP;AACD;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,IAAL,CAAUF,IAAV,EAAgBG,IAAhB,CAAqB,MAAMF,EAAE,EAA7B,EAAiCG,KAAjC,CAAuCH,EAAvC;AACD;;AAES,QAAJC,IAAI,CAAEF,IAAF,EAAQ;AAChB,QAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACK,MAAnB,EACEL,IAAI,GAAG,CAAC,GAAD,CAAP;AAEF,UAAMM,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACQ,GAAL,CAASC,GAAG,IAAI,KAAKC,OAAL,CAAaD,GAAb,CAAhB,CAAZ,CAAN;AACD;;AAEY,QAAPC,OAAO,CAAED,GAAF,EAAO;AAClB,UAAME,IAAI,GAAG,EAAE,GAAG,KAAKC,GAAL,CAASC,WAAd;AAA2BC,MAAAA,YAAY,EAAE;AAAzC,KAAb;AACA,UAAMC,IAAI,GAAG,MAAMzB,MAAM,CAAC0B,QAAP,CAAgBP,GAAhB,EAAqBE,IAArB,CAAnB;AACA,UAAMM,GAAG,GAAG,KAAKC,UAAL,CAAgBH,IAAhB,CAAZ;AACA3B,IAAAA,GAAG,CAAC+B,KAAJ,CAAU,MAAV,EAAkB,KAAlB,EAAyBF,GAAzB;AACA,UAAM1B,OAAO,CAAC,KAAKqB,GAAN,EAAWK,GAAX,EAAiB,GAAEF,IAAI,CAACnB,IAAK,0CAA7B,CAAb;AACD;;AAEDsB,EAAAA,UAAU,CAAEH,IAAF,EAAQ;AAChB,QAAIA,IAAI,CAACb,IAAT,EAAe;AACb,UAAI,OAAOa,IAAI,CAACb,IAAZ,KAAqB,QAAzB,EACE,OAAOa,IAAI,CAACb,IAAZ;AAEF,UAAI,OAAOa,IAAI,CAACb,IAAZ,KAAqB,QAArB,IAAiCa,IAAI,CAACb,IAAL,CAAUe,GAA/C,EACE,OAAOF,IAAI,CAACb,IAAL,CAAUe,GAAjB;AAEF,UAAI,OAAOF,IAAI,CAACb,IAAZ,KAAqB,QAArB,IAAiCa,IAAI,CAACb,IAAL,CAAUkB,KAA/C,EACE,OAAQ,UAASL,IAAI,CAACb,IAAL,CAAUkB,KAAM,EAAjC;AACH,KAVe,CAYhB;;;AACA,UAAMC,IAAI,GAAG7B,cAAc,CAACuB,IAAD,CAA3B;AACA,QAAIM,IAAJ,EACE,OAAOA,IAAI,CAACnB,IAAL,EAAP,CAfc,CAiBhB;;AACA,WAAQ,iCAAgCa,IAAI,CAACnB,IAAK,EAAlD;AACD;;AAxD4B;;AA2D/B0B,MAAM,CAACC,OAAP,GAAiB7B,IAAjB","sourcesContent":["const log = require('npmlog')\nconst pacote = require('pacote')\nconst openUrl = require('./utils/open-url.js')\nconst hostedFromMani = require('./utils/hosted-git-info-from-manifest.js')\nconst BaseCommand = require('./base-command.js')\n\nclass Bugs extends BaseCommand {\n  static get description () {\n    return 'Report bugs for a package in a web browser'\n  }\n\n  static get name () {\n    return 'bugs'\n  }\n\n  static get usage () {\n    return ['[<pkgname>]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['browser', 'registry']\n  }\n\n  exec (args, cb) {\n    this.bugs(args).then(() => cb()).catch(cb)\n  }\n\n  async bugs (args) {\n    if (!args || !args.length)\n      args = ['.']\n\n    await Promise.all(args.map(pkg => this.getBugs(pkg)))\n  }\n\n  async getBugs (pkg) {\n    const opts = { ...this.npm.flatOptions, fullMetadata: true }\n    const mani = await pacote.manifest(pkg, opts)\n    const url = this.getBugsUrl(mani)\n    log.silly('bugs', 'url', url)\n    await openUrl(this.npm, url, `${mani.name} bug list available at the following URL`)\n  }\n\n  getBugsUrl (mani) {\n    if (mani.bugs) {\n      if (typeof mani.bugs === 'string')\n        return mani.bugs\n\n      if (typeof mani.bugs === 'object' && mani.bugs.url)\n        return mani.bugs.url\n\n      if (typeof mani.bugs === 'object' && mani.bugs.email)\n        return `mailto:${mani.bugs.email}`\n    }\n\n    // try to get it from the repo, if possible\n    const info = hostedFromMani(mani)\n    if (info)\n      return info.bugs()\n\n    // just send them to the website, hopefully that has some info!\n    return `https://www.npmjs.com/package/${mani.name}`\n  }\n}\n\nmodule.exports = Bugs\n"]},"metadata":{},"sourceType":"script"}