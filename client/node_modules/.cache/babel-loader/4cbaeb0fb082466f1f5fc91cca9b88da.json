{"ast":null,"code":"const log = require('npmlog');\n\nconst fetch = require('npm-registry-fetch');\n\nconst getIdentity = require('./utils/get-identity.js');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Stars extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'View packages marked as favorites';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'stars';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[<user>]'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['registry'];\n  }\n\n  exec(args, cb) {\n    this.stars(args).then(() => cb()).catch(er => {\n      if (er.code === 'ENEEDAUTH') log.warn('stars', 'auth is required to look up your username');\n      cb(er);\n    });\n  }\n\n  async stars([user]) {\n    if (!user) user = await getIdentity(this.npm, this.npm.flatOptions);\n    const {\n      rows\n    } = await fetch.json('/-/_view/starredByUser', { ...this.npm.flatOptions,\n      query: {\n        key: `\"${user}\"`\n      }\n    });\n    if (rows.length === 0) log.warn('stars', 'user has not starred any packages');\n\n    for (const row of rows) this.npm.output(row.value);\n  }\n\n}\n\nmodule.exports = Stars;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/stars.js"],"names":["log","require","fetch","getIdentity","BaseCommand","Stars","description","name","usage","params","exec","args","cb","stars","then","catch","er","code","warn","user","npm","flatOptions","rows","json","query","key","length","row","output","value","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AAEA,MAAME,WAAW,GAAGF,OAAO,CAAC,yBAAD,CAA3B;;AAEA,MAAMG,WAAW,GAAGH,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAMI,KAAN,SAAoBD,WAApB,CAAgC;AAC9B;AACsB,aAAXE,WAAW,GAAI;AACxB,WAAO,mCAAP;AACD;AAED;;;AACe,aAAJC,IAAI,GAAI;AACjB,WAAO,OAAP;AACD;AAED;;;AACgB,aAALC,KAAK,GAAI;AAClB,WAAO,CAAC,UAAD,CAAP;AACD;AAED;;;AACiB,aAANC,MAAM,GAAI;AACnB,WAAO,CACL,UADK,CAAP;AAGD;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,KAAL,CAAWF,IAAX,EAAiBG,IAAjB,CAAsB,MAAMF,EAAE,EAA9B,EAAkCG,KAAlC,CAAwCC,EAAE,IAAI;AAC5C,UAAIA,EAAE,CAACC,IAAH,KAAY,WAAhB,EACEjB,GAAG,CAACkB,IAAJ,CAAS,OAAT,EAAkB,2CAAlB;AACFN,MAAAA,EAAE,CAACI,EAAD,CAAF;AACD,KAJD;AAKD;;AAEU,QAALH,KAAK,CAAE,CAACM,IAAD,CAAF,EAAU;AACnB,QAAI,CAACA,IAAL,EACEA,IAAI,GAAG,MAAMhB,WAAW,CAAC,KAAKiB,GAAN,EAAW,KAAKA,GAAL,CAASC,WAApB,CAAxB;AAEF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,IAAN,CAAW,wBAAX,EAAqC,EAC1D,GAAG,KAAKH,GAAL,CAASC,WAD8C;AAE1DG,MAAAA,KAAK,EAAE;AAAEC,QAAAA,GAAG,EAAG,IAAGN,IAAK;AAAhB;AAFmD,KAArC,CAAvB;AAKA,QAAIG,IAAI,CAACI,MAAL,KAAgB,CAApB,EACE1B,GAAG,CAACkB,IAAJ,CAAS,OAAT,EAAkB,mCAAlB;;AAEF,SAAK,MAAMS,GAAX,IAAkBL,IAAlB,EACE,KAAKF,GAAL,CAASQ,MAAT,CAAgBD,GAAG,CAACE,KAApB;AACH;;AA7C6B;;AA+ChCC,MAAM,CAACC,OAAP,GAAiB1B,KAAjB","sourcesContent":["const log = require('npmlog')\nconst fetch = require('npm-registry-fetch')\n\nconst getIdentity = require('./utils/get-identity.js')\n\nconst BaseCommand = require('./base-command.js')\nclass Stars extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'View packages marked as favorites'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'stars'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<user>]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'registry',\n    ]\n  }\n\n  exec (args, cb) {\n    this.stars(args).then(() => cb()).catch(er => {\n      if (er.code === 'ENEEDAUTH')\n        log.warn('stars', 'auth is required to look up your username')\n      cb(er)\n    })\n  }\n\n  async stars ([user]) {\n    if (!user)\n      user = await getIdentity(this.npm, this.npm.flatOptions)\n\n    const { rows } = await fetch.json('/-/_view/starredByUser', {\n      ...this.npm.flatOptions,\n      query: { key: `\"${user}\"` },\n    })\n\n    if (rows.length === 0)\n      log.warn('stars', 'user has not starred any packages')\n\n    for (const row of rows)\n      this.npm.output(row.value)\n  }\n}\nmodule.exports = Stars\n"]},"metadata":{},"sourceType":"script"}