{"ast":null,"code":"const liborg = require('libnpmorg');\n\nconst otplease = require('./utils/otplease.js');\n\nconst Table = require('cli-table3');\n\nconst BaseCommand = require('./base-command.js');\n\nclass Org extends BaseCommand {\n  static get description() {\n    return 'Manage orgs';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'org';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['set orgname username [developer | admin | owner]', 'rm orgname username', 'ls orgname [<username>]'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['registry', 'otp', 'json', 'parseable'];\n  }\n\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n    if (argv.length === 2) return ['set', 'rm', 'ls'];\n\n    switch (argv[2]) {\n      case 'ls':\n      case 'add':\n      case 'rm':\n      case 'set':\n        return [];\n\n      default:\n        throw new Error(argv[2] + ' not recognized');\n    }\n  }\n\n  exec(args, cb) {\n    this.org(args).then(x => cb(null, x)).catch(err => err.code === 'EUSAGE' ? cb(err.message) : cb(err));\n  }\n\n  async org([cmd, orgname, username, role], cb) {\n    return otplease(this.npm.flatOptions, opts => {\n      switch (cmd) {\n        case 'add':\n        case 'set':\n          return this.set(orgname, username, role, opts);\n\n        case 'rm':\n          return this.rm(orgname, username, opts);\n\n        case 'ls':\n          return this.ls(orgname, username, opts);\n\n        default:\n          throw Object.assign(new Error(this.usage), {\n            code: 'EUSAGE'\n          });\n      }\n    });\n  }\n\n  set(org, user, role, opts) {\n    role = role || 'developer';\n    if (!org) throw new Error('First argument `orgname` is required.');\n    if (!user) throw new Error('Second argument `username` is required.');\n    if (!['owner', 'admin', 'developer'].find(x => x === role)) throw new Error('Third argument `role` must be one of `owner`, `admin`, or `developer`, with `developer` being the default value if omitted.');\n    return liborg.set(org, user, role, opts).then(memDeets => {\n      if (opts.json) this.npm.output(JSON.stringify(memDeets, null, 2));else if (opts.parseable) {\n        this.npm.output(['org', 'orgsize', 'user', 'role'].join('\\t'));\n        this.npm.output([memDeets.org.name, memDeets.org.size, memDeets.user, memDeets.role].join('\\t'));\n      } else if (!opts.silent && opts.loglevel !== 'silent') this.npm.output(`Added ${memDeets.user} as ${memDeets.role} to ${memDeets.org.name}. You now have ${memDeets.org.size} member${memDeets.org.size === 1 ? '' : 's'} in this org.`);\n      return memDeets;\n    });\n  }\n\n  rm(org, user, opts) {\n    if (!org) throw new Error('First argument `orgname` is required.');\n    if (!user) throw new Error('Second argument `username` is required.');\n    return liborg.rm(org, user, opts).then(() => {\n      return liborg.ls(org, opts);\n    }).then(roster => {\n      user = user.replace(/^[~@]?/, '');\n      org = org.replace(/^[~@]?/, '');\n      const userCount = Object.keys(roster).length;\n\n      if (opts.json) {\n        this.npm.output(JSON.stringify({\n          user,\n          org,\n          userCount,\n          deleted: true\n        }));\n      } else if (opts.parseable) {\n        this.npm.output(['user', 'org', 'userCount', 'deleted'].join('\\t'));\n        this.npm.output([user, org, userCount, true].join('\\t'));\n      } else if (!opts.silent && opts.loglevel !== 'silent') this.npm.output(`Successfully removed ${user} from ${org}. You now have ${userCount} member${userCount === 1 ? '' : 's'} in this org.`);\n    });\n  }\n\n  ls(org, user, opts) {\n    if (!org) throw new Error('First argument `orgname` is required.');\n    return liborg.ls(org, opts).then(roster => {\n      if (user) {\n        const newRoster = {};\n        if (roster[user]) newRoster[user] = roster[user];\n        roster = newRoster;\n      }\n\n      if (opts.json) this.npm.output(JSON.stringify(roster, null, 2));else if (opts.parseable) {\n        this.npm.output(['user', 'role'].join('\\t'));\n        Object.keys(roster).forEach(user => {\n          this.npm.output([user, roster[user]].join('\\t'));\n        });\n      } else if (!opts.silent && opts.loglevel !== 'silent') {\n        const table = new Table({\n          head: ['user', 'role']\n        });\n        Object.keys(roster).sort().forEach(user => {\n          table.push([user, roster[user]]);\n        });\n        this.npm.output(table.toString());\n      }\n    });\n  }\n\n}\n\nmodule.exports = Org;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/org.js"],"names":["liborg","require","otplease","Table","BaseCommand","Org","description","name","usage","params","completion","opts","argv","conf","remain","length","Error","exec","args","cb","org","then","x","catch","err","code","message","cmd","orgname","username","role","npm","flatOptions","set","rm","ls","Object","assign","user","find","memDeets","json","output","JSON","stringify","parseable","join","size","silent","loglevel","roster","replace","userCount","keys","deleted","newRoster","forEach","table","head","sort","push","toString","module","exports"],"mappings":"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","sourcesContent":["const liborg = require('libnpmorg')\nconst otplease = require('./utils/otplease.js')\nconst Table = require('cli-table3')\nconst BaseCommand = require('./base-command.js')\n\nclass Org extends BaseCommand {\n  static get description () {\n    return 'Manage orgs'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'org'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      'set orgname username [developer | admin | owner]',\n      'rm orgname username',\n      'ls orgname [<username>]',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'registry',\n      'otp',\n      'json',\n      'parseable',\n    ]\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2)\n      return ['set', 'rm', 'ls']\n\n    switch (argv[2]) {\n      case 'ls':\n      case 'add':\n      case 'rm':\n      case 'set':\n        return []\n      default:\n        throw new Error(argv[2] + ' not recognized')\n    }\n  }\n\n  exec (args, cb) {\n    this.org(args)\n      .then(x => cb(null, x))\n      .catch(err => err.code === 'EUSAGE'\n        ? cb(err.message)\n        : cb(err)\n      )\n  }\n\n  async org ([cmd, orgname, username, role], cb) {\n    return otplease(this.npm.flatOptions, opts => {\n      switch (cmd) {\n        case 'add':\n        case 'set':\n          return this.set(orgname, username, role, opts)\n        case 'rm':\n          return this.rm(orgname, username, opts)\n        case 'ls':\n          return this.ls(orgname, username, opts)\n        default:\n          throw Object.assign(new Error(this.usage), { code: 'EUSAGE' })\n      }\n    })\n  }\n\n  set (org, user, role, opts) {\n    role = role || 'developer'\n    if (!org)\n      throw new Error('First argument `orgname` is required.')\n\n    if (!user)\n      throw new Error('Second argument `username` is required.')\n\n    if (!['owner', 'admin', 'developer'].find(x => x === role))\n      throw new Error('Third argument `role` must be one of `owner`, `admin`, or `developer`, with `developer` being the default value if omitted.')\n\n    return liborg.set(org, user, role, opts).then(memDeets => {\n      if (opts.json)\n        this.npm.output(JSON.stringify(memDeets, null, 2))\n      else if (opts.parseable) {\n        this.npm.output(['org', 'orgsize', 'user', 'role'].join('\\t'))\n        this.npm.output([\n          memDeets.org.name,\n          memDeets.org.size,\n          memDeets.user,\n          memDeets.role,\n        ].join('\\t'))\n      } else if (!opts.silent && opts.loglevel !== 'silent')\n        this.npm.output(`Added ${memDeets.user} as ${memDeets.role} to ${memDeets.org.name}. You now have ${memDeets.org.size} member${memDeets.org.size === 1 ? '' : 's'} in this org.`)\n\n      return memDeets\n    })\n  }\n\n  rm (org, user, opts) {\n    if (!org)\n      throw new Error('First argument `orgname` is required.')\n\n    if (!user)\n      throw new Error('Second argument `username` is required.')\n\n    return liborg.rm(org, user, opts).then(() => {\n      return liborg.ls(org, opts)\n    }).then(roster => {\n      user = user.replace(/^[~@]?/, '')\n      org = org.replace(/^[~@]?/, '')\n      const userCount = Object.keys(roster).length\n      if (opts.json) {\n        this.npm.output(JSON.stringify({\n          user,\n          org,\n          userCount,\n          deleted: true,\n        }))\n      } else if (opts.parseable) {\n        this.npm.output(['user', 'org', 'userCount', 'deleted'].join('\\t'))\n        this.npm.output([user, org, userCount, true].join('\\t'))\n      } else if (!opts.silent && opts.loglevel !== 'silent')\n        this.npm.output(`Successfully removed ${user} from ${org}. You now have ${userCount} member${userCount === 1 ? '' : 's'} in this org.`)\n    })\n  }\n\n  ls (org, user, opts) {\n    if (!org)\n      throw new Error('First argument `orgname` is required.')\n\n    return liborg.ls(org, opts).then(roster => {\n      if (user) {\n        const newRoster = {}\n        if (roster[user])\n          newRoster[user] = roster[user]\n\n        roster = newRoster\n      }\n      if (opts.json)\n        this.npm.output(JSON.stringify(roster, null, 2))\n      else if (opts.parseable) {\n        this.npm.output(['user', 'role'].join('\\t'))\n        Object.keys(roster).forEach(user => {\n          this.npm.output([user, roster[user]].join('\\t'))\n        })\n      } else if (!opts.silent && opts.loglevel !== 'silent') {\n        const table = new Table({ head: ['user', 'role'] })\n        Object.keys(roster).sort().forEach(user => {\n          table.push([user, roster[user]])\n        })\n        this.npm.output(table.toString())\n      }\n    })\n  }\n}\nmodule.exports = Org\n"]},"metadata":{},"sourceType":"script"}