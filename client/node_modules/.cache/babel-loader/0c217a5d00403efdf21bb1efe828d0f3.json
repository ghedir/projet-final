{"ast":null,"code":"const log = require('npmlog');\n\nconst replaceInfo = require('./utils/replace-info.js');\n\nconst BaseCommand = require('./base-command.js');\n\nconst authTypes = {\n  legacy: require('./auth/legacy.js'),\n  oauth: require('./auth/oauth.js'),\n  saml: require('./auth/saml.js'),\n  sso: require('./auth/sso.js')\n};\n\nclass AddUser extends BaseCommand {\n  static get description() {\n    return 'Add a registry user account';\n  }\n\n  static get name() {\n    return 'adduser';\n  }\n\n  static get params() {\n    return ['registry', 'scope'];\n  }\n\n  exec(args, cb) {\n    this.adduser(args).then(() => cb()).catch(cb);\n  }\n\n  async adduser(args) {\n    const {\n      scope\n    } = this.npm.flatOptions;\n    const registry = this.getRegistry(this.npm.flatOptions);\n    const auth = this.getAuthType(this.npm.flatOptions);\n    const creds = this.npm.config.getCredentialsByURI(registry);\n    log.disableProgress();\n    log.notice('', `Log in on ${replaceInfo(registry)}`);\n    const {\n      message,\n      newCreds\n    } = await auth(this.npm, { ...this.npm.flatOptions,\n      creds,\n      registry,\n      scope\n    });\n    await this.updateConfig({\n      newCreds,\n      registry,\n      scope\n    });\n    this.npm.output(message);\n  }\n\n  getRegistry({\n    scope,\n    registry\n  }) {\n    if (scope) {\n      const scopedRegistry = this.npm.config.get(`${scope}:registry`);\n      const cliRegistry = this.npm.config.get('registry', 'cli');\n      if (scopedRegistry && !cliRegistry) return scopedRegistry;\n    }\n\n    return registry;\n  }\n\n  getAuthType({\n    authType\n  }) {\n    const type = authTypes[authType];\n    if (!type) throw new Error('no such auth module');\n    return type;\n  }\n\n  async updateConfig({\n    newCreds,\n    registry,\n    scope\n  }) {\n    this.npm.config.delete('_token', 'user'); // prevent legacy pollution\n\n    this.npm.config.setCredentialsByURI(registry, newCreds);\n    if (scope) this.npm.config.set(scope + ':registry', registry, 'user');\n    await this.npm.config.save('user');\n  }\n\n}\n\nmodule.exports = AddUser;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/adduser.js"],"names":["log","require","replaceInfo","BaseCommand","authTypes","legacy","oauth","saml","sso","AddUser","description","name","params","exec","args","cb","adduser","then","catch","scope","npm","flatOptions","registry","getRegistry","auth","getAuthType","creds","config","getCredentialsByURI","disableProgress","notice","message","newCreds","updateConfig","output","scopedRegistry","get","cliRegistry","authType","type","Error","delete","setCredentialsByURI","set","save","module","exports"],"mappings":"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","sourcesContent":["const log = require('npmlog')\nconst replaceInfo = require('./utils/replace-info.js')\nconst BaseCommand = require('./base-command.js')\nconst authTypes = {\n  legacy: require('./auth/legacy.js'),\n  oauth: require('./auth/oauth.js'),\n  saml: require('./auth/saml.js'),\n  sso: require('./auth/sso.js'),\n}\n\nclass AddUser extends BaseCommand {\n  static get description () {\n    return 'Add a registry user account'\n  }\n\n  static get name () {\n    return 'adduser'\n  }\n\n  static get params () {\n    return [\n      'registry',\n      'scope',\n    ]\n  }\n\n  exec (args, cb) {\n    this.adduser(args).then(() => cb()).catch(cb)\n  }\n\n  async adduser (args) {\n    const { scope } = this.npm.flatOptions\n    const registry = this.getRegistry(this.npm.flatOptions)\n    const auth = this.getAuthType(this.npm.flatOptions)\n    const creds = this.npm.config.getCredentialsByURI(registry)\n\n    log.disableProgress()\n\n    log.notice('', `Log in on ${replaceInfo(registry)}`)\n\n    const { message, newCreds } = await auth(this.npm, {\n      ...this.npm.flatOptions,\n      creds,\n      registry,\n      scope,\n    })\n\n    await this.updateConfig({\n      newCreds,\n      registry,\n      scope,\n    })\n\n    this.npm.output(message)\n  }\n\n  getRegistry ({ scope, registry }) {\n    if (scope) {\n      const scopedRegistry = this.npm.config.get(`${scope}:registry`)\n      const cliRegistry = this.npm.config.get('registry', 'cli')\n      if (scopedRegistry && !cliRegistry)\n        return scopedRegistry\n    }\n    return registry\n  }\n\n  getAuthType ({ authType }) {\n    const type = authTypes[authType]\n\n    if (!type)\n      throw new Error('no such auth module')\n\n    return type\n  }\n\n  async updateConfig ({ newCreds, registry, scope }) {\n    this.npm.config.delete('_token', 'user') // prevent legacy pollution\n    this.npm.config.setCredentialsByURI(registry, newCreds)\n    if (scope)\n      this.npm.config.set(scope + ':registry', registry, 'user')\n    await this.npm.config.save('user')\n  }\n}\nmodule.exports = AddUser\n"]},"metadata":{},"sourceType":"script"}