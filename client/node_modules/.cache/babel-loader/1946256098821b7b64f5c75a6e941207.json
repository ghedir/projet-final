{"ast":null,"code":"const flatten = require('./flatten.js');\n\nconst definitions = require('./definitions.js');\n\nconst describeAll = require('./describe-all.js'); // aliases where they get expanded into a completely different thing\n// these are NOT supported in the environment or npmrc files, only\n// expanded on the CLI.\n// TODO: when we switch off of nopt, use an arg parser that supports\n// more reasonable aliasing and short opts right in the definitions set.\n\n\nconst shorthands = {\n  'enjoy-by': ['--before'],\n  d: ['--loglevel', 'info'],\n  dd: ['--loglevel', 'verbose'],\n  ddd: ['--loglevel', 'silly'],\n  quiet: ['--loglevel', 'warn'],\n  q: ['--loglevel', 'warn'],\n  s: ['--loglevel', 'silent'],\n  silent: ['--loglevel', 'silent'],\n  verbose: ['--loglevel', 'verbose'],\n  desc: ['--description'],\n  help: ['--usage'],\n  local: ['--no-global'],\n  n: ['--no-yes'],\n  no: ['--no-yes'],\n  porcelain: ['--parseable'],\n  readonly: ['--read-only'],\n  reg: ['--registry']\n};\n\nfor (const [key, {\n  short\n}] of Object.entries(definitions)) {\n  if (!short) continue; // can be either an array or string\n\n  for (const s of [].concat(short)) shorthands[s] = [`--${key}`];\n}\n\nmodule.exports = {\n  get defaults() {\n    // NB: 'default' is a reserved word\n    return Object.entries(definitions).map(([key, {\n      default: def\n    }]) => {\n      return [key, def];\n    }).reduce((defaults, [key, def]) => {\n      defaults[key] = def;\n      return defaults;\n    }, {});\n  },\n\n  definitions,\n  flatten,\n  shorthands,\n  describeAll\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/config/index.js"],"names":["flatten","require","definitions","describeAll","shorthands","d","dd","ddd","quiet","q","s","silent","verbose","desc","help","local","n","no","porcelain","readonly","reg","key","short","Object","entries","concat","module","exports","defaults","map","default","def","reduce"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,kBAAD,CAA3B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,mBAAD,CAA3B,C,CAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,UAAU,GAAG;AACjB,cAAY,CAAC,UAAD,CADK;AAEjBC,EAAAA,CAAC,EAAE,CAAC,YAAD,EAAe,MAAf,CAFc;AAGjBC,EAAAA,EAAE,EAAE,CAAC,YAAD,EAAe,SAAf,CAHa;AAIjBC,EAAAA,GAAG,EAAE,CAAC,YAAD,EAAe,OAAf,CAJY;AAKjBC,EAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,MAAf,CALU;AAMjBC,EAAAA,CAAC,EAAE,CAAC,YAAD,EAAe,MAAf,CANc;AAOjBC,EAAAA,CAAC,EAAE,CAAC,YAAD,EAAe,QAAf,CAPc;AAQjBC,EAAAA,MAAM,EAAE,CAAC,YAAD,EAAe,QAAf,CARS;AASjBC,EAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,SAAf,CATQ;AAUjBC,EAAAA,IAAI,EAAE,CAAC,eAAD,CAVW;AAWjBC,EAAAA,IAAI,EAAE,CAAC,SAAD,CAXW;AAYjBC,EAAAA,KAAK,EAAE,CAAC,aAAD,CAZU;AAajBC,EAAAA,CAAC,EAAE,CAAC,UAAD,CAbc;AAcjBC,EAAAA,EAAE,EAAE,CAAC,UAAD,CAda;AAejBC,EAAAA,SAAS,EAAE,CAAC,aAAD,CAfM;AAgBjBC,EAAAA,QAAQ,EAAE,CAAC,aAAD,CAhBO;AAiBjBC,EAAAA,GAAG,EAAE,CAAC,YAAD;AAjBY,CAAnB;;AAoBA,KAAK,MAAM,CAACC,GAAD,EAAM;AAACC,EAAAA;AAAD,CAAN,CAAX,IAA6BC,MAAM,CAACC,OAAP,CAAetB,WAAf,CAA7B,EAA0D;AACxD,MAAI,CAACoB,KAAL,EACE,SAFsD,CAGxD;;AACA,OAAK,MAAMZ,CAAX,IAAgB,GAAGe,MAAH,CAAUH,KAAV,CAAhB,EACElB,UAAU,CAACM,CAAD,CAAV,GAAgB,CAAE,KAAIW,GAAI,EAAV,CAAhB;AACH;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACf,MAAIC,QAAJ,GAAgB;AACd;AACA,WAAOL,MAAM,CAACC,OAAP,CAAetB,WAAf,EAA4B2B,GAA5B,CAAgC,CAAC,CAACR,GAAD,EAAM;AAAES,MAAAA,OAAO,EAAEC;AAAX,KAAN,CAAD,KAA6B;AAClE,aAAO,CAACV,GAAD,EAAMU,GAAN,CAAP;AACD,KAFM,EAEJC,MAFI,CAEG,CAACJ,QAAD,EAAW,CAACP,GAAD,EAAMU,GAAN,CAAX,KAA0B;AAClCH,MAAAA,QAAQ,CAACP,GAAD,CAAR,GAAgBU,GAAhB;AACA,aAAOH,QAAP;AACD,KALM,EAKJ,EALI,CAAP;AAMD,GATc;;AAUf1B,EAAAA,WAVe;AAWfF,EAAAA,OAXe;AAYfI,EAAAA,UAZe;AAafD,EAAAA;AAbe,CAAjB","sourcesContent":["const flatten = require('./flatten.js')\nconst definitions = require('./definitions.js')\nconst describeAll = require('./describe-all.js')\n\n// aliases where they get expanded into a completely different thing\n// these are NOT supported in the environment or npmrc files, only\n// expanded on the CLI.\n// TODO: when we switch off of nopt, use an arg parser that supports\n// more reasonable aliasing and short opts right in the definitions set.\nconst shorthands = {\n  'enjoy-by': ['--before'],\n  d: ['--loglevel', 'info'],\n  dd: ['--loglevel', 'verbose'],\n  ddd: ['--loglevel', 'silly'],\n  quiet: ['--loglevel', 'warn'],\n  q: ['--loglevel', 'warn'],\n  s: ['--loglevel', 'silent'],\n  silent: ['--loglevel', 'silent'],\n  verbose: ['--loglevel', 'verbose'],\n  desc: ['--description'],\n  help: ['--usage'],\n  local: ['--no-global'],\n  n: ['--no-yes'],\n  no: ['--no-yes'],\n  porcelain: ['--parseable'],\n  readonly: ['--read-only'],\n  reg: ['--registry'],\n}\n\nfor (const [key, {short}] of Object.entries(definitions)) {\n  if (!short)\n    continue\n  // can be either an array or string\n  for (const s of [].concat(short))\n    shorthands[s] = [`--${key}`]\n}\n\nmodule.exports = {\n  get defaults () {\n    // NB: 'default' is a reserved word\n    return Object.entries(definitions).map(([key, { default: def }]) => {\n      return [key, def]\n    }).reduce((defaults, [key, def]) => {\n      defaults[key] = def\n      return defaults\n    }, {})\n  },\n  definitions,\n  flatten,\n  shorthands,\n  describeAll,\n}\n"]},"metadata":{},"sourceType":"script"}