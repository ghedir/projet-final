{"ast":null,"code":"const prompt = 'This operation requires a one-time password.\\nEnter OTP:';\n\nconst readUserInfo = require('./read-user-info.js');\n\nconst isOtpError = err => err.code === 'EOTP' || err.code === 'E401' && /one-time pass/.test(err.body);\n\nmodule.exports = otplease;\n\nfunction otplease(opts, fn) {\n  opts = {\n    prompt,\n    ...opts\n  };\n  return Promise.resolve().then(() => fn(opts)).catch(err => {\n    if (!isOtpError(err)) throw err;else if (!process.stdin.isTTY || !process.stdout.isTTY) throw err;else {\n      return readUserInfo.otp(opts.prompt).then(otp => fn({ ...opts,\n        otp\n      }));\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/otplease.js"],"names":["prompt","readUserInfo","require","isOtpError","err","code","test","body","module","exports","otplease","opts","fn","Promise","resolve","then","catch","process","stdin","isTTY","stdout","otp"],"mappings":"AAAA,MAAMA,MAAM,GAAG,0DAAf;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,qBAAD,CAA5B;;AAEA,MAAMC,UAAU,GAAGC,GAAG,IACpBA,GAAG,CAACC,IAAJ,KAAa,MAAb,IAAwBD,GAAG,CAACC,IAAJ,KAAa,MAAb,IAAuB,gBAAgBC,IAAhB,CAAqBF,GAAG,CAACG,IAAzB,CADjD;;AAGAC,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AACA,SAASA,QAAT,CAAmBC,IAAnB,EAAyBC,EAAzB,EAA6B;AAC3BD,EAAAA,IAAI,GAAG;AAAEX,IAAAA,MAAF;AAAU,OAAGW;AAAb,GAAP;AACA,SAAOE,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAMH,EAAE,CAACD,IAAD,CAA/B,EAAuCK,KAAvC,CAA6CZ,GAAG,IAAI;AACzD,QAAI,CAACD,UAAU,CAACC,GAAD,CAAf,EACE,MAAMA,GAAN,CADF,KAEK,IAAI,CAACa,OAAO,CAACC,KAAR,CAAcC,KAAf,IAAwB,CAACF,OAAO,CAACG,MAAR,CAAeD,KAA5C,EACH,MAAMf,GAAN,CADG,KAEA;AACH,aAAOH,YAAY,CAACoB,GAAb,CAAiBV,IAAI,CAACX,MAAtB,EACJe,IADI,CACCM,GAAG,IAAIT,EAAE,CAAC,EAAE,GAAGD,IAAL;AAAWU,QAAAA;AAAX,OAAD,CADV,CAAP;AAED;AACF,GATM,CAAP;AAUD","sourcesContent":["const prompt = 'This operation requires a one-time password.\\nEnter OTP:'\nconst readUserInfo = require('./read-user-info.js')\n\nconst isOtpError = err =>\n  err.code === 'EOTP' || (err.code === 'E401' && /one-time pass/.test(err.body))\n\nmodule.exports = otplease\nfunction otplease (opts, fn) {\n  opts = { prompt, ...opts }\n  return Promise.resolve().then(() => fn(opts)).catch(err => {\n    if (!isOtpError(err))\n      throw err\n    else if (!process.stdin.isTTY || !process.stdout.isTTY)\n      throw err\n    else {\n      return readUserInfo.otp(opts.prompt)\n        .then(otp => fn({ ...opts, otp }))\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}