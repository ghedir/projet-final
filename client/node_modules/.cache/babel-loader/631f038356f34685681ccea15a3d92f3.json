{"ast":null,"code":"\"use strict\";\n\nvar wcwidth = require('./width');\n/**\n * repeat string `str` up to total length of `len`\n *\n * @param String str string to repeat\n * @param Number len total length of output string\n */\n\n\nfunction repeatString(str, len) {\n  return Array.apply(null, {\n    length: len + 1\n  }).join(str).slice(0, len);\n}\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\n\nfunction padRight(str, max, chr) {\n  str = str != null ? str : '';\n  str = String(str);\n  var length = max - wcwidth(str);\n  if (length <= 0) return str;\n  return str + repeatString(chr || ' ', length);\n}\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padCenter will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\n\nfunction padCenter(str, max, chr) {\n  str = str != null ? str : '';\n  str = String(str);\n  var length = max - wcwidth(str);\n  if (length <= 0) return str;\n  var lengthLeft = Math.floor(length / 2);\n  var lengthRight = length - lengthLeft;\n  return repeatString(chr || ' ', lengthLeft) + str + repeatString(chr || ' ', lengthRight);\n}\n/**\n * Pad `str` up to total length `max` with `chr`, on the left.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\n\nfunction padLeft(str, max, chr) {\n  str = str != null ? str : '';\n  str = String(str);\n  var length = max - wcwidth(str);\n  if (length <= 0) return str;\n  return repeatString(chr || ' ', length) + str;\n}\n/**\n * Split a String `str` into lines of maxiumum length `max`.\n * Splits on word boundaries. Preserves existing new lines.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @return Array Array containing lines.\n */\n\n\nfunction splitIntoLines(str, max) {\n  function _splitIntoLines(str, max) {\n    return str.trim().split(' ').reduce(function (lines, word) {\n      var line = lines[lines.length - 1];\n\n      if (line && wcwidth(line.join(' ')) + wcwidth(word) < max) {\n        lines[lines.length - 1].push(word); // add to line\n      } else lines.push([word]); // new line\n\n\n      return lines;\n    }, []).map(function (l) {\n      return l.join(' ');\n    });\n  }\n\n  return str.split('\\n').map(function (str) {\n    return _splitIntoLines(str, max);\n  }).reduce(function (lines, line) {\n    return lines.concat(line);\n  }, []);\n}\n/**\n * Add spaces and `truncationChar` between words of\n * `str` which are longer than `max`.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @param Number truncationChar character to append to split words\n * @return String\n */\n\n\nfunction splitLongWords(str, max, truncationChar) {\n  str = str.trim();\n  var result = [];\n  var words = str.split(' ');\n  var remainder = '';\n  var truncationWidth = wcwidth(truncationChar);\n\n  while (remainder || words.length) {\n    if (remainder) {\n      var word = remainder;\n      remainder = '';\n    } else {\n      var word = words.shift();\n    }\n\n    if (wcwidth(word) > max) {\n      // slice is based on length no wcwidth\n      var i = 0;\n      var wwidth = 0;\n      var limit = max - truncationWidth;\n\n      while (i < word.length) {\n        var w = wcwidth(word.charAt(i));\n\n        if (w + wwidth > limit) {\n          break;\n        }\n\n        wwidth += w;\n        ++i;\n      }\n\n      remainder = word.slice(i); // get remainder\n      // save remainder for next loop\n\n      word = word.slice(0, i); // grab truncated word\n\n      word += truncationChar; // add trailing â€¦ or whatever\n    }\n\n    result.push(word);\n  }\n\n  return result.join(' ');\n}\n/**\n * Truncate `str` into total width `max`\n * If `str` is shorter than `max`,  will return `str` unaltered.\n *\n * @param String str string to truncated\n * @param Number max total wcwidth of output string\n * @return String truncated str\n */\n\n\nfunction truncateString(str, max) {\n  str = str != null ? str : '';\n  str = String(str);\n  if (max == Infinity) return str;\n  var i = 0;\n  var wwidth = 0;\n\n  while (i < str.length) {\n    var w = wcwidth(str.charAt(i));\n    if (w + wwidth > max) break;\n    wwidth += w;\n    ++i;\n  }\n\n  return str.slice(0, i);\n}\n/**\n * Exports\n */\n\n\nmodule.exports.padRight = padRight;\nmodule.exports.padCenter = padCenter;\nmodule.exports.padLeft = padLeft;\nmodule.exports.splitIntoLines = splitIntoLines;\nmodule.exports.splitLongWords = splitLongWords;\nmodule.exports.truncateString = truncateString;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/columnify/utils.js"],"names":["wcwidth","require","repeatString","str","len","Array","apply","length","join","slice","padRight","max","chr","String","padCenter","lengthLeft","Math","floor","lengthRight","padLeft","splitIntoLines","_splitIntoLines","trim","split","reduce","lines","word","line","push","map","l","concat","splitLongWords","truncationChar","result","words","remainder","truncationWidth","shift","i","wwidth","limit","w","charAt","truncateString","Infinity","module","exports"],"mappings":"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","sourcesContent":["\"use strict\"\n\nvar wcwidth = require('./width')\n\n/**\n * repeat string `str` up to total length of `len`\n *\n * @param String str string to repeat\n * @param Number len total length of output string\n */\n\nfunction repeatString(str, len) {\n  return Array.apply(null, {length: len + 1}).join(str).slice(0, len)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padRight(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  return str + repeatString(chr || ' ', length)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padCenter will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padCenter(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  var lengthLeft = Math.floor(length/2)\n  var lengthRight = length - lengthLeft\n  return repeatString(chr || ' ', lengthLeft) + str + repeatString(chr || ' ', lengthRight)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`, on the left.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padLeft(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  return repeatString(chr || ' ', length) + str\n}\n\n/**\n * Split a String `str` into lines of maxiumum length `max`.\n * Splits on word boundaries. Preserves existing new lines.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @return Array Array containing lines.\n */\n\nfunction splitIntoLines(str, max) {\n  function _splitIntoLines(str, max) {\n    return str.trim().split(' ').reduce(function(lines, word) {\n      var line = lines[lines.length - 1]\n      if (line && wcwidth(line.join(' ')) + wcwidth(word) < max) {\n        lines[lines.length - 1].push(word) // add to line\n      }\n      else lines.push([word]) // new line\n      return lines\n    }, []).map(function(l) {\n      return l.join(' ')\n    })\n  }\n  return str.split('\\n').map(function(str) {\n    return _splitIntoLines(str, max)\n  }).reduce(function(lines, line) {\n    return lines.concat(line)\n  }, [])\n}\n\n/**\n * Add spaces and `truncationChar` between words of\n * `str` which are longer than `max`.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @param Number truncationChar character to append to split words\n * @return String\n */\n\nfunction splitLongWords(str, max, truncationChar) {\n  str = str.trim()\n  var result = []\n  var words = str.split(' ')\n  var remainder = ''\n\n  var truncationWidth = wcwidth(truncationChar)\n\n  while (remainder || words.length) {\n    if (remainder) {\n      var word = remainder\n      remainder = ''\n    } else {\n      var word = words.shift()\n    }\n\n    if (wcwidth(word) > max) {\n      // slice is based on length no wcwidth\n      var i = 0\n      var wwidth = 0\n      var limit = max - truncationWidth\n      while (i < word.length) {\n        var w = wcwidth(word.charAt(i))\n        if (w + wwidth > limit) {\n          break\n        }\n        wwidth += w\n        ++i\n      }\n\n      remainder = word.slice(i) // get remainder\n      // save remainder for next loop\n\n      word = word.slice(0, i) // grab truncated word\n      word += truncationChar // add trailing â€¦ or whatever\n    }\n    result.push(word)\n  }\n\n  return result.join(' ')\n}\n\n\n/**\n * Truncate `str` into total width `max`\n * If `str` is shorter than `max`,  will return `str` unaltered.\n *\n * @param String str string to truncated\n * @param Number max total wcwidth of output string\n * @return String truncated str\n */\n\nfunction truncateString(str, max) {\n\n  str = str != null ? str : ''\n  str = String(str)\n\n  if(max == Infinity) return str\n\n  var i = 0\n  var wwidth = 0\n  while (i < str.length) {\n    var w = wcwidth(str.charAt(i))\n    if(w + wwidth > max)\n      break\n    wwidth += w\n    ++i\n  }\n  return str.slice(0, i)\n}\n\n\n\n/**\n * Exports\n */\n\nmodule.exports.padRight = padRight\nmodule.exports.padCenter = padCenter\nmodule.exports.padLeft = padLeft\nmodule.exports.splitIntoLines = splitIntoLines\nmodule.exports.splitLongWords = splitLongWords\nmodule.exports.truncateString = truncateString\n"]},"metadata":{},"sourceType":"script"}