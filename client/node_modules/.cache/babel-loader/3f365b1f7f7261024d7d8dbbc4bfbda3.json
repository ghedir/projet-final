{"ast":null,"code":"// XXX these output classes should not live in here forever.  it'd be good to\n// split them out, perhaps to libnpmsearch\nconst Minipass = require('minipass');\n\nconst columnify = require('columnify'); // This module consumes package data in the following format:\n//\n// {\n//   name: String,\n//   description: String,\n//   maintainers: [{ username: String, email: String }],\n//   keywords: String | [String],\n//   version: String,\n//   date: Date // can be null,\n// }\n//\n// The returned stream will format this package data\n// into a byte stream of formatted, displayable output.\n\n\nmodule.exports = (opts = {}) => opts.json ? new JSONOutputStream() : new TextOutputStream(opts);\n\nclass JSONOutputStream extends Minipass {\n  constructor() {\n    super();\n    this._didFirst = false;\n  }\n\n  write(obj) {\n    if (!this._didFirst) {\n      super.write('[\\n');\n      this._didFirst = true;\n    } else super.write('\\n,\\n');\n\n    try {\n      return super.write(JSON.stringify(obj));\n    } catch (er) {\n      return this.emit('error', er);\n    }\n  }\n\n  end() {\n    super.write(this._didFirst ? ']\\n' : '\\n[]\\n');\n    super.end();\n  }\n\n}\n\nclass TextOutputStream extends Minipass {\n  constructor(opts) {\n    super();\n    this._opts = opts;\n    this._line = 0;\n  }\n\n  write(pkg) {\n    return super.write(prettify(pkg, ++this._line, this._opts));\n  }\n\n}\n\nfunction prettify(data, num, opts) {\n  opts = opts || {};\n  var truncate = !opts.long;\n  var pkg = normalizePackage(data, opts);\n  var columns = opts.description ? ['name', 'description', 'author', 'date', 'version', 'keywords'] : ['name', 'author', 'date', 'version', 'keywords'];\n\n  if (opts.parseable) {\n    return columns.map(function (col) {\n      return pkg[col] && ('' + pkg[col]).replace(/\\t/g, ' ');\n    }).join('\\t');\n  }\n\n  var output = columnify([pkg], {\n    include: columns,\n    showHeaders: num <= 1,\n    columnSplitter: ' | ',\n    truncate: truncate,\n    config: {\n      name: {\n        minWidth: 25,\n        maxWidth: 25,\n        truncate: false,\n        truncateMarker: ''\n      },\n      description: {\n        minWidth: 20,\n        maxWidth: 20\n      },\n      author: {\n        minWidth: 15,\n        maxWidth: 15\n      },\n      date: {\n        maxWidth: 11\n      },\n      version: {\n        minWidth: 8,\n        maxWidth: 8\n      },\n      keywords: {\n        maxWidth: Infinity\n      }\n    }\n  });\n  output = trimToMaxWidth(output);\n  if (opts.color) output = highlightSearchTerms(output, opts.args);\n  return output;\n}\n\nvar colors = [31, 33, 32, 36, 34, 35];\nvar cl = colors.length;\n\nfunction addColorMarker(str, arg, i) {\n  var m = i % cl + 1;\n  var markStart = String.fromCharCode(m);\n  var markEnd = String.fromCharCode(0);\n\n  if (arg.charAt(0) === '/') {\n    return str.replace(new RegExp(arg.substr(1, arg.length - 2), 'gi'), bit => markStart + bit + markEnd);\n  } // just a normal string, do the split/map thing\n\n\n  var pieces = str.toLowerCase().split(arg.toLowerCase());\n  var p = 0;\n  return pieces.map(function (piece) {\n    piece = str.substr(p, piece.length);\n    var mark = markStart + str.substr(p + piece.length, arg.length) + markEnd;\n    p += piece.length + arg.length;\n    return piece + mark;\n  }).join('');\n}\n\nfunction colorize(line) {\n  for (var i = 0; i < cl; i++) {\n    var m = i + 1;\n    var color = '\\u001B[' + colors[i] + 'm';\n    line = line.split(String.fromCharCode(m)).join(color);\n  }\n\n  var uncolor = '\\u001B[0m';\n  return line.split('\\u0000').join(uncolor);\n}\n\nfunction getMaxWidth() {\n  var cols;\n\n  try {\n    var tty = require('tty');\n\n    var stdout = process.stdout;\n    cols = !tty.isatty(stdout.fd) ? Infinity : process.stdout.getWindowSize()[0];\n    cols = cols === 0 ? Infinity : cols;\n  } catch (ex) {\n    cols = Infinity;\n  }\n\n  return cols;\n}\n\nfunction trimToMaxWidth(str) {\n  var maxWidth = getMaxWidth();\n  return str.split('\\n').map(function (line) {\n    return line.slice(0, maxWidth);\n  }).join('\\n');\n}\n\nfunction highlightSearchTerms(str, terms) {\n  terms.forEach(function (arg, i) {\n    str = addColorMarker(str, arg, i);\n  });\n  return colorize(str).trim();\n}\n\nfunction normalizePackage(data, opts) {\n  opts = opts || {};\n  return {\n    name: data.name,\n    description: opts.description ? data.description : '',\n    author: (data.maintainers || []).map(function (m) {\n      return '=' + m.username;\n    }).join(' '),\n    keywords: Array.isArray(data.keywords) ? data.keywords.join(' ') : typeof data.keywords === 'string' ? data.keywords.replace(/[,\\s]+/, ' ') : '',\n    version: data.version,\n    date: data.date && data.date.toISOString() // remove time\n    .split('T').join(' ').replace(/:[0-9]{2}\\.[0-9]{3}Z$/, '').slice(0, -5) || 'prehistoric'\n  };\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/search/format-package-stream.js"],"names":["Minipass","require","columnify","module","exports","opts","json","JSONOutputStream","TextOutputStream","constructor","_didFirst","write","obj","JSON","stringify","er","emit","end","_opts","_line","pkg","prettify","data","num","truncate","long","normalizePackage","columns","description","parseable","map","col","replace","join","output","include","showHeaders","columnSplitter","config","name","minWidth","maxWidth","truncateMarker","author","date","version","keywords","Infinity","trimToMaxWidth","color","highlightSearchTerms","args","colors","cl","length","addColorMarker","str","arg","i","m","markStart","String","fromCharCode","markEnd","charAt","RegExp","substr","bit","pieces","toLowerCase","split","p","piece","mark","colorize","line","uncolor","getMaxWidth","cols","tty","stdout","process","isatty","fd","getWindowSize","ex","slice","terms","forEach","trim","maintainers","username","Array","isArray","toISOString"],"mappings":"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","sourcesContent":["// XXX these output classes should not live in here forever.  it'd be good to\n// split them out, perhaps to libnpmsearch\n\nconst Minipass = require('minipass')\nconst columnify = require('columnify')\n\n// This module consumes package data in the following format:\n//\n// {\n//   name: String,\n//   description: String,\n//   maintainers: [{ username: String, email: String }],\n//   keywords: String | [String],\n//   version: String,\n//   date: Date // can be null,\n// }\n//\n// The returned stream will format this package data\n// into a byte stream of formatted, displayable output.\n\nmodule.exports = (opts = {}) =>\n  opts.json ? new JSONOutputStream() : new TextOutputStream(opts)\n\nclass JSONOutputStream extends Minipass {\n  constructor () {\n    super()\n    this._didFirst = false\n  }\n\n  write (obj) {\n    if (!this._didFirst) {\n      super.write('[\\n')\n      this._didFirst = true\n    } else\n      super.write('\\n,\\n')\n\n    try {\n      return super.write(JSON.stringify(obj))\n    } catch (er) {\n      return this.emit('error', er)\n    }\n  }\n\n  end () {\n    super.write(this._didFirst ? ']\\n' : '\\n[]\\n')\n    super.end()\n  }\n}\n\nclass TextOutputStream extends Minipass {\n  constructor (opts) {\n    super()\n    this._opts = opts\n    this._line = 0\n  }\n\n  write (pkg) {\n    return super.write(prettify(pkg, ++this._line, this._opts))\n  }\n}\n\nfunction prettify (data, num, opts) {\n  opts = opts || {}\n  var truncate = !opts.long\n\n  var pkg = normalizePackage(data, opts)\n\n  var columns = opts.description\n    ? ['name', 'description', 'author', 'date', 'version', 'keywords']\n    : ['name', 'author', 'date', 'version', 'keywords']\n\n  if (opts.parseable) {\n    return columns.map(function (col) {\n      return pkg[col] && ('' + pkg[col]).replace(/\\t/g, ' ')\n    }).join('\\t')\n  }\n\n  var output = columnify(\n    [pkg],\n    {\n      include: columns,\n      showHeaders: num <= 1,\n      columnSplitter: ' | ',\n      truncate: truncate,\n      config: {\n        name: { minWidth: 25, maxWidth: 25, truncate: false, truncateMarker: '' },\n        description: { minWidth: 20, maxWidth: 20 },\n        author: { minWidth: 15, maxWidth: 15 },\n        date: { maxWidth: 11 },\n        version: { minWidth: 8, maxWidth: 8 },\n        keywords: { maxWidth: Infinity },\n      },\n    }\n  )\n  output = trimToMaxWidth(output)\n  if (opts.color)\n    output = highlightSearchTerms(output, opts.args)\n\n  return output\n}\n\nvar colors = [31, 33, 32, 36, 34, 35]\nvar cl = colors.length\n\nfunction addColorMarker (str, arg, i) {\n  var m = i % cl + 1\n  var markStart = String.fromCharCode(m)\n  var markEnd = String.fromCharCode(0)\n\n  if (arg.charAt(0) === '/') {\n    return str.replace(\n      new RegExp(arg.substr(1, arg.length - 2), 'gi'),\n      bit => markStart + bit + markEnd\n    )\n  }\n\n  // just a normal string, do the split/map thing\n  var pieces = str.toLowerCase().split(arg.toLowerCase())\n  var p = 0\n\n  return pieces.map(function (piece) {\n    piece = str.substr(p, piece.length)\n    var mark = markStart +\n               str.substr(p + piece.length, arg.length) +\n               markEnd\n    p += piece.length + arg.length\n    return piece + mark\n  }).join('')\n}\n\nfunction colorize (line) {\n  for (var i = 0; i < cl; i++) {\n    var m = i + 1\n    var color = '\\u001B[' + colors[i] + 'm'\n    line = line.split(String.fromCharCode(m)).join(color)\n  }\n  var uncolor = '\\u001B[0m'\n  return line.split('\\u0000').join(uncolor)\n}\n\nfunction getMaxWidth () {\n  var cols\n  try {\n    var tty = require('tty')\n    var stdout = process.stdout\n    cols = !tty.isatty(stdout.fd) ? Infinity : process.stdout.getWindowSize()[0]\n    cols = (cols === 0) ? Infinity : cols\n  } catch (ex) {\n    cols = Infinity\n  }\n  return cols\n}\n\nfunction trimToMaxWidth (str) {\n  var maxWidth = getMaxWidth()\n  return str.split('\\n').map(function (line) {\n    return line.slice(0, maxWidth)\n  }).join('\\n')\n}\n\nfunction highlightSearchTerms (str, terms) {\n  terms.forEach(function (arg, i) {\n    str = addColorMarker(str, arg, i)\n  })\n\n  return colorize(str).trim()\n}\n\nfunction normalizePackage (data, opts) {\n  opts = opts || {}\n  return {\n    name: data.name,\n    description: opts.description ? data.description : '',\n    author: (data.maintainers || []).map(function (m) {\n      return '=' + m.username\n    }).join(' '),\n    keywords: Array.isArray(data.keywords)\n      ? data.keywords.join(' ')\n      : typeof data.keywords === 'string'\n        ? data.keywords.replace(/[,\\s]+/, ' ')\n        : '',\n    version: data.version,\n    date: (data.date &&\n          (data.date.toISOString() // remove time\n            .split('T').join(' ')\n            .replace(/:[0-9]{2}\\.[0-9]{3}Z$/, ''))\n            .slice(0, -5)) ||\n          'prehistoric',\n  }\n}\n"]},"metadata":{},"sourceType":"script"}