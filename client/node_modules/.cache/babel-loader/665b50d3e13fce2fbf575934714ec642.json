{"ast":null,"code":"const EventEmitter = require('events');\n\nconst {\n  resolve,\n  dirname\n} = require('path');\n\nconst Config = require('@npmcli/config');\n\nconst log = require('npmlog'); // Patch the global fs module here at the app level\n\n\nrequire('graceful-fs').gracefulify(require('fs')); // TODO make this only ever load once (or unload) in tests\n\n\nconst procLogListener = require('./utils/proc-log-listener.js');\n\nconst proxyCmds = new Proxy({}, {\n  get: (target, cmd) => {\n    const actual = deref(cmd);\n\n    if (actual && !Reflect.has(target, actual)) {\n      const Impl = require(`./${actual}.js`);\n\n      const impl = new Impl(npm); // Our existing npm.commands[x] act like a function with attributes, but\n      // our modules have non-inumerable attributes so we can't just assign\n      // them to an anonymous function like we used to.  This acts like that\n      // old way of doing things, until we can make breaking changes to the\n      // npm.commands[x] api\n\n      target[actual] = new Proxy((args, cb) => npm[_runCmd](actual, impl, args, cb), {\n        get: (target, attr, receiver) => {\n          return Reflect.get(impl, attr, receiver);\n        }\n      });\n    }\n\n    return target[actual];\n  }\n}); // Timers in progress\n\nconst timers = new Map(); // Finished timers\n\nconst timings = {};\n\nconst processOnTimeHandler = name => {\n  timers.set(name, Date.now());\n};\n\nconst processOnTimeEndHandler = name => {\n  if (timers.has(name)) {\n    const ms = Date.now() - timers.get(name);\n    log.timing(name, `Completed in ${ms}ms`);\n    timings[name] = ms;\n    timers.delete(name);\n  } else log.silly('timing', \"Tried to end timer that doesn't exist:\", name);\n};\n\nconst {\n  definitions,\n  flatten,\n  shorthands\n} = require('./utils/config/index.js');\n\nconst {\n  shellouts\n} = require('./utils/cmd-list.js');\n\nconst usage = require('./utils/npm-usage.js');\n\nconst which = require('which');\n\nconst deref = require('./utils/deref-command.js');\n\nconst setupLog = require('./utils/setup-log.js');\n\nconst cleanUpLogFiles = require('./utils/cleanup-log-files.js');\n\nconst getProjectScope = require('./utils/get-project-scope.js');\n\nlet warnedNonDashArg = false;\n\nconst _runCmd = Symbol('_runCmd');\n\nconst _load = Symbol('_load');\n\nconst _tmpFolder = Symbol('_tmpFolder');\n\nconst _title = Symbol('_title');\n\nconst npm = module.exports = new class extends EventEmitter {\n  constructor() {\n    super();\n    this.started = Date.now();\n    this.command = null;\n    this.commands = proxyCmds;\n    this.timings = timings;\n    this.timers = timers;\n    this.perfStart();\n    procLogListener();\n    process.emit('time', 'npm');\n    this.version = require('../package.json').version;\n    this.config = new Config({\n      npmPath: dirname(__dirname),\n      definitions,\n      flatten,\n      shorthands\n    });\n    this[_title] = process.title;\n    this.updateNotification = null;\n  }\n\n  perfStart() {\n    process.on('time', processOnTimeHandler);\n    process.on('timeEnd', processOnTimeEndHandler);\n  }\n\n  perfStop() {\n    process.off('time', processOnTimeHandler);\n    process.off('timeEnd', processOnTimeEndHandler);\n  }\n\n  get shelloutCommands() {\n    return shellouts;\n  }\n\n  deref(c) {\n    return deref(c);\n  } // this will only ever be called with cmd set to the canonical command name\n\n\n  [_runCmd](cmd, impl, args, cb) {\n    if (!this.loaded) {\n      throw new Error('Call npm.load() before using this command.\\n' + 'See lib/cli.js for example usage.');\n    }\n\n    process.emit('time', `command:${cmd}`); // since 'test', 'start', 'stop', etc. commands re-enter this function\n    // to call the run-script command, we need to only set it one time.\n\n    if (!this.command) {\n      process.env.npm_command = cmd;\n      this.command = cmd;\n    } // Options are prefixed by a hyphen-minus (-, \\u2d).\n    // Other dash-type chars look similar but are invalid.\n\n\n    if (!warnedNonDashArg) {\n      args.filter(arg => /^[\\u2010-\\u2015\\u2212\\uFE58\\uFE63\\uFF0D]/.test(arg)).forEach(arg => {\n        warnedNonDashArg = true;\n        this.log.error('arg', 'Argument starts with non-ascii dash, this is probably invalid:', arg);\n      });\n    }\n\n    const workspacesEnabled = this.config.get('workspaces');\n    const workspacesFilters = this.config.get('workspace');\n    const filterByWorkspaces = workspacesEnabled || workspacesFilters.length > 0;\n\n    if (this.config.get('usage')) {\n      this.output(impl.usage);\n      cb();\n    } else if (filterByWorkspaces) {\n      if (this.config.get('global')) return cb(new Error('Workspaces not supported for global packages'));\n      impl.execWorkspaces(args, this.config.get('workspace'), er => {\n        process.emit('timeEnd', `command:${cmd}`);\n        cb(er);\n      });\n    } else {\n      impl.exec(args, er => {\n        process.emit('timeEnd', `command:${cmd}`);\n        cb(er);\n      });\n    }\n  }\n\n  load(cb) {\n    if (cb && typeof cb !== 'function') throw new TypeError('callback must be a function if provided');\n\n    if (!this.loadPromise) {\n      process.emit('time', 'npm:load');\n      this.log.pause();\n      this.loadPromise = new Promise((resolve, reject) => {\n        this[_load]().catch(er => er).then(er => {\n          this.loadErr = er;\n          if (!er && this.config.get('force')) this.log.warn('using --force', 'Recommended protections disabled.');\n          process.emit('timeEnd', 'npm:load');\n          if (er) return reject(er);\n          resolve();\n        });\n      });\n    }\n\n    if (!cb) return this.loadPromise; // loadPromise is returned here for legacy purposes, old code was allowing\n    // the mixing of callback and promise here.\n\n    return this.loadPromise.then(cb, cb);\n  }\n\n  get loaded() {\n    return this.config.loaded;\n  }\n\n  get title() {\n    return this[_title];\n  }\n\n  set title(t) {\n    process.title = t;\n    this[_title] = t;\n  }\n\n  async [_load]() {\n    process.emit('time', 'npm:load:whichnode');\n    let node;\n\n    try {\n      node = which.sync(process.argv[0]);\n    } catch (_) {// TODO should we throw here?\n    }\n\n    process.emit('timeEnd', 'npm:load:whichnode');\n\n    if (node && node.toUpperCase() !== process.execPath.toUpperCase()) {\n      this.log.verbose('node symlink', node);\n      process.execPath = node;\n      this.config.execPath = node;\n    }\n\n    process.emit('time', 'npm:load:configload');\n    await this.config.load();\n    process.emit('timeEnd', 'npm:load:configload');\n    this.argv = this.config.parsedArgv.remain; // note: this MUST be shorter than the actual argv length, because it\n    // uses the same memory, so node will truncate it if it's too long.\n    // if it's a token revocation, then the argv contains a secret, so\n    // don't show that.  (Regrettable historical choice to put it there.)\n    // Any other secrets are configs only, so showing only the positional\n    // args keeps those from being leaked.\n\n    process.emit('time', 'npm:load:setTitle');\n    const tokrev = deref(this.argv[0]) === 'token' && this.argv[1] === 'revoke';\n    this.title = tokrev ? 'npm token revoke' + (this.argv[2] ? ' ***' : '') : ['npm', ...this.argv].join(' ');\n    process.emit('timeEnd', 'npm:load:setTitle');\n    process.emit('time', 'npm:load:setupLog');\n    setupLog(this.config);\n    process.emit('timeEnd', 'npm:load:setupLog');\n    process.env.COLOR = this.color ? '1' : '0';\n    process.emit('time', 'npm:load:cleanupLog');\n    cleanUpLogFiles(this.cache, this.config.get('logs-max'), this.log.warn);\n    process.emit('timeEnd', 'npm:load:cleanupLog');\n    this.log.resume();\n    process.emit('time', 'npm:load:configScope');\n    const configScope = this.config.get('scope');\n    if (configScope && !/^@/.test(configScope)) this.config.set('scope', `@${configScope}`, this.config.find('scope'));\n    process.emit('timeEnd', 'npm:load:configScope');\n    process.emit('time', 'npm:load:projectScope');\n    this.projectScope = this.config.get('scope') || getProjectScope(this.prefix);\n    process.emit('timeEnd', 'npm:load:projectScope');\n  }\n\n  get flatOptions() {\n    const {\n      flat\n    } = this.config;\n    if (this.command) flat.npmCommand = this.command;\n    return flat;\n  }\n\n  get color() {\n    // This is a special derived value that takes into consideration not only\n    // the config, but whether or not we are operating in a tty.\n    return this.flatOptions.color;\n  }\n\n  get lockfileVersion() {\n    return 2;\n  }\n\n  get log() {\n    return log;\n  }\n\n  get cache() {\n    return this.config.get('cache');\n  }\n\n  set cache(r) {\n    this.config.set('cache', r);\n  }\n\n  get globalPrefix() {\n    return this.config.globalPrefix;\n  }\n\n  set globalPrefix(r) {\n    this.config.globalPrefix = r;\n  }\n\n  get localPrefix() {\n    return this.config.localPrefix;\n  }\n\n  set localPrefix(r) {\n    this.config.localPrefix = r;\n  }\n\n  get globalDir() {\n    return process.platform !== 'win32' ? resolve(this.globalPrefix, 'lib', 'node_modules') : resolve(this.globalPrefix, 'node_modules');\n  }\n\n  get localDir() {\n    return resolve(this.localPrefix, 'node_modules');\n  }\n\n  get dir() {\n    return this.config.get('global') ? this.globalDir : this.localDir;\n  }\n\n  get globalBin() {\n    const b = this.globalPrefix;\n    return process.platform !== 'win32' ? resolve(b, 'bin') : b;\n  }\n\n  get localBin() {\n    return resolve(this.dir, '.bin');\n  }\n\n  get bin() {\n    return this.config.get('global') ? this.globalBin : this.localBin;\n  }\n\n  get prefix() {\n    return this.config.get('global') ? this.globalPrefix : this.localPrefix;\n  }\n\n  set prefix(r) {\n    const k = this.config.get('global') ? 'globalPrefix' : 'localPrefix';\n    this[k] = r;\n  }\n\n  get usage() {\n    return usage(this);\n  } // XXX add logging to see if we actually use this\n\n\n  get tmp() {\n    if (!this[_tmpFolder]) {\n      const rand = require('crypto').randomBytes(4).toString('hex');\n\n      this[_tmpFolder] = `npm-${process.pid}-${rand}`;\n    }\n\n    return resolve(this.config.get('tmp'), this[_tmpFolder]);\n  } // output to stdout in a progress bar compatible way\n\n\n  output(...msg) {\n    this.log.clearProgress();\n    console.log(...msg);\n    this.log.showProgress();\n  }\n\n}();\nif (require.main === module) require('./cli.js')(process);","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/npm.js"],"names":["EventEmitter","require","resolve","dirname","Config","log","gracefulify","procLogListener","proxyCmds","Proxy","get","target","cmd","actual","deref","Reflect","has","Impl","impl","npm","args","cb","_runCmd","attr","receiver","timers","Map","timings","processOnTimeHandler","name","set","Date","now","processOnTimeEndHandler","ms","timing","delete","silly","definitions","flatten","shorthands","shellouts","usage","which","setupLog","cleanUpLogFiles","getProjectScope","warnedNonDashArg","Symbol","_load","_tmpFolder","_title","module","exports","constructor","started","command","commands","perfStart","process","emit","version","config","npmPath","__dirname","title","updateNotification","on","perfStop","off","shelloutCommands","c","loaded","Error","env","npm_command","filter","arg","test","forEach","error","workspacesEnabled","workspacesFilters","filterByWorkspaces","length","output","execWorkspaces","er","exec","load","TypeError","loadPromise","pause","Promise","reject","catch","then","loadErr","warn","t","node","sync","argv","_","toUpperCase","execPath","verbose","parsedArgv","remain","tokrev","join","COLOR","color","cache","resume","configScope","find","projectScope","prefix","flatOptions","flat","npmCommand","lockfileVersion","r","globalPrefix","localPrefix","globalDir","platform","localDir","dir","globalBin","b","localBin","bin","k","tmp","rand","randomBytes","toString","pid","msg","clearProgress","console","showProgress","main"],"mappings":"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","sourcesContent":["const EventEmitter = require('events')\nconst { resolve, dirname } = require('path')\nconst Config = require('@npmcli/config')\nconst log = require('npmlog')\n\n// Patch the global fs module here at the app level\nrequire('graceful-fs').gracefulify(require('fs'))\n\n// TODO make this only ever load once (or unload) in tests\nconst procLogListener = require('./utils/proc-log-listener.js')\n\nconst proxyCmds = new Proxy({}, {\n  get: (target, cmd) => {\n    const actual = deref(cmd)\n    if (actual && !Reflect.has(target, actual)) {\n      const Impl = require(`./${actual}.js`)\n      const impl = new Impl(npm)\n      // Our existing npm.commands[x] act like a function with attributes, but\n      // our modules have non-inumerable attributes so we can't just assign\n      // them to an anonymous function like we used to.  This acts like that\n      // old way of doing things, until we can make breaking changes to the\n      // npm.commands[x] api\n      target[actual] = new Proxy(\n        (args, cb) => npm[_runCmd](actual, impl, args, cb),\n        {\n          get: (target, attr, receiver) => {\n            return Reflect.get(impl, attr, receiver)\n          },\n        })\n    }\n    return target[actual]\n  },\n})\n\n// Timers in progress\nconst timers = new Map()\n// Finished timers\nconst timings = {}\n\nconst processOnTimeHandler = (name) => {\n  timers.set(name, Date.now())\n}\n\nconst processOnTimeEndHandler = (name) => {\n  if (timers.has(name)) {\n    const ms = Date.now() - timers.get(name)\n    log.timing(name, `Completed in ${ms}ms`)\n    timings[name] = ms\n    timers.delete(name)\n  } else\n    log.silly('timing', \"Tried to end timer that doesn't exist:\", name)\n}\n\nconst { definitions, flatten, shorthands } = require('./utils/config/index.js')\nconst { shellouts } = require('./utils/cmd-list.js')\nconst usage = require('./utils/npm-usage.js')\n\nconst which = require('which')\n\nconst deref = require('./utils/deref-command.js')\nconst setupLog = require('./utils/setup-log.js')\nconst cleanUpLogFiles = require('./utils/cleanup-log-files.js')\nconst getProjectScope = require('./utils/get-project-scope.js')\n\nlet warnedNonDashArg = false\nconst _runCmd = Symbol('_runCmd')\nconst _load = Symbol('_load')\nconst _tmpFolder = Symbol('_tmpFolder')\nconst _title = Symbol('_title')\n\nconst npm = module.exports = new class extends EventEmitter {\n  constructor () {\n    super()\n    this.started = Date.now()\n    this.command = null\n    this.commands = proxyCmds\n    this.timings = timings\n    this.timers = timers\n    this.perfStart()\n    procLogListener()\n    process.emit('time', 'npm')\n    this.version = require('../package.json').version\n    this.config = new Config({\n      npmPath: dirname(__dirname),\n      definitions,\n      flatten,\n      shorthands,\n    })\n    this[_title] = process.title\n    this.updateNotification = null\n  }\n\n  perfStart () {\n    process.on('time', processOnTimeHandler)\n    process.on('timeEnd', processOnTimeEndHandler)\n  }\n\n  perfStop () {\n    process.off('time', processOnTimeHandler)\n    process.off('timeEnd', processOnTimeEndHandler)\n  }\n\n  get shelloutCommands () {\n    return shellouts\n  }\n\n  deref (c) {\n    return deref(c)\n  }\n\n  // this will only ever be called with cmd set to the canonical command name\n  [_runCmd] (cmd, impl, args, cb) {\n    if (!this.loaded) {\n      throw new Error(\n        'Call npm.load() before using this command.\\n' +\n        'See lib/cli.js for example usage.'\n      )\n    }\n\n    process.emit('time', `command:${cmd}`)\n    // since 'test', 'start', 'stop', etc. commands re-enter this function\n    // to call the run-script command, we need to only set it one time.\n    if (!this.command) {\n      process.env.npm_command = cmd\n      this.command = cmd\n    }\n\n    // Options are prefixed by a hyphen-minus (-, \\u2d).\n    // Other dash-type chars look similar but are invalid.\n    if (!warnedNonDashArg) {\n      args.filter(arg => /^[\\u2010-\\u2015\\u2212\\uFE58\\uFE63\\uFF0D]/.test(arg))\n        .forEach(arg => {\n          warnedNonDashArg = true\n          this.log.error('arg', 'Argument starts with non-ascii dash, this is probably invalid:', arg)\n        })\n    }\n\n    const workspacesEnabled = this.config.get('workspaces')\n    const workspacesFilters = this.config.get('workspace')\n    const filterByWorkspaces = workspacesEnabled || workspacesFilters.length > 0\n\n    if (this.config.get('usage')) {\n      this.output(impl.usage)\n      cb()\n    } else if (filterByWorkspaces) {\n      if (this.config.get('global'))\n        return cb(new Error('Workspaces not supported for global packages'))\n\n      impl.execWorkspaces(args, this.config.get('workspace'), er => {\n        process.emit('timeEnd', `command:${cmd}`)\n        cb(er)\n      })\n    } else {\n      impl.exec(args, er => {\n        process.emit('timeEnd', `command:${cmd}`)\n        cb(er)\n      })\n    }\n  }\n\n  load (cb) {\n    if (cb && typeof cb !== 'function')\n      throw new TypeError('callback must be a function if provided')\n\n    if (!this.loadPromise) {\n      process.emit('time', 'npm:load')\n      this.log.pause()\n      this.loadPromise = new Promise((resolve, reject) => {\n        this[_load]().catch(er => er).then((er) => {\n          this.loadErr = er\n          if (!er && this.config.get('force'))\n            this.log.warn('using --force', 'Recommended protections disabled.')\n\n          process.emit('timeEnd', 'npm:load')\n          if (er)\n            return reject(er)\n          resolve()\n        })\n      })\n    }\n    if (!cb)\n      return this.loadPromise\n\n    // loadPromise is returned here for legacy purposes, old code was allowing\n    // the mixing of callback and promise here.\n    return this.loadPromise.then(cb, cb)\n  }\n\n  get loaded () {\n    return this.config.loaded\n  }\n\n  get title () {\n    return this[_title]\n  }\n\n  set title (t) {\n    process.title = t\n    this[_title] = t\n  }\n\n  async [_load] () {\n    process.emit('time', 'npm:load:whichnode')\n    let node\n    try {\n      node = which.sync(process.argv[0])\n    } catch (_) {\n      // TODO should we throw here?\n    }\n    process.emit('timeEnd', 'npm:load:whichnode')\n    if (node && node.toUpperCase() !== process.execPath.toUpperCase()) {\n      this.log.verbose('node symlink', node)\n      process.execPath = node\n      this.config.execPath = node\n    }\n\n    process.emit('time', 'npm:load:configload')\n    await this.config.load()\n    process.emit('timeEnd', 'npm:load:configload')\n\n    this.argv = this.config.parsedArgv.remain\n    // note: this MUST be shorter than the actual argv length, because it\n    // uses the same memory, so node will truncate it if it's too long.\n    // if it's a token revocation, then the argv contains a secret, so\n    // don't show that.  (Regrettable historical choice to put it there.)\n    // Any other secrets are configs only, so showing only the positional\n    // args keeps those from being leaked.\n    process.emit('time', 'npm:load:setTitle')\n    const tokrev = deref(this.argv[0]) === 'token' && this.argv[1] === 'revoke'\n    this.title = tokrev ? 'npm token revoke' + (this.argv[2] ? ' ***' : '')\n      : ['npm', ...this.argv].join(' ')\n    process.emit('timeEnd', 'npm:load:setTitle')\n\n    process.emit('time', 'npm:load:setupLog')\n    setupLog(this.config)\n    process.emit('timeEnd', 'npm:load:setupLog')\n    process.env.COLOR = this.color ? '1' : '0'\n\n    process.emit('time', 'npm:load:cleanupLog')\n    cleanUpLogFiles(this.cache, this.config.get('logs-max'), this.log.warn)\n    process.emit('timeEnd', 'npm:load:cleanupLog')\n\n    this.log.resume()\n\n    process.emit('time', 'npm:load:configScope')\n    const configScope = this.config.get('scope')\n    if (configScope && !/^@/.test(configScope))\n      this.config.set('scope', `@${configScope}`, this.config.find('scope'))\n    process.emit('timeEnd', 'npm:load:configScope')\n\n    process.emit('time', 'npm:load:projectScope')\n    this.projectScope = this.config.get('scope') ||\n      getProjectScope(this.prefix)\n    process.emit('timeEnd', 'npm:load:projectScope')\n  }\n\n  get flatOptions () {\n    const { flat } = this.config\n    if (this.command)\n      flat.npmCommand = this.command\n    return flat\n  }\n\n  get color () {\n    // This is a special derived value that takes into consideration not only\n    // the config, but whether or not we are operating in a tty.\n    return this.flatOptions.color\n  }\n\n  get lockfileVersion () {\n    return 2\n  }\n\n  get log () {\n    return log\n  }\n\n  get cache () {\n    return this.config.get('cache')\n  }\n\n  set cache (r) {\n    this.config.set('cache', r)\n  }\n\n  get globalPrefix () {\n    return this.config.globalPrefix\n  }\n\n  set globalPrefix (r) {\n    this.config.globalPrefix = r\n  }\n\n  get localPrefix () {\n    return this.config.localPrefix\n  }\n\n  set localPrefix (r) {\n    this.config.localPrefix = r\n  }\n\n  get globalDir () {\n    return process.platform !== 'win32'\n      ? resolve(this.globalPrefix, 'lib', 'node_modules')\n      : resolve(this.globalPrefix, 'node_modules')\n  }\n\n  get localDir () {\n    return resolve(this.localPrefix, 'node_modules')\n  }\n\n  get dir () {\n    return (this.config.get('global')) ? this.globalDir : this.localDir\n  }\n\n  get globalBin () {\n    const b = this.globalPrefix\n    return process.platform !== 'win32' ? resolve(b, 'bin') : b\n  }\n\n  get localBin () {\n    return resolve(this.dir, '.bin')\n  }\n\n  get bin () {\n    return this.config.get('global') ? this.globalBin : this.localBin\n  }\n\n  get prefix () {\n    return this.config.get('global') ? this.globalPrefix : this.localPrefix\n  }\n\n  set prefix (r) {\n    const k = this.config.get('global') ? 'globalPrefix' : 'localPrefix'\n    this[k] = r\n  }\n\n  get usage () {\n    return usage(this)\n  }\n\n  // XXX add logging to see if we actually use this\n  get tmp () {\n    if (!this[_tmpFolder]) {\n      const rand = require('crypto').randomBytes(4).toString('hex')\n      this[_tmpFolder] = `npm-${process.pid}-${rand}`\n    }\n    return resolve(this.config.get('tmp'), this[_tmpFolder])\n  }\n\n  // output to stdout in a progress bar compatible way\n  output (...msg) {\n    this.log.clearProgress()\n    console.log(...msg)\n    this.log.showProgress()\n  }\n}()\n\nif (require.main === module)\n  require('./cli.js')(process)\n"]},"metadata":{},"sourceType":"script"}