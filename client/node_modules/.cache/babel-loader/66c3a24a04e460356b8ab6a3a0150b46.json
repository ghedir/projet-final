{"ast":null,"code":"const {\n  promisify\n} = require('util');\n\nconst readAsync = promisify(require('read'));\n\nconst userValidate = require('npm-user-validate');\n\nconst log = require('npmlog');\n\nexports.otp = readOTP;\nexports.password = readPassword;\nexports.username = readUsername;\nexports.email = readEmail;\nconst otpPrompt = `This command requires a one-time password (OTP) from your authenticator app.\nEnter one below. You can also pass one on the command line by appending --otp=123456.\nFor more information, see:\nhttps://docs.npmjs.com/getting-started/using-two-factor-authentication\nEnter OTP: `;\nconst passwordPrompt = 'npm password: ';\nconst usernamePrompt = 'npm username: ';\nconst emailPrompt = 'email (this IS public): ';\n\nfunction read(opts) {\n  log.clearProgress();\n  return readAsync(opts).finally(() => log.showProgress());\n}\n\nfunction readOTP(msg = otpPrompt, otp, isRetry) {\n  if (isRetry && otp && /^[\\d ]+$|^[A-Fa-f0-9]{64,64}$/.test(otp)) return otp.replace(/\\s+/g, '');\n  return read({\n    prompt: msg,\n    default: otp || ''\n  }).then(otp => readOTP(msg, otp, true));\n}\n\nfunction readPassword(msg = passwordPrompt, password, isRetry) {\n  if (isRetry && password) return password;\n  return read({\n    prompt: msg,\n    silent: true,\n    default: password || ''\n  }).then(password => readPassword(msg, password, true));\n}\n\nfunction readUsername(msg = usernamePrompt, username, opts = {}, isRetry) {\n  if (isRetry && username) {\n    const error = userValidate.username(username);\n    if (error) opts.log && opts.log.warn(error.message);else return Promise.resolve(username.trim());\n  }\n\n  return read({\n    prompt: msg,\n    default: username || ''\n  }).then(username => readUsername(msg, username, opts, true));\n}\n\nfunction readEmail(msg = emailPrompt, email, opts = {}, isRetry) {\n  if (isRetry && email) {\n    const error = userValidate.email(email);\n    if (error) opts.log && opts.log.warn(error.message);else return email.trim();\n  }\n\n  return read({\n    prompt: msg,\n    default: email || ''\n  }).then(username => readEmail(msg, username, opts, true));\n}","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/read-user-info.js"],"names":["promisify","require","readAsync","userValidate","log","exports","otp","readOTP","password","readPassword","username","readUsername","email","readEmail","otpPrompt","passwordPrompt","usernamePrompt","emailPrompt","read","opts","clearProgress","finally","showProgress","msg","isRetry","test","replace","prompt","default","then","silent","error","warn","message","Promise","resolve","trim"],"mappings":"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","sourcesContent":["const { promisify } = require('util')\nconst readAsync = promisify(require('read'))\nconst userValidate = require('npm-user-validate')\nconst log = require('npmlog')\n\nexports.otp = readOTP\nexports.password = readPassword\nexports.username = readUsername\nexports.email = readEmail\n\nconst otpPrompt = `This command requires a one-time password (OTP) from your authenticator app.\nEnter one below. You can also pass one on the command line by appending --otp=123456.\nFor more information, see:\nhttps://docs.npmjs.com/getting-started/using-two-factor-authentication\nEnter OTP: `\nconst passwordPrompt = 'npm password: '\nconst usernamePrompt = 'npm username: '\nconst emailPrompt = 'email (this IS public): '\n\nfunction read (opts) {\n  log.clearProgress()\n  return readAsync(opts).finally(() => log.showProgress())\n}\n\nfunction readOTP (msg = otpPrompt, otp, isRetry) {\n  if (isRetry && otp && /^[\\d ]+$|^[A-Fa-f0-9]{64,64}$/.test(otp))\n    return otp.replace(/\\s+/g, '')\n\n  return read({ prompt: msg, default: otp || '' })\n    .then((otp) => readOTP(msg, otp, true))\n}\n\nfunction readPassword (msg = passwordPrompt, password, isRetry) {\n  if (isRetry && password)\n    return password\n\n  return read({ prompt: msg, silent: true, default: password || '' })\n    .then((password) => readPassword(msg, password, true))\n}\n\nfunction readUsername (msg = usernamePrompt, username, opts = {}, isRetry) {\n  if (isRetry && username) {\n    const error = userValidate.username(username)\n    if (error)\n      opts.log && opts.log.warn(error.message)\n    else\n      return Promise.resolve(username.trim())\n  }\n\n  return read({ prompt: msg, default: username || '' })\n    .then((username) => readUsername(msg, username, opts, true))\n}\n\nfunction readEmail (msg = emailPrompt, email, opts = {}, isRetry) {\n  if (isRetry && email) {\n    const error = userValidate.email(email)\n    if (error)\n      opts.log && opts.log.warn(error.message)\n    else\n      return email.trim()\n  }\n\n  return read({ prompt: msg, default: email || '' })\n    .then((username) => readEmail(msg, username, opts, true))\n}\n"]},"metadata":{},"sourceType":"script"}