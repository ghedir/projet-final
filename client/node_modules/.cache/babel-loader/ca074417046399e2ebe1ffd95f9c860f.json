{"ast":null,"code":"'use strict';\n\nconst gitHosts = require('./git-host-info.js');\n\nclass GitHost {\n  constructor(type, user, auth, project, committish, defaultRepresentation, opts = {}) {\n    Object.assign(this, gitHosts[type]);\n    this.type = type;\n    this.user = user;\n    this.auth = auth;\n    this.project = project;\n    this.committish = committish;\n    this.default = defaultRepresentation;\n    this.opts = opts;\n  }\n\n  hash() {\n    return this.committish ? `#${this.committish}` : '';\n  }\n\n  ssh(opts) {\n    return this._fill(this.sshtemplate, opts);\n  }\n\n  _fill(template, opts) {\n    if (typeof template === 'function') {\n      const options = { ...this,\n        ...this.opts,\n        ...opts\n      }; // the path should always be set so we don't end up with 'undefined' in urls\n\n      if (!options.path) {\n        options.path = '';\n      } // template functions will insert the leading slash themselves\n\n\n      if (options.path.startsWith('/')) {\n        options.path = options.path.slice(1);\n      }\n\n      if (options.noCommittish) {\n        options.committish = null;\n      }\n\n      const result = template(options);\n      return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result;\n    }\n\n    return null;\n  }\n\n  sshurl(opts) {\n    return this._fill(this.sshurltemplate, opts);\n  }\n\n  browse(path, fragment, opts) {\n    // not a string, treat path as opts\n    if (typeof path !== 'string') {\n      return this._fill(this.browsetemplate, path);\n    }\n\n    if (typeof fragment !== 'string') {\n      opts = fragment;\n      fragment = null;\n    }\n\n    return this._fill(this.browsefiletemplate, { ...opts,\n      fragment,\n      path\n    });\n  }\n\n  docs(opts) {\n    return this._fill(this.docstemplate, opts);\n  }\n\n  bugs(opts) {\n    return this._fill(this.bugstemplate, opts);\n  }\n\n  https(opts) {\n    return this._fill(this.httpstemplate, opts);\n  }\n\n  git(opts) {\n    return this._fill(this.gittemplate, opts);\n  }\n\n  shortcut(opts) {\n    return this._fill(this.shortcuttemplate, opts);\n  }\n\n  path(opts) {\n    return this._fill(this.pathtemplate, opts);\n  }\n\n  tarball(opts) {\n    return this._fill(this.tarballtemplate, { ...opts,\n      noCommittish: false\n    });\n  }\n\n  file(path, opts) {\n    return this._fill(this.filetemplate, { ...opts,\n      path\n    });\n  }\n\n  getDefaultRepresentation() {\n    return this.default;\n  }\n\n  toString(opts) {\n    if (this.default && typeof this[this.default] === 'function') {\n      return this[this.default](opts);\n    }\n\n    return this.sshurl(opts);\n  }\n\n}\n\nmodule.exports = GitHost;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/hosted-git-info/git-host.js"],"names":["gitHosts","require","GitHost","constructor","type","user","auth","project","committish","defaultRepresentation","opts","Object","assign","default","hash","ssh","_fill","sshtemplate","template","options","path","startsWith","slice","noCommittish","result","noGitPlus","sshurl","sshurltemplate","browse","fragment","browsetemplate","browsefiletemplate","docs","docstemplate","bugs","bugstemplate","https","httpstemplate","git","gittemplate","shortcut","shortcuttemplate","pathtemplate","tarball","tarballtemplate","file","filetemplate","getDefaultRepresentation","toString","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst gitHosts = require('./git-host-info.js')\n\nclass GitHost {\n  constructor (type, user, auth, project, committish, defaultRepresentation, opts = {}) {\n    Object.assign(this, gitHosts[type])\n    this.type = type\n    this.user = user\n    this.auth = auth\n    this.project = project\n    this.committish = committish\n    this.default = defaultRepresentation\n    this.opts = opts\n  }\n\n  hash () {\n    return this.committish ? `#${this.committish}` : ''\n  }\n\n  ssh (opts) {\n    return this._fill(this.sshtemplate, opts)\n  }\n\n  _fill (template, opts) {\n    if (typeof template === 'function') {\n      const options = { ...this, ...this.opts, ...opts }\n\n      // the path should always be set so we don't end up with 'undefined' in urls\n      if (!options.path) {\n        options.path = ''\n      }\n\n      // template functions will insert the leading slash themselves\n      if (options.path.startsWith('/')) {\n        options.path = options.path.slice(1)\n      }\n\n      if (options.noCommittish) {\n        options.committish = null\n      }\n\n      const result = template(options)\n      return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result\n    }\n\n    return null\n  }\n\n  sshurl (opts) {\n    return this._fill(this.sshurltemplate, opts)\n  }\n\n  browse (path, fragment, opts) {\n    // not a string, treat path as opts\n    if (typeof path !== 'string') {\n      return this._fill(this.browsetemplate, path)\n    }\n\n    if (typeof fragment !== 'string') {\n      opts = fragment\n      fragment = null\n    }\n    return this._fill(this.browsefiletemplate, { ...opts, fragment, path })\n  }\n\n  docs (opts) {\n    return this._fill(this.docstemplate, opts)\n  }\n\n  bugs (opts) {\n    return this._fill(this.bugstemplate, opts)\n  }\n\n  https (opts) {\n    return this._fill(this.httpstemplate, opts)\n  }\n\n  git (opts) {\n    return this._fill(this.gittemplate, opts)\n  }\n\n  shortcut (opts) {\n    return this._fill(this.shortcuttemplate, opts)\n  }\n\n  path (opts) {\n    return this._fill(this.pathtemplate, opts)\n  }\n\n  tarball (opts) {\n    return this._fill(this.tarballtemplate, { ...opts, noCommittish: false })\n  }\n\n  file (path, opts) {\n    return this._fill(this.filetemplate, { ...opts, path })\n  }\n\n  getDefaultRepresentation () {\n    return this.default\n  }\n\n  toString (opts) {\n    if (this.default && typeof this[this.default] === 'function') {\n      return this[this.default](opts)\n    }\n\n    return this.sshurl(opts)\n  }\n}\nmodule.exports = GitHost\n"]},"metadata":{},"sourceType":"script"}