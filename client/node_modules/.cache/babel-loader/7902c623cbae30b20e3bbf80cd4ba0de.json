{"ast":null,"code":"const makeSpawnArgs = require('./make-spawn-args.js');\n\nconst promiseSpawn = require('@npmcli/promise-spawn');\n\nconst packageEnvs = require('./package-envs.js');\n\nconst {\n  isNodeGypPackage,\n  defaultGypInstallScript\n} = require('@npmcli/node-gyp');\n\nconst signalManager = require('./signal-manager.js');\n\nconst isServerPackage = require('./is-server-package.js'); // you wouldn't like me when I'm angry...\n\n\nconst bruce = (id, event, cmd) => `\\n> ${id ? id + ' ' : ''}${event}\\n> ${cmd.trim().replace(/\\n/g, '\\n> ')}\\n`;\n\nconst runScriptPkg = async options => {\n  const {\n    event,\n    path,\n    scriptShell,\n    env = {},\n    stdio = 'pipe',\n    pkg,\n    args = [],\n    stdioString = false,\n    // note: only used when stdio:inherit\n    banner = true,\n    // how long to wait for a process.kill signal\n    // only exposed here so that we can make the test go a bit faster.\n    signalTimeout = 500\n  } = options;\n  const {\n    scripts = {},\n    gypfile\n  } = pkg;\n  let cmd = null;\n  if (options.cmd) cmd = options.cmd;else if (pkg.scripts && pkg.scripts[event]) cmd = pkg.scripts[event] + args.map(a => ` ${JSON.stringify(a)}`).join('');else if ( // If there is no preinstall or install script, default to rebuilding node-gyp packages.\n  event === 'install' && !scripts.install && !scripts.preinstall && gypfile !== false && (await isNodeGypPackage(path))) cmd = defaultGypInstallScript;else if (event === 'start' && (await isServerPackage(path))) cmd = 'node server.js' + args.map(a => ` ${JSON.stringify(a)}`).join('');\n  if (!cmd) return {\n    code: 0,\n    signal: null\n  };\n\n  if (stdio === 'inherit' && banner !== false) {\n    // we're dumping to the parent's stdout, so print the banner\n    console.log(bruce(pkg._id, event, cmd));\n  }\n\n  const p = promiseSpawn(...makeSpawnArgs({\n    event,\n    path,\n    scriptShell,\n    env: packageEnvs(env, pkg),\n    stdio,\n    cmd,\n    stdioString\n  }), {\n    event,\n    script: cmd,\n    pkgid: pkg._id,\n    path\n  });\n  if (stdio === 'inherit') signalManager.add(p.process);\n  if (p.stdin) p.stdin.end();\n  return p.catch(er => {\n    const {\n      signal\n    } = er;\n\n    if (stdio === 'inherit' && signal) {\n      process.kill(process.pid, signal); // just in case we don't die, reject after 500ms\n      // this also keeps the node process open long enough to actually\n      // get the signal, rather than terminating gracefully.\n\n      return new Promise((res, rej) => setTimeout(() => rej(er), signalTimeout));\n    } else throw er;\n  });\n};\n\nmodule.exports = runScriptPkg;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/run-script/lib/run-script-pkg.js"],"names":["makeSpawnArgs","require","promiseSpawn","packageEnvs","isNodeGypPackage","defaultGypInstallScript","signalManager","isServerPackage","bruce","id","event","cmd","trim","replace","runScriptPkg","options","path","scriptShell","env","stdio","pkg","args","stdioString","banner","signalTimeout","scripts","gypfile","map","a","JSON","stringify","join","install","preinstall","code","signal","console","log","_id","p","script","pkgid","add","process","stdin","end","catch","er","kill","pid","Promise","res","rej","setTimeout","module","exports"],"mappings":"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","sourcesContent":["const makeSpawnArgs = require('./make-spawn-args.js')\nconst promiseSpawn = require('@npmcli/promise-spawn')\nconst packageEnvs = require('./package-envs.js')\nconst { isNodeGypPackage, defaultGypInstallScript } = require('@npmcli/node-gyp')\nconst signalManager = require('./signal-manager.js')\nconst isServerPackage = require('./is-server-package.js')\n\n// you wouldn't like me when I'm angry...\nconst bruce = (id, event, cmd) =>\n  `\\n> ${id ? id + ' ' : ''}${event}\\n> ${cmd.trim().replace(/\\n/g, '\\n> ')}\\n`\n\nconst runScriptPkg = async options => {\n  const {\n    event,\n    path,\n    scriptShell,\n    env = {},\n    stdio = 'pipe',\n    pkg,\n    args = [],\n    stdioString = false,\n    // note: only used when stdio:inherit\n    banner = true,\n    // how long to wait for a process.kill signal\n    // only exposed here so that we can make the test go a bit faster.\n    signalTimeout = 500,\n  } = options\n\n  const {scripts = {}, gypfile} = pkg\n  let cmd = null\n  if (options.cmd)\n    cmd = options.cmd\n  else if (pkg.scripts && pkg.scripts[event])\n    cmd = pkg.scripts[event] + args.map(a => ` ${JSON.stringify(a)}`).join('')\n  else if ( // If there is no preinstall or install script, default to rebuilding node-gyp packages.\n    event === 'install' &&\n    !scripts.install &&\n    !scripts.preinstall &&\n    gypfile !== false &&\n    await isNodeGypPackage(path)\n  )\n    cmd = defaultGypInstallScript\n  else if (event === 'start' && await isServerPackage(path))\n    cmd = 'node server.js' + args.map(a => ` ${JSON.stringify(a)}`).join('')\n\n  if (!cmd)\n    return { code: 0, signal: null }\n\n  if (stdio === 'inherit' && banner !== false) {\n    // we're dumping to the parent's stdout, so print the banner\n    console.log(bruce(pkg._id, event, cmd))\n  }\n\n  const p = promiseSpawn(...makeSpawnArgs({\n    event,\n    path,\n    scriptShell,\n    env: packageEnvs(env, pkg),\n    stdio,\n    cmd,\n    stdioString,\n  }), {\n    event,\n    script: cmd,\n    pkgid: pkg._id,\n    path,\n  })\n\n  if (stdio === 'inherit')\n    signalManager.add(p.process)\n\n  if (p.stdin)\n    p.stdin.end()\n\n  return p.catch(er => {\n    const { signal } = er\n    if (stdio === 'inherit' && signal) {\n      process.kill(process.pid, signal)\n      // just in case we don't die, reject after 500ms\n      // this also keeps the node process open long enough to actually\n      // get the signal, rather than terminating gracefully.\n      return new Promise((res, rej) => setTimeout(() => rej(er), signalTimeout))\n    } else\n      throw er\n  })\n}\n\nmodule.exports = runScriptPkg\n"]},"metadata":{},"sourceType":"script"}