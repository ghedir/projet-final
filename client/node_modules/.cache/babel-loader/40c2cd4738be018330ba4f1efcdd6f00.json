{"ast":null,"code":"const {\n  join,\n  sep\n} = require('path');\n\nconst getOptions = require('./common/get-options.js');\n\nconst mkdir = require('./mkdir/index.js');\n\nconst mkdtemp = require('./mkdtemp.js');\n\nconst rm = require('./rm/index.js'); // create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\n\n\nconst withTempDir = async (root, fn, opts) => {\n  const options = getOptions(opts, {\n    copy: ['tmpPrefix']\n  }); // create the directory, and fix its ownership\n\n  await mkdir(root, {\n    recursive: true,\n    owner: 'inherit'\n  });\n  const target = await mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''), {\n    owner: 'inherit'\n  });\n  let err;\n  let result;\n\n  try {\n    result = await fn(target);\n  } catch (_err) {\n    err = _err;\n  }\n\n  try {\n    await rm(target, {\n      force: true,\n      recursive: true\n    });\n  } catch (err) {}\n\n  if (err) {\n    throw err;\n  }\n\n  return result;\n};\n\nmodule.exports = withTempDir;","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/fs/lib/with-temp-dir.js"],"names":["join","sep","require","getOptions","mkdir","mkdtemp","rm","withTempDir","root","fn","opts","options","copy","recursive","owner","target","tmpPrefix","err","result","_err","force","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAgBC,OAAO,CAAC,MAAD,CAA7B;;AAEA,MAAMC,UAAU,GAAGD,OAAO,CAAC,yBAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,kBAAD,CAArB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,eAAD,CAAlB,C,CAEA;AACA;AACA;;;AACA,MAAMK,WAAW,GAAG,OAAOC,IAAP,EAAaC,EAAb,EAAiBC,IAAjB,KAA0B;AAC5C,QAAMC,OAAO,GAAGR,UAAU,CAACO,IAAD,EAAO;AAC/BE,IAAAA,IAAI,EAAE,CAAC,WAAD;AADyB,GAAP,CAA1B,CAD4C,CAI5C;;AACA,QAAMR,KAAK,CAACI,IAAD,EAAO;AAAEK,IAAAA,SAAS,EAAE,IAAb;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAAP,CAAX;AAEA,QAAMC,MAAM,GAAG,MAAMV,OAAO,CAACL,IAAI,CAAE,GAAEQ,IAAK,GAAEP,GAAI,EAAf,EAAkBU,OAAO,CAACK,SAAR,IAAqB,EAAvC,CAAL,EAAiD;AAAEF,IAAAA,KAAK,EAAE;AAAT,GAAjD,CAA5B;AACA,MAAIG,GAAJ;AACA,MAAIC,MAAJ;;AAEA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMT,EAAE,CAACM,MAAD,CAAjB;AACD,GAFD,CAEE,OAAOI,IAAP,EAAa;AACbF,IAAAA,GAAG,GAAGE,IAAN;AACD;;AAED,MAAI;AACF,UAAMb,EAAE,CAACS,MAAD,EAAS;AAAEK,MAAAA,KAAK,EAAE,IAAT;AAAeP,MAAAA,SAAS,EAAE;AAA1B,KAAT,CAAR;AACD,GAFD,CAEE,OAAOI,GAAP,EAAY,CAAE;;AAEhB,MAAIA,GAAJ,EAAS;AACP,UAAMA,GAAN;AACD;;AAED,SAAOC,MAAP;AACD,CA1BD;;AA4BAG,MAAM,CAACC,OAAP,GAAiBf,WAAjB","sourcesContent":["const { join, sep } = require('path')\n\nconst getOptions = require('./common/get-options.js')\nconst mkdir = require('./mkdir/index.js')\nconst mkdtemp = require('./mkdtemp.js')\nconst rm = require('./rm/index.js')\n\n// create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\nconst withTempDir = async (root, fn, opts) => {\n  const options = getOptions(opts, {\n    copy: ['tmpPrefix'],\n  })\n  // create the directory, and fix its ownership\n  await mkdir(root, { recursive: true, owner: 'inherit' })\n\n  const target = await mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''), { owner: 'inherit' })\n  let err\n  let result\n\n  try {\n    result = await fn(target)\n  } catch (_err) {\n    err = _err\n  }\n\n  try {\n    await rm(target, { force: true, recursive: true })\n  } catch (err) {}\n\n  if (err) {\n    throw err\n  }\n\n  return result\n}\n\nmodule.exports = withTempDir\n"]},"metadata":{},"sourceType":"script"}