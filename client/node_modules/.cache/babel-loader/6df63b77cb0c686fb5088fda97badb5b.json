{"ast":null,"code":"// package children are represented with a Map object, but many file systems\n// are case-insensitive and unicode-normalizing, so we need to treat\n// node.children.get('FOO') and node.children.get('foo') as the same thing.\nconst _keys = Symbol('keys');\n\nconst _normKey = Symbol('normKey');\n\nconst normalize = s => s.normalize('NFKD').toLowerCase();\n\nconst OGMap = Map;\nmodule.exports = class Map extends OGMap {\n  constructor(items = []) {\n    super();\n    this[_keys] = new OGMap();\n\n    for (const [key, val] of items) {\n      this.set(key, val);\n    }\n  }\n\n  [_normKey](key) {\n    return typeof key === 'string' ? normalize(key) : key;\n  }\n\n  get(key) {\n    const normKey = this[_normKey](key);\n\n    return this[_keys].has(normKey) ? super.get(this[_keys].get(normKey)) : undefined;\n  }\n\n  set(key, val) {\n    const normKey = this[_normKey](key);\n\n    if (this[_keys].has(normKey)) {\n      super.delete(this[_keys].get(normKey));\n    }\n\n    this[_keys].set(normKey, key);\n\n    return super.set(key, val);\n  }\n\n  delete(key) {\n    const normKey = this[_normKey](key);\n\n    if (this[_keys].has(normKey)) {\n      const prevKey = this[_keys].get(normKey);\n\n      this[_keys].delete(normKey);\n\n      return super.delete(prevKey);\n    }\n  }\n\n  has(key) {\n    const normKey = this[_normKey](key);\n\n    return this[_keys].has(normKey) && super.has(this[_keys].get(normKey));\n  }\n\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/arborist/lib/case-insensitive-map.js"],"names":["_keys","Symbol","_normKey","normalize","s","toLowerCase","OGMap","Map","module","exports","constructor","items","key","val","set","get","normKey","has","undefined","delete","prevKey"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,KAAK,GAAGC,MAAM,CAAC,MAAD,CAApB;;AACA,MAAMC,QAAQ,GAAGD,MAAM,CAAC,SAAD,CAAvB;;AACA,MAAME,SAAS,GAAGC,CAAC,IAAIA,CAAC,CAACD,SAAF,CAAY,MAAZ,EAAoBE,WAApB,EAAvB;;AACA,MAAMC,KAAK,GAAGC,GAAd;AACAC,MAAM,CAACC,OAAP,GAAiB,MAAMF,GAAN,SAAkBD,KAAlB,CAAwB;AACvCI,EAAAA,WAAW,CAAEC,KAAK,GAAG,EAAV,EAAc;AACvB;AACA,SAAKX,KAAL,IAAc,IAAIM,KAAJ,EAAd;;AACA,SAAK,MAAM,CAACM,GAAD,EAAMC,GAAN,CAAX,IAAyBF,KAAzB,EAAgC;AAC9B,WAAKG,GAAL,CAASF,GAAT,EAAcC,GAAd;AACD;AACF;;AAEQ,GAARX,QAAQ,EAAGU,GAAH,EAAQ;AACf,WAAO,OAAOA,GAAP,KAAe,QAAf,GAA0BT,SAAS,CAACS,GAAD,CAAnC,GAA2CA,GAAlD;AACD;;AAEDG,EAAAA,GAAG,CAAEH,GAAF,EAAO;AACR,UAAMI,OAAO,GAAG,KAAKd,QAAL,EAAeU,GAAf,CAAhB;;AACA,WAAO,KAAKZ,KAAL,EAAYiB,GAAZ,CAAgBD,OAAhB,IAA2B,MAAMD,GAAN,CAAU,KAAKf,KAAL,EAAYe,GAAZ,CAAgBC,OAAhB,CAAV,CAA3B,GACHE,SADJ;AAED;;AAEDJ,EAAAA,GAAG,CAAEF,GAAF,EAAOC,GAAP,EAAY;AACb,UAAMG,OAAO,GAAG,KAAKd,QAAL,EAAeU,GAAf,CAAhB;;AACA,QAAI,KAAKZ,KAAL,EAAYiB,GAAZ,CAAgBD,OAAhB,CAAJ,EAA8B;AAC5B,YAAMG,MAAN,CAAa,KAAKnB,KAAL,EAAYe,GAAZ,CAAgBC,OAAhB,CAAb;AACD;;AACD,SAAKhB,KAAL,EAAYc,GAAZ,CAAgBE,OAAhB,EAAyBJ,GAAzB;;AACA,WAAO,MAAME,GAAN,CAAUF,GAAV,EAAeC,GAAf,CAAP;AACD;;AAEDM,EAAAA,MAAM,CAAEP,GAAF,EAAO;AACX,UAAMI,OAAO,GAAG,KAAKd,QAAL,EAAeU,GAAf,CAAhB;;AACA,QAAI,KAAKZ,KAAL,EAAYiB,GAAZ,CAAgBD,OAAhB,CAAJ,EAA8B;AAC5B,YAAMI,OAAO,GAAG,KAAKpB,KAAL,EAAYe,GAAZ,CAAgBC,OAAhB,CAAhB;;AACA,WAAKhB,KAAL,EAAYmB,MAAZ,CAAmBH,OAAnB;;AACA,aAAO,MAAMG,MAAN,CAAaC,OAAb,CAAP;AACD;AACF;;AAEDH,EAAAA,GAAG,CAAEL,GAAF,EAAO;AACR,UAAMI,OAAO,GAAG,KAAKd,QAAL,EAAeU,GAAf,CAAhB;;AACA,WAAO,KAAKZ,KAAL,EAAYiB,GAAZ,CAAgBD,OAAhB,KAA4B,MAAMC,GAAN,CAAU,KAAKjB,KAAL,EAAYe,GAAZ,CAAgBC,OAAhB,CAAV,CAAnC;AACD;;AAxCsC,CAAzC","sourcesContent":["// package children are represented with a Map object, but many file systems\n// are case-insensitive and unicode-normalizing, so we need to treat\n// node.children.get('FOO') and node.children.get('foo') as the same thing.\n\nconst _keys = Symbol('keys')\nconst _normKey = Symbol('normKey')\nconst normalize = s => s.normalize('NFKD').toLowerCase()\nconst OGMap = Map\nmodule.exports = class Map extends OGMap {\n  constructor (items = []) {\n    super()\n    this[_keys] = new OGMap()\n    for (const [key, val] of items) {\n      this.set(key, val)\n    }\n  }\n\n  [_normKey] (key) {\n    return typeof key === 'string' ? normalize(key) : key\n  }\n\n  get (key) {\n    const normKey = this[_normKey](key)\n    return this[_keys].has(normKey) ? super.get(this[_keys].get(normKey))\n      : undefined\n  }\n\n  set (key, val) {\n    const normKey = this[_normKey](key)\n    if (this[_keys].has(normKey)) {\n      super.delete(this[_keys].get(normKey))\n    }\n    this[_keys].set(normKey, key)\n    return super.set(key, val)\n  }\n\n  delete (key) {\n    const normKey = this[_normKey](key)\n    if (this[_keys].has(normKey)) {\n      const prevKey = this[_keys].get(normKey)\n      this[_keys].delete(normKey)\n      return super.delete(prevKey)\n    }\n  }\n\n  has (key) {\n    const normKey = this[_normKey](key)\n    return this[_keys].has(normKey) && super.has(this[_keys].get(normKey))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}