{"ast":null,"code":"// return the description of the valid values of a field\n// returns a string for one thing, or an array of descriptions\nconst typeDefs = require('./type-defs.js');\n\nconst typeDescription = t => {\n  if (!t || typeof t !== 'function' && typeof t !== 'object') return t;\n  if (Array.isArray(t)) return t.map(t => typeDescription(t));\n\n  for (const {\n    type,\n    description\n  } of Object.values(typeDefs)) {\n    if (type === t) return description || type;\n  }\n\n  return t;\n};\n\nmodule.exports = t => [].concat(typeDescription(t)).filter(t => t !== undefined);","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/node_modules/@npmcli/config/lib/type-description.js"],"names":["typeDefs","require","typeDescription","t","Array","isArray","map","type","description","Object","values","module","exports","concat","filter","undefined"],"mappings":"AAAA;AACA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMC,eAAe,GAAGC,CAAC,IAAI;AAC3B,MAAI,CAACA,CAAD,IAAM,OAAOA,CAAP,KAAa,UAAb,IAA2B,OAAOA,CAAP,KAAa,QAAlD,EACE,OAAOA,CAAP;AAEF,MAAIC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAJ,EACE,OAAOA,CAAC,CAACG,GAAF,CAAMH,CAAC,IAAID,eAAe,CAACC,CAAD,CAA1B,CAAP;;AAEF,OAAK,MAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAX,IAAoCC,MAAM,CAACC,MAAP,CAAcV,QAAd,CAApC,EAA6D;AAC3D,QAAIO,IAAI,KAAKJ,CAAb,EACE,OAAOK,WAAW,IAAID,IAAtB;AACH;;AAED,SAAOJ,CAAP;AACD,CAbD;;AAcAQ,MAAM,CAACC,OAAP,GAAiBT,CAAC,IAAI,GAAGU,MAAH,CAAUX,eAAe,CAACC,CAAD,CAAzB,EAA8BW,MAA9B,CAAqCX,CAAC,IAAIA,CAAC,KAAKY,SAAhD,CAAtB","sourcesContent":["// return the description of the valid values of a field\n// returns a string for one thing, or an array of descriptions\nconst typeDefs = require('./type-defs.js')\nconst typeDescription = t => {\n  if (!t || typeof t !== 'function' && typeof t !== 'object')\n    return t\n\n  if (Array.isArray(t))\n    return t.map(t => typeDescription(t))\n\n  for (const { type, description } of Object.values(typeDefs)) {\n    if (type === t)\n      return description || type\n  }\n\n  return t\n}\nmodule.exports = t => [].concat(typeDescription(t)).filter(t => t !== undefined)\n"]},"metadata":{},"sourceType":"script"}