{"ast":null,"code":"const {\n  dirname\n} = require('path');\n\nconst {\n  cmdList\n} = require('./cmd-list');\n\nconst localeCompare = require('@isaacs/string-locale-compare')('en');\n\nmodule.exports = npm => {\n  const usesBrowser = npm.config.get('viewer') === 'browser' ? ' (in a browser)' : '';\n  return `npm <command>\n\nUsage:\n\nnpm install        install all the dependencies in your project\nnpm install <foo>  add the <foo> dependency to your project\nnpm test           run this project's tests\nnpm run <foo>      run the script named <foo>\nnpm <command> -h   quick help on <command>\nnpm -l             display usage info for all commands\nnpm help <term>    search for help on <term>${usesBrowser}\nnpm help npm       more involved overview${usesBrowser}\n\nAll commands:\n${allCommands(npm)}\n\nSpecify configs in the ini-formatted file:\n    ${npm.config.get('userconfig')}\nor on the command line via: npm <command> --key=value\n\nMore configuration info: npm help config\nConfiguration fields: npm help 7 config\n\nnpm@${npm.version} ${dirname(dirname(__dirname))}`;\n};\n\nconst allCommands = npm => {\n  if (npm.config.get('long')) return usages(npm);\n  return '\\n    ' + wrap(cmdList);\n};\n\nconst wrap = arr => {\n  const out = [''];\n  const line = !process.stdout.columns ? 60 : Math.min(60, Math.max(process.stdout.columns - 16, 24));\n  let l = 0;\n\n  for (const c of arr.sort((a, b) => a < b ? -1 : 1)) {\n    if (out[l].length + c.length + 2 < line) out[l] += ', ' + c;else {\n      out[l++] += ',';\n      out[l] = c;\n    }\n  }\n\n  return out.join('\\n    ').substr(2);\n};\n\nconst usages = npm => {\n  // return a string of <command>: <usage>\n  let maxLen = 0;\n  return cmdList.reduce((set, c) => {\n    set.push([c, npm.commands[c].usage]);\n    maxLen = Math.max(maxLen, c.length);\n    return set;\n  }, []).sort(([a], [b]) => localeCompare(a, b)).map(([c, usage]) => `\\n    ${c}${' '.repeat(maxLen - c.length + 1)}${usage.split('\\n').join('\\n' + ' '.repeat(maxLen + 5))}`).join('\\n');\n};","map":{"version":3,"sources":["C:/Users/ghedi/Documents/GhedBlog/node_modules/npm/lib/utils/npm-usage.js"],"names":["dirname","require","cmdList","localeCompare","module","exports","npm","usesBrowser","config","get","allCommands","version","__dirname","usages","wrap","arr","out","line","process","stdout","columns","Math","min","max","l","c","sort","a","b","length","join","substr","maxLen","reduce","set","push","commands","usage","map","repeat","split"],"mappings":"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","sourcesContent":["const { dirname } = require('path')\nconst { cmdList } = require('./cmd-list')\nconst localeCompare = require('@isaacs/string-locale-compare')('en')\n\nmodule.exports = (npm) => {\n  const usesBrowser = npm.config.get('viewer') === 'browser'\n    ? ' (in a browser)' : ''\n  return `npm <command>\n\nUsage:\n\nnpm install        install all the dependencies in your project\nnpm install <foo>  add the <foo> dependency to your project\nnpm test           run this project's tests\nnpm run <foo>      run the script named <foo>\nnpm <command> -h   quick help on <command>\nnpm -l             display usage info for all commands\nnpm help <term>    search for help on <term>${usesBrowser}\nnpm help npm       more involved overview${usesBrowser}\n\nAll commands:\n${allCommands(npm)}\n\nSpecify configs in the ini-formatted file:\n    ${npm.config.get('userconfig')}\nor on the command line via: npm <command> --key=value\n\nMore configuration info: npm help config\nConfiguration fields: npm help 7 config\n\nnpm@${npm.version} ${dirname(dirname(__dirname))}`\n}\n\nconst allCommands = (npm) => {\n  if (npm.config.get('long'))\n    return usages(npm)\n  return ('\\n    ' + wrap(cmdList))\n}\n\nconst wrap = (arr) => {\n  const out = ['']\n\n  const line = !process.stdout.columns ? 60\n    : Math.min(60, Math.max(process.stdout.columns - 16, 24))\n\n  let l = 0\n  for (const c of arr.sort((a, b) => a < b ? -1 : 1)) {\n    if (out[l].length + c.length + 2 < line)\n      out[l] += ', ' + c\n    else {\n      out[l++] += ','\n      out[l] = c\n    }\n  }\n  return out.join('\\n    ').substr(2)\n}\n\nconst usages = (npm) => {\n  // return a string of <command>: <usage>\n  let maxLen = 0\n  return cmdList.reduce((set, c) => {\n    set.push([c, npm.commands[c].usage])\n    maxLen = Math.max(maxLen, c.length)\n    return set\n  }, [])\n    .sort(([a], [b]) => localeCompare(a, b))\n    .map(([c, usage]) => `\\n    ${c}${' '.repeat(maxLen - c.length + 1)}${\n      (usage.split('\\n').join('\\n' + ' '.repeat(maxLen + 5)))}`)\n    .join('\\n')\n}\n"]},"metadata":{},"sourceType":"script"}